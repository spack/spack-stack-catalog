Alpine-DAV/spack_configs:
  data_format: 2
  description: spack envs
  filenames:
  - _experimental/envs/alpinedav/ubuntu_18_cuda_10.1_devel/spack.yaml
  - _experimental/envs/llnl/pascal-cuda/spack.yaml
  - _experimental/envs/llnl/quartz/spack.yaml
  - _experimental/envs/olcf/summit/spack.yaml
  - _experimental/envs/alpinedav/ubuntu_18_devel/spack.yaml
  full_name: Alpine-DAV/spack_configs
  latest_release: null
  readme: '<h1><a id="user-content-spack_configs" class="anchor" aria-hidden="true"
    href="#spack_configs"><span aria-hidden="true" class="octicon octicon-link"></span></a>spack_configs</h1>

    <p>shared spack configs repo</p>

    '
  stargazers_count: 0
  subscribers_count: 5
  topics: []
  updated_at: 1639176281.0
CUP-ECS/cajitafluids:
  data_format: 2
  description: A simple poisson finite difference fluid solver in Cajita/Kokkos for
    testing MPI communication abstractions and their performance
  filenames:
  - configs/generic/spack-cuda-wrapper.yaml
  - configs/github/spack.yaml
  - configs/llnl-lassen/spack.yaml
  - configs/tutorial-uao-cuda/spack.yaml
  - configs/generic/spack-cuda-clang.yaml
  full_name: CUP-ECS/cajitafluids
  latest_release: null
  readme: '<h1><a id="user-content-poisson-mpi-benchmark" class="anchor" aria-hidden="true"
    href="#poisson-mpi-benchmark"><span aria-hidden="true" class="octicon octicon-link"></span></a>Poisson
    MPI Benchmark</h1>

    <p>This directory contains code for a relatively simple finite difference

    fluid advection solver for exploring communication issues on modern architectures

    (particularly GPUs). The main goal is to look at different neighbor collective

    and GPU communication approaches.</p>

    <p>Computationally, the benchmark advects a material feature (that doesn''t otherwise
    effect

    fluid flow, e.g. by changing pressite) using the incompressible Euler fluid flow
    equations.

    Consider, for example, something like a dye being carried through a tank of water
    or a

    fragrance wafting across a room.</p>

    <p>The main elements of the benchmark are:</p>

    <ul>

    <li>Solution of the pressure gradient at each timestep to maintain

    incompressibility. The benchmark has two initial implementations:

    (1) Calling a matrix-free solver in HYPRE to solve the problem or (2)

    running a local matrix-free preconditioned CG solver, in which different

    MPI approaches for the halo exchange are explored.</li>

    <li>Interpolation (either cubic splines or linear) for semi-Lagrangian

    advection of the material being advected across timesteps.</li>

    <li>3rd-order Runge Kutta for time integration</li>

    </ul>

    <p>Sources:</p>

    <ul>

    <li>Fluid Simulation for Comptuer Graphics by Bridson</li>

    <li>Incremental Fluids in Kokkos (<a href="mailto:git@github.com">git@github.com</a>:pkestene/incremental-fluids-kokkos.git)</li>

    </ul>

    '
  stargazers_count: 0
  subscribers_count: 11
  topics: []
  updated_at: 1654983605.0
E4S-Project/e4s:
  data_format: 2
  description: E4S for Spack
  filenames:
  - environments/22.05/cuda-x86_64.spack.yaml
  - environments/22.05/oneapi.spack.yaml
  - environments/22.05/rocm.spack.yaml
  - environments/22.05/cuda-ppc64le.spack.yaml
  full_name: E4S-Project/e4s
  latest_release: null
  readme: "<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/E4S-Project/e4s/blob/master/logos/E4S-dark-green.png\"\
    ><img src=\"https://github.com/E4S-Project/e4s/raw/master/logos/E4S-dark-green.png\"\
    \ width=\"200\" alt=\"E4S\" style=\"max-width: 100%;\"></a></p> \n<p><a target=\"\
    _blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/58e7ffdceb32cd7a8facd6b6cd3920a56c15e0e2ef1d3398158ef4ec0d6ec886/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f4534532d50726f6a6563742f653473\"\
    ><img src=\"https://camo.githubusercontent.com/58e7ffdceb32cd7a8facd6b6cd3920a56c15e0e2ef1d3398158ef4ec0d6ec886/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f4534532d50726f6a6563742f653473\"\
    \ alt=\"License\" data-canonical-src=\"https://img.shields.io/github/license/E4S-Project/e4s\"\
    \ style=\"max-width: 100%;\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\"\
    \ href=\"https://camo.githubusercontent.com/94cdab1cd9efc5521be1590b3d0b5dc5f707838e0d20015c14f23921ef2b7326/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6534732f62616467652f3f76657273696f6e3d6c6174657374\"\
    ><img src=\"https://camo.githubusercontent.com/94cdab1cd9efc5521be1590b3d0b5dc5f707838e0d20015c14f23921ef2b7326/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6534732f62616467652f3f76657273696f6e3d6c6174657374\"\
    \ alt=\"Documentation\" data-canonical-src=\"https://readthedocs.org/projects/e4s/badge/?version=latest\"\
    \ style=\"max-width: 100%;\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\"\
    \ href=\"https://camo.githubusercontent.com/c2e45205070ba0928aece78cf95f8658ef1cf69f7c113dc56f7d05e29e68755e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f4534532d50726f6a6563742f6534732e737667\"\
    ><img src=\"https://camo.githubusercontent.com/c2e45205070ba0928aece78cf95f8658ef1cf69f7c113dc56f7d05e29e68755e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f4534532d50726f6a6563742f6534732e737667\"\
    \ alt=\"GitHub Issues\" data-canonical-src=\"https://img.shields.io/github/issues/E4S-Project/e4s.svg\"\
    \ style=\"max-width: 100%;\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\"\
    \ href=\"https://camo.githubusercontent.com/011fb27187d5b878949948752f73e86dea6828febca879ee69a5a5d52ce651ca/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722f4534532d50726f6a6563742f653473\"\
    ><img src=\"https://camo.githubusercontent.com/011fb27187d5b878949948752f73e86dea6828febca879ee69a5a5d52ce651ca/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722f4534532d50726f6a6563742f653473\"\
    \ alt=\"GitHub pull requests\" data-canonical-src=\"https://img.shields.io/github/issues-pr/E4S-Project/e4s\"\
    \ style=\"max-width: 100%;\"></a></p>\n<h1><a id=\"user-content-e4s\" class=\"\
    anchor\" aria-hidden=\"true\" href=\"#e4s\"><span aria-hidden=\"true\" class=\"\
    octicon octicon-link\"></span></a>E4S</h1>\n<p>The <a href=\"https://e4s-project.github.io/\"\
    \ rel=\"nofollow\">Extreme-scale Scientific Software Stack (E4S)</a> is a community\
    \ effort to provide open source\nsoftware packages for developing, deploying and\
    \ running scientific applications on high-performance\ncomputing (HPC) platforms.\
    \ E4S provides from-source builds and containers of a\n<a href=\"https://e4s-project.github.io/Resources/ProductInfo.html\"\
    \ rel=\"nofollow\">broad collection of HPC software packages</a>.</p>\n<p>E4S\
    \ is available to download in the following formats:</p>\n<ul>\n<li>\n<p>Containers:\
    \ Docker, Singularity, CharlieCloud, OVA</p>\n</li>\n<li>\n<p>Spack manifest (<code>spack.yaml</code>)\
    \ to install from source. These can be found in <a href=\"https://github.com/E4S-Project/e4s/tree/master/environments\"\
    >environments</a> directory.</p>\n</li>\n<li>\n<p><a href=\"http://aws.amazon.com/\"\
    \ rel=\"nofollow\">AWS EC2 image</a> with image name <code>ami-0db9d49091db1c25f</code>\
    \ in <strong>US-West-2 (Oregon)</strong></p>\n</li>\n<li>\n<p><a href=\"https://oaciss.uoregon.edu/e4s/inventory.html\"\
    \ rel=\"nofollow\">E4S Build Cache</a></p>\n</li>\n</ul>\n<p>Please see <a href=\"\
    https://github.com/E4S-Project/e4s/blob/master/E4S_Products.md\">E4S Product Dictionary</a>\
    \ for complete list of E4S products.</p>\n<h2><a id=\"user-content-useful-links\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#useful-links\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>Useful Links</h2>\n<ul>\n<li>User\
    \ Documentation: <a href=\"https://e4s.readthedocs.io\" rel=\"nofollow\">https://e4s.readthedocs.io</a>\n\
    </li>\n<li>Main Page: <a href=\"https://e4s-project.github.io/\" rel=\"nofollow\"\
    >https://e4s-project.github.io/</a>\n</li>\n<li>E4S GitHub: <a href=\"https://github.com/E4S-Project/\"\
    >https://github.com/E4S-Project/</a>\n</li>\n<li>Slack Channel: <a href=\"https://e4s-project.slack.com\"\
    \ rel=\"nofollow\">https://e4s-project.slack.com</a>\n</li>\n<li>E4S Dashboard:\
    \ <a href=\"https://dashboard.e4s.io/\" rel=\"nofollow\">https://dashboard.e4s.io/</a>\n\
    </li>\n</ul>\n<h2><a id=\"user-content-related-projects\" class=\"anchor\" aria-hidden=\"\
    true\" href=\"#related-projects\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"\
    ></span></a>Related Projects</h2>\n<ul>\n<li>\n<p><a href=\"https://github.com/E4S-Project/E4S-Project.github.io\"\
    >E4S-Project/E4S-Project.github.io</a> - E4S Documentation repo that is hosted\
    \ on <a href=\"https://e4s-project.github.io/\" rel=\"nofollow\">https://e4s-project.github.io/</a></p>\n\
    </li>\n<li>\n<p><a href=\"https://github.com/E4S-Project/testsuite\">E4S-Project/testsuite</a>\
    \ - E4S Testsuite with collection of validation tests that can be run post-install.</p>\n\
    </li>\n<li>\n<p><a href=\"https://github.com/E4S-Project/e4s-cl\">E4S-Project/e4s-cl</a>\
    \ - E4S Container Launcher is a tool to easily run MPI applications in E4S containers.</p>\n\
    </li>\n<li>\n<p><a href=\"https://github.com/E4S-Project/e4s-ci-badges\">E4S-Project/e4s-ci-badges</a>\
    \ - Display CI badges for E4S products that are available from <a href=\"https://shields.io/\"\
    \ rel=\"nofollow\">shields.io</a></p>\n</li>\n</ul>\n<h2><a id=\"user-content-license\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#license\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>License</h2>\n<p>E4S is released\
    \ as MIT license for more details see <a href=\"https://github.com/E4S-Project/e4s/blob/master/LICENSE\"\
    >LICENSE</a> file</p>\n<h2><a id=\"user-content-contact\" class=\"anchor\" aria-hidden=\"\
    true\" href=\"#contact\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"\
    ></span></a>Contact</h2>\n<ul>\n<li>Mike Heroux (<a href=\"mailto:maherou@sandia.gov\"\
    >maherou@sandia.gov</a>)</li>\n<li>Sameer Shende (<a href=\"mailto:sameer@cs.uoregon.edu\"\
    >sameer@cs.uoregon.edu</a>)</li>\n</ul>\n"
  stargazers_count: 14
  subscribers_count: 9
  topics: []
  updated_at: 1659453321.0
FTHPC/Correlation_Compressibility:
  data_format: 2
  description: null
  filenames:
  - spack.yaml
  full_name: FTHPC/Correlation_Compressibility
  latest_release: v0.1
  readme: "<h1><a id=\"user-content-compressibility-analysis-correlation_compressibility\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#compressibility-analysis-correlation_compressibility\"\
    ><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Compressibility\
    \ Analysis (Correlation_Compressibility)</h1>\n<h2><a id=\"user-content-statement-of-purpose\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#statement-of-purpose\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>Statement of Purpose</h2>\n<p>This\
    \ repo contains scripts to perform compressibility analysis on several leading\
    \ lossy compressors.\nThe compressibility analysis relies on deriving statistics\
    \ on scientific data and explore their relationships to their compression ratios\
    \ from various lossy compressors (based on various compression scheme).\nThe extracted\
    \ relationships between compression ratios and statistical predictors are modeled\
    \ via regression models, which provide a statistical framework to predict compression\
    \ ratios for the different studied lossy compressors.</p>\n<p>This repo contains\
    \ an automatic framework of scripts that perform the compression of scientific\
    \ datasets from 8 compressors (SZ2, ZFP, MGARD, FPZIP, Digit Rounding and Bit\
    \ Grooming), the derivation of the statistical predictors of compression ratios\
    \ (SVD, standard deviation, quantized entropy), and scripts to perform the training\
    \ of the regression models (linear and spline regressions) as well as the validation\
    \ of the regression predictions.\nA runtime analysis is also performed and associated\
    \ codes are provided.</p>\n<h3><a id=\"user-content-main-code-structures\" class=\"\
    anchor\" aria-hidden=\"true\" href=\"#main-code-structures\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>Main code structures</h3>\n<p>Compression\
    \ metrics, including compression ratios, and derivation of statistical predictors\
    \ (SVD, standard deviation, quantized entropy) codes are found in <code>compress_package</code>\
    \ and are run via <code>scripts/run.sh</code> as described in the section \"How\
    \ to compute statistical predictors and compression analysis on datasets\".\n\
    Linear and spline regressions training and validation (functions <code>cr_regression_linreg</code>\
    \ and <code>cr_regression_gam</code> from the script <code>replicate_figures/functions_paper.R</code>).\n\
    Codes for the different runtime analysis are found in the folder <code>runtime_analysis</code>\
    \ and are automated with the script <code>runtime.sh</code>, the study includes\
    \ compression time for SZ2, ZFP, MAGRD, FPZIP, data quantization, SVD, local (tiled)\
    \ variogram and local (tiled) variogram, and runtime for training and prediction\
    \ of the regressions.<br>\nFinally, the script <code>replicate_figures/graphs_paper_container.R</code>\
    \ replicates and saves all the figures from the paper ad as well as numbers from\
    \ the tables.</p>\n<p>For each dataset in the <code>dataset</code> folder, slicing\
    \ is performed for each variable field (e.g. density in Miranda), each slice is\
    \ stored in a class. The class is updated as compressions with the 8 compressors\
    \ is performed and updated as the statistical predictors are derived. Results\
    \ of each class are stored in a .csv file (example of csv files can be found at\
    \ <code>replicate_figures/generated_data/</code>).\nAll the datasets stored in\
    \ the <code>dataset</code> folder can be analyzed with the given set of codes,\
    \ one needs to source <code>scripts/config.json</code> with the appropriate dataset\
    \ name as described in the below section \"How to compute statistical predictors\
    \ and compression analysis on datasets\".\nThe regression analysis and its prediction\
    \ is then performed on R dataframes based on the aforementioned .csv files.</p>\n\
    <h2><a id=\"user-content-system-information\" class=\"anchor\" aria-hidden=\"\
    true\" href=\"#system-information\"><span aria-hidden=\"true\" class=\"octicon\
    \ octicon-link\"></span></a>System Information</h2>\n<p>The hardware and software\
    \ versions used for the performance evaluations can be found in the table below.\
    \ These nodes come from Clemson University's Palmetto Cluster.</p>\n<p>These nodes\
    \ have:</p>\n<table>\n<thead>\n<tr>\n<th>component</th>\n<th>version</th>\n<th>component</th>\n\
    <th>version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CPU</td>\n<td>Intel Xeon\
    \ 6148G (40 cores)</td>\n<td>sz2</td>\n<td>2.1.12.2</td>\n</tr>\n<tr>\n<td>GPU</td>\n\
    <td>2 Nvidia v100</td>\n<td>sz3</td>\n<td>3.1.3.1</td>\n</tr>\n<tr>\n<td>Memory</td>\n\
    <td>372GB</td>\n<td>zfp</td>\n<td>0.5.5</td>\n</tr>\n<tr>\n<td>Network</td>\n\
    <td>2 Mellanox MT27710 (HDR)</td>\n<td>mgard</td>\n<td>1.0.0</td>\n</tr>\n<tr>\n\
    <td>FileSystem</td>\n<td>BeeGFS 7.2.3 (24 targets)</td>\n<td>bit grooming</td>\n\
    <td>2.1.9</td>\n</tr>\n<tr>\n<td>Compiler</td>\n<td>GCC 8.4.1</td>\n<td>digit\
    \ rounding</td>\n<td>2.1.9</td>\n</tr>\n<tr>\n<td>OS</td>\n<td>CentOS 8.2.2004</td>\n\
    <td>R</td>\n<td>4.1.3</td>\n</tr>\n<tr>\n<td>MPI</td>\n<td>OpenMPI 4.0.5</td>\n\
    <td>Python</td>\n<td>3.9.12</td>\n</tr>\n<tr>\n<td>LibPressio</td>\n<td>0.83.4</td>\n\
    <td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2><a id=\"user-content-first-time-setup\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#first-time-setup\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>First time setup</h2>\n<h3><a\
    \ id=\"user-content-container-installation-for-ease-of-setup\" class=\"anchor\"\
    \ aria-hidden=\"true\" href=\"#container-installation-for-ease-of-setup\"><span\
    \ aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Container Installation\
    \ (for ease of setup)</h3>\n<p>We provide a container for <code>x86_64</code>\
    \ image for ease of installation.</p>\n<p>This container differs from our experimental\
    \ setup slightly. The production build used <code>-march=native -mtune=native</code>\
    \ for architecture optimized builds where as the container does not use these\
    \ flags to maximize compatibility across <code>x86_64</code> hardware.</p>\n<p>NOTE\
    \ this file is &gt;= 11 GB , download with caution.</p>\n<h4><a id=\"user-content-docker\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#docker\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>Docker</h4>\n<p>Many other systems\
    \ can use podman or docker.</p>\n<div class=\"highlight highlight-source-shell\"\
    ><pre>docker pull ghcr.io/fthpc/correlation_compressibility:latest\n\n<span class=\"\
    pl-c\"><span class=\"pl-c\">#</span>most systems</span>\ndocker run -it --rm ghcr.io/fthpc/correlation_compressibility:latest\n\
    \n<span class=\"pl-c\"><span class=\"pl-c\">#</span> if running on a SeLinux enforcing\
    \ system</span>\ndocker run -it --rm --security-opt label=disable ghcr.io/fthpc/correlation_compressibility:latest</pre></div>\n\
    <h3><a id=\"user-content-building-the-container\" class=\"anchor\" aria-hidden=\"\
    true\" href=\"#building-the-container\"><span aria-hidden=\"true\" class=\"octicon\
    \ octicon-link\"></span></a>Building the Container</h3>\n<p>You can build the\
    \ container yourself as follows:\nNOTE this process takes 3+ hours on a modern\
    \ laptop, and most clusters do not\nprovide sufficient permissions to run container\
    \ builds on the cluster.</p>\n<p>Additionally compiling MGRAD -- one of the compressors\
    \ we use takes &gt;= 4GB RAM per core, be cautious\nwith systems with low RAM.\
    \  You may be able compensate by using fewer cores by changing the spack install\n\
    instruction in the Dockerfile to have a <code>-j N</code> where <code>N</code>\
    \ is the number of cores you wish to use</p>\n<div class=\"highlight highlight-source-shell\"\
    ><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> install/module load git-lfs,\
    \ needed to download example_data for building the container</span>\nsudo dnf\
    \ install git-lfs <span class=\"pl-c\"><span class=\"pl-c\">#</span>Fedora/CentOS\
    \ Stream 8</span>\nsudo apt-get install git-lfs <span class=\"pl-c\"><span class=\"\
    pl-c\">#</span> Ubuntu</span>\nspack install git-lfs<span class=\"pl-k\">;</span>\
    \ spack load git-lfs <span class=\"pl-c\"><span class=\"pl-c\">#</span> using\
    \ spack</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> clone this\
    \ repository</span>\ngit clone --recursive https://github.com/FTHPC/Correlation_Compressibility\n\
    <span class=\"pl-c1\">cd</span> Correlation_Compressibility\ndocker build <span\
    \ class=\"pl-c1\">.</span> -t correlation_compressibility</pre></div>\n<h3><a\
    \ id=\"user-content-manual-installation\" class=\"anchor\" aria-hidden=\"true\"\
    \ href=\"#manual-installation\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"\
    ></span></a>Manual Installation</h3>\n<p>By default, it is recommended to follow\
    \ the install locations that are indicated on the top of <code>scripts/run.sh</code>\n\
    and the top of <code>config.json</code>. These two files provide the configuration\
    \ options to get the program running.</p>\n<p>Spack should be installed in the\
    \ following location: <code>$HOME/spack/</code></p>\n<p>This Github repo should\
    \ be cloned in the following location: <code>$HOME/Correlation_Compressibility/</code>\n\
    This location is also referenced as the <code>COMPRESS_HOME</code> environment\
    \ variable.</p>\n<p>A dataset folder called 'datasets' should be in the following\
    \ location: <code>$HOME/Correlation_Compressibility/datasets/</code>.</p>\n<p>Clone\
    \ the repo but make sure to install or load <code>git-lfs</code> first.</p>\n\
    <div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"><span\
    \ class=\"pl-c\">#</span> install/module load git-lfs, needed to download example_data\
    \ for building the container</span>\nsudo dnf install git-lfs <span class=\"pl-c\"\
    ><span class=\"pl-c\">#</span>Fedora/CentOS Stream 8</span>\nsudo apt-get install\
    \ git-lfs <span class=\"pl-c\"><span class=\"pl-c\">#</span> Ubuntu</span>\nspack\
    \ install git-lfs<span class=\"pl-k\">;</span> spack load git-lfs <span class=\"\
    pl-c\"><span class=\"pl-c\">#</span> using spack</span>\n\n<span class=\"pl-c\"\
    ><span class=\"pl-c\">#</span> clone this repository</span>\ngit clone https://github.com/FTHPC/Correlation_Compressibility\
    \ <span class=\"pl-smi\">$HOME</span>/Correlation_Compressibility\n<span class=\"\
    pl-c1\">cd</span> <span class=\"pl-smi\">$HOME</span>/Correlation_Compressibility</pre></div>\n\
    <p>If you forgot to install <code>git-lfs</code> before and have an empty file\
    \ in the  <code>datasets</code> folder, you should install <code>git-lfs</code>\n\
    and then run the following:</p>\n<pre><code>git lfs fetch\ngit lfs checkout\n\
    </code></pre>\n<p>Once Spack is installed, there is a <code>spack.yaml</code>\
    \ configuration file containing the Spack environment necessary to run the program.</p>\n\
    <div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c1\">cd</span>\
    \ <span class=\"pl-smi\">$HOME</span>\ngit clone --depth=1 https://github.com/spack/spack\n\
    git clone --depth=1 https://github.com/robertu94/spack_packages \n<span class=\"\
    pl-c1\">source</span> ./spack/share/spack/setup-env.sh \nspack compiler find\n\
    spack external find \nspack repo add --scope=site ./spack_packages \n<span class=\"\
    pl-c1\">cd</span> <span class=\"pl-smi\">$HOME</span>/Correlation_Compressibility\
    \ \nspack env activate <span class=\"pl-c1\">.</span>\nspack install\n<span class=\"\
    pl-k\">export</span> COMPRESS_HOME=<span class=\"pl-smi\">$HOME</span>/Correlation_Compressibility\
    \ </pre></div>\n<p>These commands will install the environment. The environment\
    \ only needs to be installed once.\nIf you are using an older &lt; gcc11, then\
    \ you will need to add the following to the <code>spack.yaml</code> file:</p>\n\
    <pre><code>^libstdcompat+boost\n</code></pre>\n<p>after <code>^mgard@robertu94+cuda</code>\
    \ but before the <code>,</code>.</p>\n<h2><a id=\"user-content-replication-of-results\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#replication-of-results\"><span\
    \ aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Replication of\
    \ Results</h2>\n<h3><a id=\"user-content-how-to-compute-statistical-predictors-and-compression-metrics-on-datasets\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#how-to-compute-statistical-predictors-and-compression-metrics-on-datasets\"\
    ><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>How to compute\
    \ statistical predictors and compression metrics on datasets</h3>\n<p>In order\
    \ to run the statistical analysis that computes the statistical predictors (SVD,\
    \ standard deviation, quantized entropy) of compression ratios, a dataset and\
    \ a configuration file must be specified.\nTEST is a dataset that is specified\
    \ within the <code>config.json</code> file.</p>\n<div class=\"highlight highlight-source-shell\"\
    ><pre>sh scripts/run.sh -c config.json -d TEST -n 2</pre></div>\n<p>The command\
    \ above performs the computation of statistical predictors and writes output to\
    \ the output file specified in the configuration file.\nThis will use local hardware\
    \ without a scheduler. Use <code>-n</code> to specify the MPI processes on your\
    \ local system. Default value is 32.\nIt is recommended that this value matches\
    \ your CPU core count.</p>\n<p>If one has the PBS scheduler and runs outside of\
    \ the container, feel free to use flags <code>-p</code> or <code>-s</code> for\
    \ job execution.\n<code>-p</code> will schedule multiple jobs based on the quantized\
    \ error bounds and error bound types for a specified dataset.\n<code>-s</code>\
    \ will schedule a single job grouping all the analysis for a specified dataset.</p>\n\
    <p>See <code>-h</code> for more options or help with syntax.</p>\n<p>If a dataset\
    \ is wanted to run, the <code>config.json</code> file provides options to add\
    \ datasets.\nThe following options must be added when adding another dataset in\
    \ the configuration file:</p>\n<div class=\"highlight highlight-source-json\"\
    ><pre><span class=\"pl-ent\">\"_comment\"</span> : \n{\n    <span class=\"pl-ent\"\
    >\"folder\"</span>            : <span class=\"pl-s\"><span class=\"pl-pds\">\"\
    </span>folder containing h5 or binary files<span class=\"pl-pds\">\"</span></span>,\n\
    \    <span class=\"pl-ent\">\"data_dimensions\"</span>   : <span class=\"pl-s\"\
    ><span class=\"pl-pds\">\"</span>dimensions of the datasets within dataset_folder.\
    \ Either 1x2 or 1x3. EX: '1028, 1028'<span class=\"pl-pds\">\"</span></span>,\n\
    \    <span class=\"pl-ent\">\"slice_dimensions\"</span>  : <span class=\"pl-s\"\
    ><span class=\"pl-pds\">\"</span>list of the dimensions wanted: EX: 'None' or\
    \ 'X, Y, Z'<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\"\
    >\"output\"</span>            : <span class=\"pl-s\"><span class=\"pl-pds\">\"\
    </span>name of the output csv file: EX: 'test.csv'<span class=\"pl-pds\">\"</span></span>,\n\
    \    <span class=\"pl-ent\">\"dtype\"</span>             : <span class=\"pl-s\"\
    ><span class=\"pl-pds\">\"</span>data type. can be 'float32' or 'float64'<span\
    \ class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"parse_info\"\
    </span>        : <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>type of\
    \ parsing needed: 'None', 'slice', 'gaussian', 'gaussian_multi', 'spatialweight',\
    \ or 'scalarweight'<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"\
    pl-ent\">\"dataset_name\"</span>      : <span class=\"pl-s\"><span class=\"pl-pds\"\
    >\"</span>necessary accessing 2D HDF5 files: 'standard' if not custom. custom\
    \ EX: 'Z'<span class=\"pl-pds\">\"</span></span>\n} </pre></div>\n<p>From this\
    \ section, .csv files are generated for each dataset and contain all the statistical\
    \ predictors described in the paper as well as compression metrcis including compresison\
    \ ratios for the 8 lossy compressors and 4 error bounds.</p>\n<h3><a id=\"user-content-to-run-the-training-and-prediction-timing-analysis-demonstration\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#to-run-the-training-and-prediction-timing-analysis-demonstration\"\
    ><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>To run the\
    \ training and prediction timing analysis demonstration</h3>\n<p>In order to run\
    \ the timing analysis, a dataset must be specified.\nThere are two datasets setup\
    \ within this demonstration.</p>\n<div class=\"highlight highlight-source-shell\"\
    ><pre>sh runtime_analysis/runtime.sh -d [DATASET]</pre></div>\n<p>[DATASET] can\
    \ be either [NYX] or [SCALE]</p>\n<p>After running the above script, an *.RData\
    \ file(s) will be produced giving the approprirate timing information of\nthe\
    \ training and prediction for the regression models.</p>\n<p>Note: A quicker and\
    \ more efficient quantized entropy method is demonstrated in <code>qentropy.cc</code></p>\n\
    <h4><a id=\"user-content-the-following-below-runs-qentropycc\" class=\"anchor\"\
    \ aria-hidden=\"true\" href=\"#the-following-below-runs-qentropycc\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>The following below runs <code>qentropy.cc</code>\n\
    </h4>\n<div class=\"highlight highlight-source-shell\"><pre>g++ -std=c++2a -O3\
    \ qentropy.cc -o qentropy -march=native -mtune=native\n./qentropy</pre></div>\n\
    <p>Note: Please run the runtime analysis for both datasets before running the\
    \ following section.</p>\n<h3><a id=\"user-content-replication-of-figures-how-to-run-statistical-prediction-of-compression-ratios-and-the-prediction-validation\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#replication-of-figures-how-to-run-statistical-prediction-of-compression-ratios-and-the-prediction-validation\"\
    ><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Replication\
    \ of figures: how to run statistical prediction of compression ratios and the\
    \ prediction validation</h3>\n<p>The script <code>graphs_paper_container.R</code>\
    \  saves the graphs presented in the paper and provides associated validation\
    \ metrics (correlation and median absolute error percentage).</p>\n<p>The script\
    \ <code>graphs_paper_container.R</code> will source the scripts  <code>load_dataset_paper.R</code>\
    \ and <code>functions_paper.R</code> that respectively load the dataset of interest\
    \ and perform the regression analysis (training and prediction in cross-validation).\n\
    As a consequence the scripts  <code>load_dataset_paper.R</code> and <code>functions_paper.R</code>\
    \ do not need to be run by the user.</p>\n<p>The script <code>graphs_paper_container.R</code>\
    \  is run via the command:\n<code>bash sh replicate.sh</code></p>\n<p>From running\
    \ the script once, it will save all Figures 1, 3, 4 and 5 into .png files from\
    \ the paper as well as corresponding validation metrics.\nFigure 2 is not saved\
    \ as it provides a simple vizualization of slices of the datasets.\nSlices of\
    \ the datasets are generated in the Section \"How to compute statistical predictors\
    \ and compression metrics\" and can be stored, however we do not save them here\
    \ to save space in the container.\nNumbers for Tables 2, 3 and 5 are printed in\
    \ the R console.\nAll printed validation metrics are save into a file named <code>figure_replication.log</code>.\n\
    Figures and the log-file are saved in the same folder as the one where R script\
    \ is run and the filename structure is <code>figY_*.png</code> with Y is the figure\
    \ number reference in the paper and <code>*</code> provides additional informnation\
    \ about the data and the compressor.<br>\nNumbers for Table 4 are saved in the\
    \ last section in .txt files <code>statistic_benchmark_runtime_X.txt</code> with\
    \ X the studied dataset (NYX or SCALE).</p>\n<p>In order to limit the container\
    \ size to aid reproducibility, we only added a restricted number of scientific\
    \ datasets in the container and we rely on csv files from our production runs\
    \ (saved as described above in the Section \"How to compute statistical predictors\
    \ on datasets\").\nMore datasets are available on <a href=\"https://sdrbench.github.io\"\
    \ rel=\"nofollow\">SDRBench</a>.</p>\n"
  stargazers_count: 0
  subscribers_count: 3
  topics: []
  updated_at: 1648227729.0
HEPonHPC/hepnos_eventselection:
  data_format: 2
  description: null
  filenames:
  - docker/hepnos/spack.yaml
  full_name: HEPonHPC/hepnos_eventselection
  latest_release: null
  stargazers_count: 0
  subscribers_count: 5
  topics: []
  updated_at: 1658856345.0
LLNL/hiop:
  data_format: 2
  description: HPC solver for nonlinear optimization problems
  filenames:
  - scripts/platforms/marianas/spack.yaml
  - scripts/platforms/newell/spack.yaml
  full_name: LLNL/hiop
  latest_release: v0.6.2
  readme: "<h1><a id=\"user-content-hiop---hpc-solver-for-optimization\" class=\"\
    anchor\" aria-hidden=\"true\" href=\"#hiop---hpc-solver-for-optimization\"><span\
    \ aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>HiOp - HPC solver\
    \ for optimization</h1>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"\
    https://github.com/LLNL/hiop/workflows/tests/badge.svg\"><img src=\"https://github.com/LLNL/hiop/workflows/tests/badge.svg\"\
    \ alt=\"tests\" style=\"max-width: 100%;\"></a></p>\n<p>HiOp is an optimization\
    \ solver for solving certain mathematical optimization problems expressed as nonlinear\
    \ programming problems. HiOp is a lightweight HPC solver that leverages application's\
    \ existing data parallelism to parallelize the optimization iterations by using\
    \ specialized parallel linear algebra kernels.</p>\n<p>Please cite the user manual\
    \ whenever HiOp is used:</p>\n<pre><code>@TECHREPORT{hiop_techrep,\n  title={{HiOp}\
    \ -- {U}ser {G}uide},\n  author={Petra, Cosmin G. and Chiang, NaiYuan and Jingyi\
    \ Wang},\n  year={2018},\n  institution = {Center for Applied Scientific Computing,\
    \ Lawrence Livermore National Laboratory},\n  number = {LLNL-SM-743591}\n}\n</code></pre>\n\
    <p>In addition, when using the quasi-Newton solver please cite:</p>\n<pre><code>@ARTICLE{Petra_18_hiopdecomp,\n\
    title = {A memory-distributed quasi-Newton solver for nonlinear programming problems\
    \ with a small number of general constraints},\njournal = {Journal of Parallel\
    \ and Distributed Computing},\nvolume = {133},\npages = {337-348},\nyear = {2019},\n\
    issn = {0743-7315},\ndoi = {https://doi.org/10.1016/j.jpdc.2018.10.009},\nurl\
    \ = {https://www.sciencedirect.com/science/article/pii/S0743731518307731},\nauthor\
    \ = {Cosmin G. Petra},\n}\n</code></pre>\n<p>and when using the the PriDec solver\
    \ please cite:</p>\n<pre><code>@article{wang2022,\n  archivePrefix = {arXiv},\n\
    \  eprint = {arXiv:2204.09631},\n  author = {J. Wang and C. G. Petra},\n  title\
    \ = {An optimization algorithm for nonsmooth nonconvex problems with upper-$C^2$\
    \ objective},\n  publisher = {arXiv},\n  year = {2022},\n  journal={ (submitted)\
    \ },\n}\n@INPROCEEDINGS{wang2021,\n  author={Wang, Jingyi and Chiang, Nai-Yuan\
    \ and Petra, Cosmin G.},\n  booktitle={2021 20th International Symposium on Parallel\
    \ and Distributed Computing (ISPDC)}, \n  title={An asynchronous distributed-memory\
    \ optimization solver for two-stage stochastic programming problems}, \n  year={2021},\n\
    \  volume={},\n  number={},\n  pages={33-40},\n  doi={10.1109/ISPDC52870.2021.9521613}\n\
    }\n</code></pre>\n<h2><a id=\"user-content-buildinstall-instructions\" class=\"\
    anchor\" aria-hidden=\"true\" href=\"#buildinstall-instructions\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>Build/install instructions</h2>\n\
    <p>HiOp uses a CMake-based build system. A standard build can be done by invoking\
    \ in the 'build' directory the following</p>\n<div class=\"highlight highlight-source-shell\"\
    ><pre>$<span class=\"pl-k\">&gt;</span> cmake ..\n$<span class=\"pl-k\">&gt;</span>\
    \ make \n$<span class=\"pl-k\">&gt;</span> make <span class=\"pl-c1\">test</span>\n\
    $<span class=\"pl-k\">&gt;</span> make install</pre></div>\n<p>This sequence will\
    \ build HiOp, run integrity and correctness tests, and install the headers and\
    \ the library in the directory '_dist-default-build' in HiOp's root directory.</p>\n\
    <p>Command <code>make test</code> runs extensive tests of the various modules\
    \ of HiOp to check integrity and correctness. The tests suite range from unit\
    \ testing to solving concrete optimization problems and checking the performance\
    \ of HiOp solvers on these problems against known solutions. By default <code>make\
    \ test</code> runs <code>mpirun</code> locally, which may not work on some HPC\
    \ machines. For these HiOp allows using <code>bsub</code> to schedule <code>make\
    \ test</code> on the compute nodes; to enable this, the use should use <em>-DHIOP_TEST_WITH_BSUB=ON</em>\
    \ with cmake when building and run <code>make test</code> in a bsub shell session,\
    \ for example,</p>\n<pre><code>bsub -P your_proj_name -nnodes 1 -W 30\nmake test\n\
    CTRL+D\n</code></pre>\n<p>The installation can be customized using the standard\
    \ CMake options. For example, one can provide an alternative installation directory\
    \ for HiOp by using</p>\n<div class=\"highlight highlight-source-shell\"><pre>$<span\
    \ class=\"pl-k\">&gt;</span> cmake -DCMAKE_INSTALL_PREFIX=/usr/lib/hiop ..<span\
    \ class=\"pl-s\"><span class=\"pl-pds\">'</span></span></pre></div>\n<h3><a id=\"\
    user-content-selected-hiop-specific-build-options\" class=\"anchor\" aria-hidden=\"\
    true\" href=\"#selected-hiop-specific-build-options\"><span aria-hidden=\"true\"\
    \ class=\"octicon octicon-link\"></span></a>Selected HiOp-specific build options</h3>\n\
    <ul>\n<li>Enable/disable MPI: <em>-DHIOP_USE_MPI=[ON/OFF]</em> (by default ON)</li>\n\
    <li>GPU support: <em>-DHIOP_USE_GPU=ON</em>. MPI can be either off or on. For\
    \ more build system options related to GPUs, see \"Dependencies\" section below.</li>\n\
    <li>Enable/disable \"developer mode\" build that enforces more restrictive compiler\
    \ rules and guidelines: <em>-DHIOP_DEVELOPER_MODE=ON</em>. This option is by default\
    \ off.</li>\n<li>Additional checks and self-diagnostics inside HiOp meant to detect\
    \ abnormalities and help to detect bugs and/or troubleshoot problematic instances:\
    \ <em>-DHIOP_DEEPCHECKS=[ON/OFF]</em> (by default ON). Disabling HIOP_DEEPCHECKS\
    \ usually provides 30-40% execution speedup in HiOp. For full strength, it is\
    \ recommended to use HIOP_DEEPCHECKS with debug builds. With non-debug builds,\
    \ in particular the ones that disable the assert macro, HIOP_DEEPCHECKS does not\
    \ perform all checks and, thus, may overlook potential issues.</li>\n</ul>\n<p>For\
    \ example:</p>\n<div class=\"highlight highlight-source-shell\"><pre>$<span class=\"\
    pl-k\">&gt;</span> cmake -DHIOP_USE_MPI=ON -DHIOP_DEEPCHECKS=ON ..\n$<span class=\"\
    pl-k\">&gt;</span> make \n$<span class=\"pl-k\">&gt;</span> make <span class=\"\
    pl-c1\">test</span>\n$<span class=\"pl-k\">&gt;</span> make install</pre></div>\n\
    <h3><a id=\"user-content-other-useful-options-to-use-with-cmake\" class=\"anchor\"\
    \ aria-hidden=\"true\" href=\"#other-useful-options-to-use-with-cmake\"><span\
    \ aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Other useful\
    \ options to use with CMake</h3>\n<ul>\n<li>\n<em>-DCMAKE_BUILD_TYPE=Release</em>\
    \ will build the code with the optimization flags on</li>\n<li>\n<em>-DCMAKE_CXX_FLAGS=\"\
    -O3\"</em> will enable a high level of compiler code optimization</li>\n</ul>\n\
    <h3><a id=\"user-content-dependencies\" class=\"anchor\" aria-hidden=\"true\"\
    \ href=\"#dependencies\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"\
    ></span></a>Dependencies</h3>\n<p>HiOp requires LAPACK and BLAS. These dependencies\
    \ are automatically detected by the build system. MPI is optional and by default\
    \ enabled. To disable use cmake option '-DHIOP_USE_MPI=OFF'.</p>\n<p>HiOp has\
    \ some support for NVIDIA <strong>GPU-based computations</strong> via CUDA and\
    \ Magma. To enable the use of GPUs, use cmake with '-DHIOP_USE_GPU=ON'. The build\
    \ system will automatically search for CUDA Toolkit. For non-standard CUDA Toolkit\
    \ installations, use '-DHIOP_CUDA_LIB_DIR=/path' and '-DHIOP_CUDA_INCLUDE_DIR=/path'.\
    \ For \"very\" non-standard CUDA Toolkit installations, one can specify the directory\
    \ of cuBlas libraries as well with '-DHIOP_CUBLAS_LIB_DIR=/path'.</p>\n<h3><a\
    \ id=\"user-content-using-raja-and-umpire-portability-libraries\" class=\"anchor\"\
    \ aria-hidden=\"true\" href=\"#using-raja-and-umpire-portability-libraries\"><span\
    \ aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Using RAJA and\
    \ Umpire portability libraries</h3>\n<p>Portability libraries allow running HiOp's\
    \ linear algebra either on host (CPU) or a device (GPU). RAJA and Umpire are disabled\
    \ by default. You can turn them on together by passing <code>-DHIOP_USE_RAJA=ON</code>\
    \ to CMake. If the two libraries are not automatically found, specify their installation\
    \ directories like this:</p>\n<div class=\"highlight highlight-source-shell\"\
    ><pre>$<span class=\"pl-k\">&gt;</span> cmake -DHIOP_USE_RAJA=ON -DRAJA_DIR=/path/to/raja/dir\
    \ -Dumpire_DIR=/path/to/umpire/dir</pre></div>\n<p>If the GPU support is enabled,\
    \ RAJA will run all HiOp linear algebra kernels on GPU, otherwise RAJA will run\
    \ the kernels on CPU using an OpenMP execution policy.</p>\n<h3><a id=\"user-content-support-for-gpu-computations\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#support-for-gpu-computations\"\
    ><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Support\
    \ for GPU computations</h3>\n<p>When GPU support is on, HiOp requires Magma linear\
    \ solver library and CUDA Toolkit. Both are detected automatically in most cases.\
    \ The typical cmake command to enable GPU support in HiOp is</p>\n<div class=\"\
    highlight highlight-source-shell\"><pre>$<span class=\"pl-k\">&gt;</span> cmake\
    \ -DHIOP_USE_GPU=ON ..</pre></div>\n<p>When Magma is not detected, one can specify\
    \ its location by passing <code>-DHIOP_MAGMA_DIR=/path/to/magma/dir</code> to\
    \ cmake.</p>\n<p>For custom CUDA Toolkit installations, the locations to the (missing/not\
    \ found) CUDA libraries can be specified to cmake via <code>-DNAME=/path/cuda/directory/lib</code>,\
    \ where <code>NAME</code> can be any of</p>\n<pre><code>CUDA_cublas_LIBRARY\n\
    CUDA_CUDART_LIBRARY\nCUDA_cudadevrt_LIBRARY\nCUDA_cusparse_LIBRARY\nCUDA_cublasLt_LIBRARY\n\
    CUDA_nvblas_LIBRARY\nCUDA_culibos_LIBRARY\n</code></pre>\n<p>Below is an example\
    \ for specifiying <code>cuBlas</code>, <code>cuBlasLt</code>, and <code>nvblas</code>\
    \ libraries, which were <code>NOT_FOUND</code> because of a non-standard CUDA\
    \ Toolkit instalation:</p>\n<div class=\"highlight highlight-source-shell\"><pre>$<span\
    \ class=\"pl-k\">&gt;</span> cmake -DHIOP_USE_GPU=ON -DCUDA_cublas_LIBRARY=/usr/local/cuda-10.2/targets/x86_64-linux/lib/lib64\
    \ -DCUDA_cublasLt_LIBRARY=/export/home/petra1/work/installs/cuda10.2.89/targets/x86_64-linux/lib/\
    \ -DCUDA_nvblas_LIBRARY=/export/home/petra1/work/installs/cuda10.2.89/targets/x86_64-linux/lib/\
    \ .. <span class=\"pl-k\">&amp;&amp;</span> make -j <span class=\"pl-k\">&amp;&amp;</span>\
    \ make install</pre></div>\n<p>A detailed example on how to compile HiOp straight\
    \ of the box on <code>summit.olcf.ornl.gov</code> is available <a href=\"README_summit.md\"\
    >here</a>.</p>\n<p>RAJA and UMPIRE dependencies are usually detected by HiOp's\
    \ cmake build system.</p>\n<h3><a id=\"user-content-kron-reduction\" class=\"\
    anchor\" aria-hidden=\"true\" href=\"#kron-reduction\"><span aria-hidden=\"true\"\
    \ class=\"octicon octicon-link\"></span></a>Kron reduction</h3>\n<p>Kron reduction\
    \ functionality of HiOp is disabled by default. One can enable it by using</p>\n\
    <div class=\"highlight highlight-source-shell\"><pre>$<span class=\"pl-k\">&gt;</span>\
    \ rm -rf <span class=\"pl-k\">*</span><span class=\"pl-k\">;</span> cmake -DHIOP_WITH_KRON_REDUCTION=ON\
    \ -DUMFPACK_DIR=/Users/petra1/work/installs/SuiteSparse-5.7.1 -DMETIS_DIR=/Users/petra1/work/installs/metis-4.0.3\
    \ .. <span class=\"pl-k\">&amp;&amp;</span> make -j <span class=\"pl-k\">&amp;&amp;</span>\
    \ make install</pre></div>\n<p>Metis is usually detected automatically and needs\
    \ not be specified under normal circumstances.</p>\n<p>UMFPACK (part of SuiteSparse)\
    \ and METIS need to be provided as shown above.</p>\n<h1><a id=\"user-content-interfacing-with-hiop\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#interfacing-with-hiop\"><span\
    \ aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Interfacing with\
    \ HiOp</h1>\n<p>HiOp supports three types of optimization problems, each with\
    \ a separate input formats in the form of the C++ interfaces <code>hiopInterfaceDenseConstraints</code>,<code>hiopInterfaceSparse</code>\
    \ and <code>hiopInterfaceMDS</code>. These interfaces are specified in <a href=\"\
    src/Interface/hiopInterface.hpp\">hiopInterface.hpp</a> and documented and discussed\
    \ as well in the <a href=\"doc/hiop_usermanual.pdf\">user manual</a>.</p>\n<p><em><code>hiopInterfaceDenseConstraints</code>\
    \ interface</em> supports NLPs with <strong>billions</strong> of variables with\
    \ and without bounds but only limited number (&lt;100) of general, equality and\
    \ inequality constraints. The underlying algorithm is a limited-memory quasi-Newton\
    \ interior-point method and generally scales well computationally (but it may\
    \ not algorithmically) on thousands of cores. This interface uses MPI for parallelization</p>\n\
    <p><em><code>hiopInterfaceSparse</code> interface</em> supports general sparse\
    \ and large-scale NLPs. This functionality is similar to that of the state-of-the-art\
    \ <a href=\"https://github.com/coin-or/Ipopt\">Ipopt</a> (without being as robust\
    \ and flexible as Ipopt is). Acceleration for this class of problems can be achieved\
    \ via OpenMP or CUDA, however, this is work in progress and you are encouraged\
    \ to contact HiOp's developers for up-to-date information.</p>\n<p><em><code>hiopInterfaceMDS</code>\
    \ interface</em> supports mixed dense-sparse NLPs and achives parallelization\
    \ using GPUs and RAJA portability abstraction layer.</p>\n<p>More information\
    \ on the HiOp interfaces are <a href=\"src/Interface/README.md\">here</a>.</p>\n\
    <h2><a id=\"user-content-running-hiop-tests-and-applications\" class=\"anchor\"\
    \ aria-hidden=\"true\" href=\"#running-hiop-tests-and-applications\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>Running HiOp tests and applications</h2>\n\
    <p>HiOp is using NVBlas library when built with CUDA support. If you don't specify\n\
    location of the <code>nvblas.conf</code> configuration file, you may get an annoying\n\
    warnings. HiOp provides default <code>nvblas.conf</code> file and installs it\
    \ at the same\nlocation as HiOp libraries. To use it, set environment variable\
    \ as</p>\n<div class=\"highlight highlight-source-shell\"><pre>$ <span class=\"\
    pl-k\">export</span> NVBLAS_CONFIG_FILE=<span class=\"pl-k\">&lt;</span>hiop install\
    \ dir<span class=\"pl-k\">&gt;</span>/lib/nvblas.conf</pre></div>\n<p>or, if you\
    \ are using C-shell, as</p>\n<div class=\"highlight highlight-source-shell\"><pre>$\
    \ setenv NVBLAS_CONFIG_FILE <span class=\"pl-k\">&lt;</span>hiop install dir<span\
    \ class=\"pl-k\">&gt;</span>/lib/nvblas.conf</pre></div>\n<h2><a id=\"user-content-existing-issues\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#existing-issues\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>Existing issues</h2>\n<p>Users\
    \ are highly encouraged to report any issues they found from using HiOp.\nOne\
    \ known issue is that there is some minor inconsistence between HiOp and linear\
    \ package STRUMPACK.\nWhen STRUMPACK is compiled with MPI (and Scalapack), user\
    \ must set flag <code>HIOP_USE_MPI</code> to <code>ON</code> when compiling HiOp.\n\
    Otherwise HiOp won't load MPI module and will return an error when links to STRUMPACK,\
    \ since the later one requires a valid MPI module.\nSimilarly, if both Magma and\
    \ STRUMPACK are linked to HiOp, user must guarantee the all the packages are compiled\
    \ by the same CUDA compiler.\nUser can check other issues and their existing status\
    \ from <a href=\"https://github.com/LLNL/hiop\">https://github.com/LLNL/hiop</a></p>\n\
    <h2><a id=\"user-content-acknowledgments\" class=\"anchor\" aria-hidden=\"true\"\
    \ href=\"#acknowledgments\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"\
    ></span></a>Acknowledgments</h2>\n<p>HiOp has been developed under the financial\
    \ support of:</p>\n<ul>\n<li>Department of Energy, Office of Advanced Scientific\
    \ Computing Research (ASCR): Exascale Computing Program (ECP) and Applied Math\
    \ Program.</li>\n<li>Department of Energy, Advanced Research Projects Agency-Energy\
    \ (ARPA\u2011E)</li>\n<li>Lawrence Livermore National Laboratory Institutional\
    \ Scientific Capability Portfolio (ISCP)</li>\n<li>Lawrence Livermore National\
    \ Laboratory, through the LDRD program</li>\n</ul>\n<h1><a id=\"user-content-contributors\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#contributors\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>Contributors</h1>\n<p>HiOp is\
    \ written by Cosmin G. Petra (<a href=\"mailto:petra1@llnl.gov\">petra1@llnl.gov</a>),\
    \ Nai-Yuan Chiang (<a href=\"mailto:chiang7@llnl.gov\">chiang7@llnl.gov</a>),\
    \ and Jingyi \"Frank\" Wang (<a href=\"mailto:wang125@llnl.gov\">wang125@llnl.gov</a>)\
    \ from LLNL and has received important contributions from Asher Mancinelli (PNNL),\
    \ Slaven Peles (ORNL), Cameron Rutherford (PNNL), Jake K. Ryan (PNNL), and Michel\
    \ Schanen (ANL).</p>\n<h1><a id=\"user-content-copyright\" class=\"anchor\" aria-hidden=\"\
    true\" href=\"#copyright\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"\
    ></span></a>Copyright</h1>\n<p>Copyright (c) 2017-2021, Lawrence Livermore National\
    \ Security, LLC. All rights reserved. Produced at the Lawrence Livermore National\
    \ Laboratory. LLNL-CODE-742473. HiOp is free software; you can modify it and/or\
    \ redistribute it under the terms of the BSD 3-clause license. See <a href=\"\
    /COPYRIGHT\">COPYRIGHT</a> and <a href=\"/LICENSE\">LICENSE</a> for complete copyright\
    \ and license information.</p>\n"
  stargazers_count: 156
  subscribers_count: 14
  topics:
  - hpc
  - nonlinear-optimization
  - nonlinear-programming
  - nonlinear-optimization-algorithms
  - nonlinear-programming-algorithms
  - interior-point-method
  - parallel-programming
  - mpi
  - bfgs
  - quasi-newton
  - constrained-optimization
  - solver
  - optimization
  - acopf
  - gpu-support
  - cuda
  - math-physics
  - radiuss
  updated_at: 1661298953.0
LLNL/sundials:
  data_format: 2
  description: Official development repository for SUNDIALS - a SUite of Nonlinear
    and DIfferential/ALgebraic equation Solvers. Pull requests are welcome for bug
    fixes and minor changes.
  filenames:
  - docker/sundials-ci/e4s-quarterly/int32-double/spack.yaml
  - docker/sundials-ci/spack-nightly/int64-double/spack.yaml
  - docker/sundials-ci/e4s-quarterly/int64-double/spack.yaml
  - docker/sundials-ci/spack-nightly/int32-double/spack.yaml
  - docker/sundials-ci/e4s-quarterly/int32-extended/spack.yaml
  - docker/sundials-ci/e4s-quarterly/int64-single/spack.yaml
  - docker/sundials-ci/e4s-quarterly/int32-single/spack.yaml
  - docker/sundials-ci/e4s-quarterly/int64-extended/spack.yaml
  full_name: LLNL/sundials
  latest_release: v6.3.0
  readme: '<h1><a id="user-content-sundials-suite-of-nonlinear-and-differentialalgebraic-equation-solvers"
    class="anchor" aria-hidden="true" href="#sundials-suite-of-nonlinear-and-differentialalgebraic-equation-solvers"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>SUNDIALS: SUite of
    Nonlinear and DIfferential/ALgebraic equation Solvers</h1>

    <h3><a id="user-content-version-630-aug-2022" class="anchor" aria-hidden="true"
    href="#version-630-aug-2022"><span aria-hidden="true" class="octicon octicon-link"></span></a>Version
    6.3.0 (Aug 2022)</h3>

    <p><strong>Center for Applied Scientific Computing, Lawrence Livermore National
    Laboratory</strong></p>

    <p>SUNDIALS is a family of software packages providing robust and efficient time

    integrators and nonlinear solvers that can easily be incorporated into existing

    simulation codes. The packages are designed to require minimal information from

    the user, allow users to supply their own data structures underneath the

    packages, and enable interfacing with user-supplied or third-party algebraic

    solvers and preconditioners.</p>

    <p>The SUNDIALS suite consists of the following packages for ordinary differential

    equation (ODE) systems, differential-algebraic equation (DAE) systems, and

    nonlinear algebraic systems:</p>

    <ul>

    <li>

    <p>ARKODE - for integrating stiff, nonstiff, and multirate ODEs of the form</p>

    <p>$$ M(t) \, y'' = f_1(t,y) + f_2(t,y), \quad y(t_0) = y_0 $$</p>

    </li>

    <li>

    <p>CVODE - for integrating stiff and nonstiff ODEs of the form</p>

    <p>$$ y'' = f(t,y), \quad y(t_0) = y_0 $$</p>

    </li>

    <li>

    <p>CVODES - for integrating and sensitivity analysis (forward and adjoint) of

    ODEs of the form</p>

    <p>$$ y'' = f(t,y,p), \quad y(t_0) = y_0(p) $$</p>

    </li>

    <li>

    <p>IDA - for integrating DAEs of the form</p>

    <p>$$ F(t,y,y'') = 0, \quad y(t_0) = y_0, \quad y''(t_0) = y_0'' $$</p>

    </li>

    <li>

    <p>IDAS - for integrating and sensitivity analysis (forward and adjoint) of DAEs

    of the form</p>

    <p>$$ F(t,y,y'',p) = 0, \quad y(t_0) = y_0(p), \quad y''(t_0) = y_0''(p) $$</p>

    </li>

    <li>

    <p>KINSOL - for solving nonlinear algebraic systems of the form</p>

    <p>$$ F(u) = 0 \quad \text{or} \quad G(u) = u $$</p>

    </li>

    </ul>

    <h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Installation</h2>

    <p>For installation directions see the <a href="https://sundials.readthedocs.io/en/latest/Install_link.html"
    rel="nofollow">online install guide</a>,

    the installation chapter in any of the package user guides, or INSTALL_GUIDE.pdf.</p>

    <p>Warning to users who receive more than one of the individual packages at

    different times: Mixing old and new versions of SUNDIALS may fail. To avoid

    such failures, obtain all desired package at the same time.</p>

    <h2><a id="user-content-support" class="anchor" aria-hidden="true" href="#support"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Support</h2>

    <p>Full user guides for all of the SUNDIALS packages are available <a href="https://sundials.readthedocs.io"
    rel="nofollow">online</a>

    and in the <a href="./doc">doc</a> directory. Additionally, the <a href="./doc">doc</a>
    directory

    contains documentation for the package example programs.</p>

    <p>For information on recent changes to SUNDIALS see the <a href="./CHANGELOG.md">CHANGELOG</a>

    or the introduction chapter of any package user guide.</p>

    <p>A list of Frequently Asked Questions on build and installation procedures as

    well as common usage issues is available on the SUNDIALS <a href="https://computing.llnl.gov/projects/sundials/faq"
    rel="nofollow">FAQ</a>.

    For dealing with systems with unphysical solutions or discontinuities see the

    SUNDIALS <a href="https://computing.llnl.gov/projects/sundials/usage-notes" rel="nofollow">usage
    notes</a>.</p>

    <p>If you have a question not covered in the FAQ or usage notes, please submit

    your question to the SUNDIALS <a href="https://computing.llnl.gov/projects/sundials/mailing-list"
    rel="nofollow">mailing list</a>.</p>

    <h2><a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Contributing</h2>

    <p>Bug fixes or minor changes are preferred via a pull request to the

    <a href="https://github.com/LLNL/sundials">SUNDIALS GitHub repository</a>. For
    more

    information on contributing see the <a href="./CONTRIBUTING.md">CONTRIBUTING</a>
    file.</p>

    <h2><a id="user-content-citing" class="anchor" aria-hidden="true" href="#citing"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Citing</h2>

    <p>See the <a href="https://sundials.readthedocs.io/en/latest/index.html#citing"
    rel="nofollow">online documentation</a>

    or <a href="./CITATIONS.md">CITATIONS</a> file for information on how to cite
    SUNDIALS in

    any publications reporting work done using SUNDIALS packages.</p>

    <h2><a id="user-content-authors" class="anchor" aria-hidden="true" href="#authors"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Authors</h2>

    <p>The SUNDIALS library has been developed over many years by a number of

    contributors. The current SUNDIALS team consists of Cody J. Balos,

    David J. Gardner, Alan C. Hindmarsh, Daniel R. Reynolds, and Carol S. Woodward.

    We thank Radu Serban for significant and critical past contributions.</p>

    <p>Other contributors to SUNDIALS include: James Almgren-Bell, Lawrence E. Banks,

    Peter N. Brown, George Byrne, Rujeko Chinomona, Scott D. Cohen, Aaron Collier,

    Keith E. Grant, Steven L. Lee, Shelby L. Lockhart, John Loffeld, Daniel McGreer,

    Slaven Peles, Cosmin Petra, H. Hunter Schwartz, Jean M. Sexton,

    Dan Shumaker, Steve G. Smith, Allan G. Taylor, Hilari C. Tiedeman, Chris White,

    Ting Yan, and Ulrike M. Yang.</p>

    <h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>License</h2>

    <p>SUNDIALS is released under the BSD 3-clause license. See the <a href="./LICENSE">LICENSE</a>

    and <a href="./NOTICE">NOTICE</a> files for details. All new contributions must
    be made

    under the BSD 3-clause license.</p>

    <p><strong>Please Note</strong> If you are using SUNDIALS with any third party
    libraries linked

    in (e.g., LAPACK, KLU, SuperLU_MT, PETSc, or <em>hypre</em>), be sure to review
    the

    respective license of the package as that license may have more restrictive

    terms than the SUNDIALS license.</p>

    <pre><code>SPDX-License-Identifier: BSD-3-Clause


    LLNL-CODE-667205  (ARKODE)

    UCRL-CODE-155951  (CVODE)

    UCRL-CODE-155950  (CVODES)

    UCRL-CODE-155952  (IDA)

    UCRL-CODE-237203  (IDAS)

    LLNL-CODE-665877  (KINSOL)

    </code></pre>

    '
  stargazers_count: 282
  subscribers_count: 36
  topics:
  - ode-solver
  - dae-solver
  - nonlinear-equation-solver
  - sensitivity-analysis
  - time-integration
  - scientific-computing
  - parallel-computing
  - hpc
  - math-physics
  - radiuss
  - solver
  - high-performance-computing
  updated_at: 1661196872.0
NERSC/spack-infrastructure:
  data_format: 2
  description: null
  filenames:
  - spack-configs/perlmutter-e4s-22.05-mvapich2/ci/spack.yaml
  - docs/spack.yaml
  - spack-configs/perlmutter-e4s-22.05/spack.yaml
  - spack-configs/perlmutter-e4s-21.11/spack.yaml
  - spack-configs/perlmutter-e4s-22.05/ci/spack.yaml
  full_name: NERSC/spack-infrastructure
  latest_release: null
  readme: "<h1><a id=\"user-content-spack-infrastructure\" class=\"anchor\" aria-hidden=\"\
    true\" href=\"#spack-infrastructure\"><span aria-hidden=\"true\" class=\"octicon\
    \ octicon-link\"></span></a>Spack Infrastructure</h1>\n<p>The spack infrastructure\
    \ repository contains spack configuration in the form of <code>spack.yaml</code>\
    \ required to build spack stacks on Cori and Perlmutter system. We leverage gitlab\
    \ to automate software stack deployment which is configured using the <a href=\"\
    https://software.nersc.gov/NERSC/spack-infrastructure/-/blob/main/.gitlab-ci.yml\"\
    \ rel=\"nofollow\">.gitlab-ci.yml</a> file. The documentation is available at\
    \ <a href=\"https://nersc-spack-infrastructure.rtfd.io/\" rel=\"nofollow\">https://nersc-spack-infrastructure.rtfd.io/</a></p>\n\
    <h2><a id=\"user-content-spack-configuration\" class=\"anchor\" aria-hidden=\"\
    true\" href=\"#spack-configuration\"><span aria-hidden=\"true\" class=\"octicon\
    \ octicon-link\"></span></a>Spack Configuration</h2>\n<p>The spack configuration\
    \ can be found in <a href=\"https://software.nersc.gov/NERSC/spack-infrastructure/-/tree/main/spack-configs\"\
    \ rel=\"nofollow\">spack-configs</a> directory with subdirectory for each deployment.\n\
    Each pipeline can be run if one sets the variable <code>PIPELINE_NAME</code> to\
    \ a unique value in order to run a pipeline. You can check the <a href=\"https://software.nersc.gov/NERSC/spack-infrastructure/-/blob/main/.gitlab-ci.yml\"\
    \ rel=\"nofollow\">.gitlab-ci.yml</a> for the gitlab configuration. The pipeline\
    \ can be run via <a href=\"https://software.nersc.gov/NERSC/spack-infrastructure/-/pipelines/new\"\
    \ rel=\"nofollow\">web interface</a>, if you chose this route, you must set <code>PIPELINE_NAME</code>\
    \ to the appropriate value.</p>\n<p>If you want to trigger pipeline via <a href=\"\
    https://software.nersc.gov/NERSC/spack-infrastructure/-/pipelines/new\" rel=\"\
    nofollow\">web-interface</a> you will need to define PIPELINE_NAME variable to\
    \ trigger the appropriate pipeline.</p>\n<table>\n<thead>\n<tr>\n<th>system</th>\n\
    <th>status</th>\n<th>PIPELINE_NAME</th>\n<th>description</th>\n<th>spack.yaml</th>\n\
    </tr>\n</thead>\n<tbody>\n<tr>\n<td>Perlmutter</td>\n<td><strong>IN-PROGRESS</strong></td>\n\
    <td><code>PERLMUTTER_SPACK_DEVELOP</code></td>\n<td>This spack configuration is\
    \ based on <code>spack@develop</code> branch to see what packages can be built.\
    \ We expect this pipeline will fail and we are not expected to fix build failures.\
    \ The main purpose of this project is to build as many packages across all the\
    \ compilers, mpi, and blas providers of interest to see what works. Since we don't\
    \ know which package works during deployment, we will leverage data from this\
    \ pipeline to make informed decision what packages should be picked with given\
    \ compilers. This pipeline is our development and we should use this to experiment\
    \ new compilers. Note that we won't hardcode versions for packages since we want\
    \ to build with latest release. However we will hardcode external packages depending\
    \ on how the system is configured.</td>\n<td><a href=\"https://software.nersc.gov/NERSC/spack-infrastructure/-/blob/main/spack-configs/perlmutter-spack-develop/spack.yaml\"\
    \ rel=\"nofollow\">https://software.nersc.gov/NERSC/spack-infrastructure/-/blob/main/spack-configs/perlmutter-spack-develop/spack.yaml</a></td>\n\
    </tr>\n<tr>\n<td>Cori</td>\n<td><strong>IN-PROGRESS</strong></td>\n<td><code>CORI_SPACK_DEVELOP</code></td>\n\
    <td>This spack configuration will build E4S stack using spack <code>develop</code>\
    \ branch on Cori.</td>\n<td><a href=\"https://software.nersc.gov/NERSC/spack-infrastructure/-/blob/main/spack-configs/cori-spack-develop/spack.yaml\"\
    \ rel=\"nofollow\">https://software.nersc.gov/NERSC/spack-infrastructure/-/blob/main/spack-configs/cori-spack-develop/spack.yaml</a></td>\n\
    </tr>\n<tr>\n<td>Perlmutter</td>\n<td><strong>IN-PROGRESS</strong></td>\n<td><code>PERLMUTTER_E4S_22.05</code></td>\n\
    <td>This spack configuration will build E4S 22.05 on Perlmutter on scheduled pipeline</td>\n\
    <td><a href=\"https://software.nersc.gov/-/ide/project/NERSC/spack-infrastructure/tree/main/-/spack-configs/perlmutter-e4s-22.05/ci/spack.yaml/\"\
    \ rel=\"nofollow\">https://software.nersc.gov/-/ide/project/NERSC/spack-infrastructure/tree/main/-/spack-configs/perlmutter-e4s-22.05/ci/spack.yaml/</a></td>\n\
    </tr>\n<tr>\n<td>Muller</td>\n<td><strong>IN-PROGRESS</strong></td>\n<td><code>MULLER_E4S_22.05</code></td>\n\
    <td>This spack configuration will build E4S 22.05 on Muller on scheduled pipeline</td>\n\
    <td><a href=\"https://software.nersc.gov/-/ide/project/NERSC/spack-infrastructure/tree/main/-/spack-configs/perlmutter-e4s-22.05/ci/spack.yaml/\"\
    \ rel=\"nofollow\">https://software.nersc.gov/-/ide/project/NERSC/spack-infrastructure/tree/main/-/spack-configs/perlmutter-e4s-22.05/ci/spack.yaml/</a></td>\n\
    </tr>\n<tr>\n<td>Cori</td>\n<td><strong>COMPLETE</strong></td>\n<td><code>CORI_E4S_22.02</code></td>\n\
    <td>This spack configuration will build E4S/22.02 on Cori using a scheduled pipeline.</td>\n\
    <td><a href=\"https://software.nersc.gov/NERSC/spack-infrastructure/-/blob/main/spack-configs/cori-e4s-22.02/ci/spack.yaml\"\
    \ rel=\"nofollow\">https://software.nersc.gov/NERSC/spack-infrastructure/-/blob/main/spack-configs/cori-e4s-22.02/ci/spack.yaml</a></td>\n\
    </tr>\n<tr>\n<td>Gerty</td>\n<td><strong>COMPLETE</strong></td>\n<td><code>GERTY_E4S_22.02</code></td>\n\
    <td>This spack configuration will build E4S/22.02 on gerty using a scheduled pipeline.</td>\n\
    <td><a href=\"https://software.nersc.gov/NERSC/spack-infrastructure/-/blob/main/spack-configs/cori-e4s-22.02/ci/gerty/spack.yaml\"\
    \ rel=\"nofollow\">https://software.nersc.gov/NERSC/spack-infrastructure/-/blob/main/spack-configs/cori-e4s-22.02/ci/gerty/spack.yaml</a></td>\n\
    </tr>\n<tr>\n<td>Perlmutter</td>\n<td><strong>COMPLETE</strong></td>\n<td><code>PERLMUTTER_E4S_21.11_DEPLOY</code></td>\n\
    <td>This spack configuration is deployment configuration for E4S/21.11. For more\
    \ details on this stack see  <a href=\"https://docs.nersc.gov/applications/e4s/perlmutter/21.11/\"\
    \ rel=\"nofollow\">https://docs.nersc.gov/applications/e4s/perlmutter/21.11/</a>\n\
    </td>\n<td><a href=\"https://software.nersc.gov/NERSC/spack-infrastructure/-/blob/main/spack-configs/perlmutter-e4s-21.11/spack.yaml\"\
    \ rel=\"nofollow\">https://software.nersc.gov/NERSC/spack-infrastructure/-/blob/main/spack-configs/perlmutter-e4s-21.11/spack.yaml</a></td>\n\
    </tr>\n<tr>\n<td>Perlmutter</td>\n<td><strong>COMPLETE</strong></td>\n<td><code>PERLMUTTER_E4S_21.11</code></td>\n\
    <td>This spack configuration is used for development for building E4S/21.11 using\
    \ scheduled pipeline.</td>\n<td><a href=\"https://software.nersc.gov/NERSC/spack-infrastructure/-/blob/main/spack-configs/perlmutter-e4s-21.11/ci/spack.yaml\"\
    \ rel=\"nofollow\">https://software.nersc.gov/NERSC/spack-infrastructure/-/blob/main/spack-configs/perlmutter-e4s-21.11/ci/spack.yaml</a></td>\n\
    </tr>\n<tr>\n<td>Muller</td>\n<td><strong>COMPLETE</strong></td>\n<td><code>MULLER_E4S_21.11</code></td>\n\
    <td>This spack configuration was used to build E4S/21.11 on Muller using scheduled\
    \ pipeline. Once e4s/21.11 was built on Muller we followed up with building the\
    \ same spack configuration on Perlmutter.</td>\n<td><a href=\"https://software.nersc.gov/NERSC/spack-infrastructure/-/blob/main/spack-configs/perlmutter-e4s-21.11/ci/muller/spack.yaml\"\
    \ rel=\"nofollow\">https://software.nersc.gov/NERSC/spack-infrastructure/-/blob/main/spack-configs/perlmutter-e4s-21.11/ci/muller/spack.yaml</a></td>\n\
    </tr>\n<tr>\n<td>Cori</td>\n<td><strong>COMPLETE</strong></td>\n<td></td>\n<td>E4S/21.05\
    \ spack stack based on <a href=\"https://github.com/spack/spack/tree/e4s-21.05\"\
    >e4s-21.05</a> branch of spack. This stack can be accessed via <code>module load\
    \ e4s/21.05</code>.</td>\n<td><a href=\"https://software.nersc.gov/NERSC/spack-infrastructure/-/blob/main/spack-configs/cori-e4s-21.05/spack.yaml\"\
    \ rel=\"nofollow\">https://software.nersc.gov/NERSC/spack-infrastructure/-/blob/main/spack-configs/cori-e4s-21.05/spack.yaml</a></td>\n\
    </tr>\n<tr>\n<td>Cori</td>\n<td><strong>COMPLETE</strong></td>\n<td></td>\n<td>E4S/21.02\
    \ spack configuration used for deployment purposes, this can be accessed via <code>module\
    \ load e4s/21.02</code> on Cori. For more details see <a href=\"https://docs.nersc.gov/applications/e4s/cori/21.02/\"\
    \ rel=\"nofollow\">https://docs.nersc.gov/applications/e4s/cori/21.02/</a>\n</td>\n\
    <td><a href=\"https://software.nersc.gov/NERSC/spack-infrastructure/-/tree/main/spack-configs/cori-e4s-21.02/prod/spack.yaml\"\
    \ rel=\"nofollow\">https://software.nersc.gov/NERSC/spack-infrastructure/-/tree/main/spack-configs/cori-e4s-21.02/prod/spack.yaml</a></td>\n\
    </tr>\n<tr>\n<td>Cori</td>\n<td><strong>COMPLETE</strong></td>\n<td></td>\n<td>E4S/21.02\
    \ spack configuration that push to buildcache.</td>\n<td><a href=\"https://software.nersc.gov/NERSC/spack-infrastructure/-/blob/main/spack-configs/cori-e4s-21.02/spack.yaml\"\
    \ rel=\"nofollow\">https://software.nersc.gov/NERSC/spack-infrastructure/-/blob/main/spack-configs/cori-e4s-21.02/spack.yaml</a></td>\n\
    </tr>\n<tr>\n<td>Cori</td>\n<td><strong>COMPLETE</strong></td>\n<td></td>\n<td>E4S/20.10\
    \ spack configuration that push to build cache using <code>spack ci</code>.  This\
    \ project lives in <a href=\"https://software.nersc.gov/NERSC/e4s-2010\" rel=\"\
    nofollow\">https://software.nersc.gov/NERSC/e4s-2010</a> and configuration was\
    \ copied over here.</td>\n<td><a href=\"https://software.nersc.gov/NERSC/spack-infrastructure/-/blob/main/spack-configs/cori-e4s-20.10/spack.yaml\"\
    \ rel=\"nofollow\">https://software.nersc.gov/NERSC/spack-infrastructure/-/blob/main/spack-configs/cori-e4s-20.10/spack.yaml</a></td>\n\
    </tr>\n<tr>\n<td>Cori</td>\n<td><strong>COMPLETE</strong></td>\n<td></td>\n<td>E4S/20.10\
    \ spack configuration for Cori used for deployment purpose. This stack can be\
    \ accessed via <code>module load e4s/20.10</code>. This is documented at <a href=\"\
    https://docs.nersc.gov/applications/e4s/cori/20.10/\" rel=\"nofollow\">https://docs.nersc.gov/applications/e4s/cori/20.10/</a>\n\
    </td>\n<td><a href=\"https://software.nersc.gov/NERSC/spack-infrastructure/-/blob/main/spack-configs/cori-e4s-20.10/prod/spack.yaml\"\
    \ rel=\"nofollow\">https://software.nersc.gov/NERSC/spack-infrastructure/-/blob/main/spack-configs/cori-e4s-20.10/prod/spack.yaml</a></td>\n\
    </tr>\n</tbody>\n</table>\n<h2><a id=\"user-content-running-ci-pipelines\" class=\"\
    anchor\" aria-hidden=\"true\" href=\"#running-ci-pipelines\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>Running CI Pipelines</h2>\n<p>This\
    \ project is configured with several <a href=\"https://software.nersc.gov/NERSC/spack-infrastructure/-/pipeline_schedules\"\
    \ rel=\"nofollow\">scheduled pipelines</a> that will run at different times.</p>\n\
    <p>Currently, we have a shell runner installed on Perlmutter using <code>e4s</code>\
    \ account which is configured with following settings. You can find list of runners\
    \ and their runner status under <a href=\"https://software.nersc.gov/NERSC/spack-infrastructure/-/settings/ci_cd\"\
    \ rel=\"nofollow\">Settings &gt; CI/CD &gt; Runners</a>. Please make sure you\
    \ login to the appropriate hostname when starting the gitlab runner.</p>\n<table>\n\
    <thead>\n<tr>\n<th>System</th>\n<th>Runner Name</th>\n<th>Hostname</th>\n</tr>\n\
    </thead>\n<tbody>\n<tr>\n<td>perlmutter</td>\n<td><code>perlmutter-e4s</code></td>\n\
    <td><code>login27</code></td>\n</tr>\n<tr>\n<td>cori</td>\n<td><code>cori-e4s</code></td>\n\
    <td><code>cori02</code></td>\n</tr>\n<tr>\n<td>muller</td>\n<td><code>muller-e4s</code></td>\n\
    <td><code>login02</code></td>\n</tr>\n<tr>\n<td>gerty</td>\n<td><code>gerty-e4s</code></td>\n\
    <td><code>gert01</code></td>\n</tr>\n</tbody>\n</table>\n<p>The runner configuration\
    \ files are located in <code>~/.gitlab-runner</code> for user <strong>e4s</strong>.</p>\n\
    <p>The production pipelines are triggered via web-interface which requires approval\
    \ from a project maintainer. Production pipelines should be run when we need to\
    \ do full redeployment of stack.</p>\n<h2><a id=\"user-content-troubleshooting-gitlab-runner\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#troubleshooting-gitlab-runner\"\
    ><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Troubleshooting\
    \ gitlab runner</h2>\n<p>You will need to login as <code>e4s</code> user via <code>collabsu</code>\
    \ or <code>usgrsu</code> command. This will prompt you for a password which is\
    \ your <strong>NERSC password</strong> for your username not <strong>e4s</strong>\
    \ user. Note that <code>collabsu</code> is not present on Perlmutter so you must\
    \ use <code>usgrsu</code> to switch user accounts.</p>\n<pre><code>collabsu e4s\n\
    </code></pre>\n<p>Once you are logged in, you can login to the desired system\
    \ to restart the runner. You can check the runner status by navigating to <a href=\"\
    https://software.nersc.gov/NERSC/spack-infrastructure/-/settings/ci_cd\" rel=\"\
    nofollow\">Settings &gt; CI/CD &gt; Runners</a>. If the gitlab runner is down\
    \ you will need to restart the runner which is located in <code>$HOME/cron</code>\
    \ directory for the e4s user.</p>\n<p>The <code>gitlab-runner</code> command should\
    \ be accessible via the e4s user. To register a runner you can run <code>gitlab-runner\
    \ register</code> and follow the prompt. The runner configuration will be written\
    \ to <code>~/.gitlab-runner/config.toml</code>. However we recommend you create\
    \ a separate <code>config.toml</code> or copy the file to separate location. For\
    \ instance if you want to register a runner for muller you can set <code>gitlab-runner\
    \ register -c ~/.gitlab-runner/muller.config.toml</code> when registering the\
    \ runner and it will write the runner configuration to <code>~/.gitlab-runner/muller.config.toml</code>.\
    \ For more details regarding runner registration please see <a href=\"https://docs.gitlab.com/runner/register/\"\
    \ rel=\"nofollow\">https://docs.gitlab.com/runner/register/</a>.</p>\n<p>To restart\
    \ a runner you can run the <a href=\"https://software.nersc.gov/NERSC/spack-infrastructure/-/blob/main/restart-gitlab.sh\"\
    \ rel=\"nofollow\">restart-gitlab.sh</a> script which should be present in <strong>$HOME/cron</strong>.</p>\n\
    <pre><code>bash $HOME/cron/restart-gitlab.sh\n</code></pre>\n<p>You can check\
    \ if the gitlab process is running via <code>pgrep</code> assuming you are on\
    \ the right node. Shown below is an example output, you should only see one gitlab\
    \ runner process running on a node.</p>\n<pre><code>e4s:login27&gt; pgrep -a -u\
    \ e4s gitlab-runner\n52769 gitlab-runner run -c /global/homes/e/e4s/.gitlab-runner/perlmutter.config.toml\n\
    </code></pre>\n<p>Sometimes you may see unexpected results during CI jobs if you\
    \ made changes to the gitlab configuration and you have multiple gitlab-runner\
    \ processes running on different nodes. Therefore, we recommend you use <code>pdsh</code>\
    \ to search for all process across all nodes to find the process and then terminate\
    \ it. For instance you can run <strong>pgrep</strong> across all Cori login nodes\
    \ (<strong>cori01-12</strong>) to find any gitlab process, if you see multiple\
    \ process then you can login to that particular node and terminate the process.</p>\n\
    <pre><code>pdsh -w cori[01-12] pgrep -a -u e4s gitlab-runner\n</code></pre>\n\
    <h2><a id=\"user-content-jacamar\" class=\"anchor\" aria-hidden=\"true\" href=\"\
    #jacamar\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Jacamar</h2>\n\
    <p>The gitlab runnners are using <a href=\"https://gitlab.com/ecp-ci/jacamar-ci\"\
    \ rel=\"nofollow\">Jacamar CI</a>, there should be a <code>jacamar.toml</code>\
    \ file in the following location:</p>\n<pre><code>e4s:login27&gt; ls -l ~/.gitlab-runner/jacamar.toml\n\
    -rw-rw-r-- 1 e4s e4s 758 Aug 11 08:57 /global/homes/e/e4s/.gitlab-runner/jacamar.toml\n\
    </code></pre>\n<p>Any updates to the jacamar configuration are applied to runner\
    \ and there is no need to restart gitlab runner.</p>\n<p>The binaries <code>jacamar</code>\
    \ and <code>jacamar-auth</code> are located in the following location, if we need\
    \ to upgrade jacamar we should place them in this location,</p>\n<pre><code>e4s:login27&gt;\
    \ ls -l ~/jacamar/binaries/\ntotal 15684\n-rwxr-xr-x 1 e4s e4s 6283264 Jul  7\
    \ 15:50 jacamar\n-rwxr-xr-x 1 e4s e4s 9773296 Jul  7 15:50 jacamar-auth\n</code></pre>\n\
    <h2><a id=\"user-content-login-access\" class=\"anchor\" aria-hidden=\"true\"\
    \ href=\"#login-access\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"\
    ></span></a>Login Access</h2>\n<p>You can access Cori and Perlmutter, for more\
    \ details see <a href=\"https://docs.nersc.gov/connect/\" rel=\"nofollow\">Connecting\
    \ to NERSC</a>. If either system is down you can access data transfer nodes (<code>dtn[01-04].nersc.gov</code>)\
    \ and then access the appropriate system. Please check out the NERSC MOTD at \
    \ <a href=\"https://www.nersc.gov/live-status/motd/\" rel=\"nofollow\">https://www.nersc.gov/live-status/motd/</a>\
    \ for live updates to system.</p>\n<p>In order to access TDS systems like <code>muller</code>\
    \ or <code>gerty</code> you will need to access one of the systems (cori, perlmutter,\
    \ dtn) and then run the following:</p>\n<pre><code>ssh dtn01.nersc.gov\nssh gerty\n\
    </code></pre>\n<p>It is probably a good idea to run <code>collabsu</code> or <code>usgrsu</code>\
    \ once you are in the correct login node otherwise you may be prompted for a password\
    \ for the <code>e4s</code> user.</p>\n<h2><a id=\"user-content-current-challenges\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#current-challenges\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>Current Challenges</h2>\n<p>There\
    \ are several challenges with building spack stack at NERSC which can be summarized\
    \ as follows</p>\n<ul>\n<li>\n<p><strong>System OS + Cray Programming Environment\
    \ (CPE) changes</strong>: A system upgrade such as change to <code>glibc</code>\
    \ or upgrades in CPE can lead to full software stack rebuild, especially if you\
    \ have external packages set for packages like <code>cray-mpich</code>, <code>cray-libsci</code>\
    \ which generally change between versions</p>\n</li>\n<li>\n<p><strong>Incompatibile\
    \ compilers</strong>: Some packages can't be built with certain compilers (<code>nvhpc</code>,\
    \ <code>aocc</code>) which could be due to several factors.</p>\n<ul>\n<li>An\
    \ application doesn't have support though it was be added in newer version but\
    \ you don't have it in your spack release used for deployment</li>\n<li>Lack of\
    \ support in spack package recipe or spack-core base including spack-cray detection.\
    \ This may require getting fix and cherry-pick commit or waiting for new version</li>\n\
    <li>Spack Cray detection is an important part in build errors including how one\
    \ specifies externals via <code>modules</code> vs <code>prefix</code> both could\
    \ be provided and it requires experimentation. An example of this is trying to\
    \ get <code>cray-mpich</code> external one could set something like this with\
    \ modules or prefix</li>\n</ul>\n<div class=\"highlight highlight-source-yaml\"\
    ><pre>  <span class=\"pl-ent\">cray-mpich</span>:\n    <span class=\"pl-ent\"\
    >buildable</span>: <span class=\"pl-c1\">false</span>\n    <span class=\"pl-ent\"\
    >externals</span>:\n    - <span class=\"pl-ent\">spec</span>: <span class=\"pl-s\"\
    >cray-mpich@8.1.11 %gcc@9.3.0</span>\n      <span class=\"pl-ent\">prefix</span>:\
    \ <span class=\"pl-s\">/opt/cray/pe/mpich/8.1.11/ofi/gnu/9.1</span>\n      <span\
    \ class=\"pl-ent\">modules</span>:\n      - <span class=\"pl-s\">cray-mpich/8.1.11</span>\n\
    \      - <span class=\"pl-s\">cudatoolkit/21.9_11.4</span></pre></div>\n<ul>\n\
    <li>\n<strong>Spack concretizer</strong> prevent one from chosing a build configration\
    \ for a spec. This requires a few troubleshooting step but usually boils down\
    \ to:\n<ul>\n<li>Read the spack package file <code>spack edit &lt;package&gt;</code>\
    \ for conflicts and try <code>spack spec</code> to see concretized spec.</li>\n\
    <li>Try different version, different compiler, different dependency. Some packages\
    \ have conflicting variant for instance one can't enable <code>+openmp</code>\
    \ and <code>+pthread</code> it is mutually exclusive.</li>\n</ul>\n</li>\n</ul>\n\
    </li>\n</ul>\n<p>There is a document <a href=\"https://docs.google.com/document/d/1jWrCcK8LgpNDMytXhLdBYpIusidkoowrZAH1zos7zIw/edit?usp=sharing\"\
    \ rel=\"nofollow\">Spack E4S Issues on Permlutter</a> outlining current issues\
    \ with spack. If you need access to document please contact <strong>Shahzeb Siddiqui</strong>.</p>\n\
    <h2><a id=\"user-content-contact\" class=\"anchor\" aria-hidden=\"true\" href=\"\
    #contact\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Contact</h2>\n\
    <p>If you need elevated privledge or assistance with this project please contact\
    \ one of the maintainers:</p>\n<ul>\n<li><strong>Shahzeb Siddiqui (<a href=\"\
    mailto:shahzebsiddiqui@lbl.gov\">shahzebsiddiqui@lbl.gov</a>)</strong></li>\n\
    <li><strong>Erik Palmer (<a href=\"mailto:epalmer@lbl.gov\">epalmer@lbl.gov</a>)</strong></li>\n\
    <li><strong>Justin Cook (<a href=\"mailto:JSCook@lbl.gov\">JSCook@lbl.gov</a>)</strong></li>\n\
    <li>E4S Team: <strong>Sameer Shende (<a href=\"mailto:sameer@cs.uoregon.edu\"\
    >sameer@cs.uoregon.edu</a>)</strong>, <strong>Christopher Peyralans (<a href=\"\
    mailto:lpeyrala@uoregon.edu\">lpeyrala@uoregon.edu</a>)</strong>, <strong>Wyatt\
    \ Spear (<a href=\"mailto:wspear@cs.uoregon.edu\">wspear@cs.uoregon.edu</a>)</strong>,\
    \ <strong>Nicholas Chaimov (<a href=\"mailto:nchaimov@paratools.com\">nchaimov@paratools.com</a>)</strong>\n\
    </li>\n</ul>\n"
  stargazers_count: 3
  subscribers_count: 14
  topics: []
  updated_at: 1656175573.0
NOAA-EMC/GSI-Monitor:
  data_format: 2
  description: GSI Monitoring Tools
  filenames:
  - ci/spack.yaml
  full_name: NOAA-EMC/GSI-Monitor
  latest_release: null
  readme: "<h1><a id=\"user-content-gsi-monitor\" class=\"anchor\" aria-hidden=\"\
    true\" href=\"#gsi-monitor\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"\
    ></span></a>GSI-Monitor</h1>\n<p>GSI Monitoring Tools</p>\n<p>These tools monitor\
    \ the Gridpoint Statsical Interpolation (GSI) package's data assimiliation, detecting\n\
    and reporting missing data sources, low obervational counts, and high penalty\
    \ values.</p>\n<p>Suite includes:</p>\n<pre><code>  ConMon   Conventional Monitor\
    \     \n  MinMon   GSI Minimization Monitor \n  OznMon   Ozone Monitor       \
    \     \n  RadMon   Radiance Monitor         \n</code></pre>\n<p>PoC:  <a href=\"\
    mailto:edward.safford@noaa.gov\">edward.safford@noaa.gov</a></p>\n"
  stargazers_count: 1
  subscribers_count: 0
  topics: []
  updated_at: 1660063618.0
NOAA-EMC/WW3:
  data_format: 2
  description: WAVEWATCH III
  filenames:
  - model/ci/spack.yaml
  full_name: NOAA-EMC/WW3
  latest_release: 6.07.1
  readme: "<h1><a id=\"user-content-the-wavewatch-iii-framework\" class=\"anchor\"\
    \ aria-hidden=\"true\" href=\"#the-wavewatch-iii-framework\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>The WAVEWATCH III Framework</h1>\n\
    <p>WAVEWATCH III<sup>\xAE</sup>  is a community wave modeling framework that includes\
    \ the\nlatest scientific advancements in the field of wind-wave modeling and dynamics.</p>\n\
    <h2><a id=\"user-content-general-features\" class=\"anchor\" aria-hidden=\"true\"\
    \ href=\"#general-features\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"\
    ></span></a>General Features</h2>\n<p>WAVEWATCH III<sup>\xAE</sup> solves the\
    \ random phase spectral action density\nbalance equation for wavenumber-direction\
    \ spectra. The model includes options\nfor shallow-water (surf zone) applications,\
    \ as well as wetting and drying of\ngrid points. Propagation of a wave spectrum\
    \ can be solved using regular\n(rectilinear or curvilinear) and unstructured (triangular)\
    \ grids. See\n<a href=\"https://github.com/NOAA-EMC/WW3/wiki/About-WW3\">About\
    \ WW3</a> for a\ndetailed description of WAVEWATCH III<sup>\xAE</sup> .</p>\n\
    <h2><a id=\"user-content-installation\" class=\"anchor\" aria-hidden=\"true\"\
    \ href=\"#installation\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"\
    ></span></a>Installation</h2>\n<p>The WAVEWATCH III<sup>\xAE</sup>  framework\
    \ package has two parts that need to be combined so\nall runs smoothly: the GitHub\
    \ repo itself, and a binary data file bundle that\nneeds to be obtained from our\
    \ ftp site. Steps to successfully acquire and install\nthe framework are outlined\
    \ in our <a href=\"https://github.com/NOAA-EMC/WW3/wiki/Quick-Start\">Quick Start</a>\n\
    guide.</p>\n<h2><a id=\"user-content-disclaimer\" class=\"anchor\" aria-hidden=\"\
    true\" href=\"#disclaimer\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"\
    ></span></a>Disclaimer</h2>\n<p>The United States Department of Commerce (DOC)\
    \ GitHub project code is provided\non an 'as is' basis and the user assumes responsibility\
    \ for its use. DOC has\nrelinquished control of the information and no longer\
    \ has responsibility to\nprotect the integrity, confidentiality, or availability\
    \ of the information. Any\nclaims against the Department of Commerce stemming\
    \ from the use of its GitHub\nproject will be governed by all applicable Federal\
    \ law. Any reference to\nspecific commercial products, processes, or services\
    \ by service mark,\ntrademark, manufacturer, or otherwise, does not constitute\
    \ or imply their\nendorsement, recommendation or favoring by the Department of\
    \ Commerce. The\nDepartment of Commerce seal and logo, or the seal and logo of\
    \ a DOC bureau,\nshall not be used in any manner to imply endorsement of any commercial\
    \ product\nor activity by DOC or the United States Government.</p>\n"
  stargazers_count: 181
  subscribers_count: 47
  topics: []
  updated_at: 1660933111.0
NOAA-EMC/spack-stack:
  data_format: 2
  description: null
  filenames:
  - configs/templates/ufs-srw-dev/spack.yaml
  - configs/templates/jedi-ufs-all/spack.yaml
  - configs/templates/gfs-v16.2/spack.yaml
  - configs/templates/empty/spack.yaml
  - configs/templates/ufs-weather-model/spack.yaml
  full_name: NOAA-EMC/spack-stack
  latest_release: spack-stack-1.0.2
  readme: '<h1><a id="user-content-spack-stack" class="anchor" aria-hidden="true"
    href="#spack-stack"><span aria-hidden="true" class="octicon octicon-link"></span></a>spack-stack</h1>

    <p>Spack-stack enables the installation of software required

    for HPC system deployments of NOAA''s Unified Forecast System (UFS) and

    other weather and climate models, including components of the Joint

    Effort for Data assimilation Integration (JEDI).</p>

    <p>Spack-stack is a collaborative effort between:</p>

    <ul>

    <li><a href="https://www.emc.ncep.noaa.gov/emc_new.php" rel="nofollow">NOAA Environmental
    Modeling Center (EMC)</a></li>

    <li><a href="https://www.jcsda.org/" rel="nofollow">UCAR Joint Center for Satellite
    Data Assimilation (JCSDA)</a></li>

    <li>

    <a href="https://epic.noaa.gov/" rel="nofollow">Earth Prediction Innovation Center
    (EPIC)</a>.</li>

    </ul>

    <p>Spack-stack is a thin layer around a fork of the

    <a href="https://github.com/spack/spack">spack</a> repository. Spack is a

    community-supported, multi-platform, Python-based package manager

    originally developed by the Lawrence Livermore National Laboratory

    (LLNL). Spack is provided as a submodule to spack-stack so that a

    stable version can be referenced. For more information about spack see

    the <a href="https://computing.llnl.gov/projects/spack-hpc-package-manager" rel="nofollow">LLNL
    project page for

    spack</a>

    and the <a href="https://spack.readthedocs.io/en/latest/" rel="nofollow">spack

    documentation</a>.</p>

    <p>The stack can be installed on a range of platforms, from Linux and

    macOS laptops to HPC systems, and comes pre-configured for many

    systems. Users can install the necessary packages for a particular

    application and later add the missing packages for another application

    without having to rebuild the entire stack.</p>

    <p>spack-stack is mainly a collection of Spack configuration files, but

    provides a Spack extension to simplify the installation process:</p>

    <ul>

    <li>

    <p><code>spack stack create</code> is provided to copy common, site-specific,
    and

    application-specific configuration files into a coherent Spack

    environment and to create container recipes</p>

    </li>

    <li>

    <p><code>spack stack setup-meta-modules</code> creates compiler, MPI and Python

    meta-modules for a convenient setup of a user environment using

    modules (lua and tcl)</p>

    </li>

    </ul>

    <p>Documentation for installing and using spack-stack can be found here:

    <a href="https://spack-stack.readthedocs.io/en/latest/" rel="nofollow">https://spack-stack.readthedocs.io/en/latest/</a></p>

    <p>spack-stack is maintained by:</p>

    <ul>

    <li>

    <p><a href="https://www.github.com/kgerheiser">Kyle Gerheiser</a>, <a href="https://www.github.com/Hang-Lei-NOAA">Hang

    Lei</a>, <a href="https://www.github.com/edwardhartnett">Ed

    Hartnett</a> NOAA-EMC</p>

    </li>

    <li>

    <p><a href="https://www.github.com/climbfuji">Dom Heinzeller</a>, JCSDA</p>

    </li>

    </ul>

    <p>For more information about the organization of the spack-stack

    project, see the <a href="project_charter.md">Project Charter</a>.</p>

    <h2><a id="user-content-disclaimer" class="anchor" aria-hidden="true" href="#disclaimer"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Disclaimer</h2>

    <p>The United States Department of Commerce (DOC) GitHub project code is

    provided on an "as is" basis and the user assumes responsibility for

    its use. DOC has relinquished control of the information and no longer

    has responsibility to protect the integrity, confidentiality, or

    availability of the information. Any claims against the Department of

    Commerce stemming from the use of its GitHub project will be governed

    by all applicable Federal law. Any reference to specific commercial

    products, processes, or services by service mark, trademark,

    manufacturer, or otherwise, does not constitute or imply their

    endorsement, recommendation or favoring by the Department of

    Commerce. The Department of Commerce seal and logo, or the seal and

    logo of a DOC bureau, shall not be used in any manner to imply

    endorsement of any commercial product or activity by DOC or the United

    States Government.</p>

    '
  stargazers_count: 5
  subscribers_count: 8
  topics: []
  updated_at: 1660579618.0
ParaToolsInc/exago-crusher:
  data_format: 2
  description: Spack-based deployment of ROCm enabled ExaGO for OLCF Crusher
  filenames:
  - spack.yaml
  full_name: ParaToolsInc/exago-crusher
  latest_release: null
  readme: "<h1><a id=\"user-content-exago-on-olcf-crusher\" class=\"anchor\" aria-hidden=\"\
    true\" href=\"#exago-on-olcf-crusher\"><span aria-hidden=\"true\" class=\"octicon\
    \ octicon-link\"></span></a>ExaGO on OLCF Crusher</h1>\n<p>ROCm-enabled ExaGO\
    \ on OLCF Crusher using Spack</p>\n<h2><a id=\"user-content-install-from-build-cache-example\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#install-from-build-cache-example\"\
    ><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Install\
    \ from Build Cache (Example)</h2>\n<ul>\n<li>View a demo video of these instructions\
    \ run at <a href=\"https://asciinema.org/a/508123\" rel=\"nofollow\">https://asciinema.org/a/508123</a>\n\
    </li>\n</ul>\n<pre><code>$crusher:~&gt; git clone https://github.com/ParaToolsInc/exago-crusher.git\n\
    $crusher:~&gt; cd exago-crusher\n\n$crusher:~/exago-crusher&gt; git clone https://github.com/spack/spack\n\
    $crusher:~/exago-crusher&gt; (cd spack &amp;&amp; git checkout dac31ef3c)\n\n\
    $crusher:~/exago-crusher&gt; export SPACK_DISABLE_LOCAL_CONFIG=1\n$crusher:~/exago-crusher&gt;\
    \ export SPACK_USER_CACHE_PATH=$(pwd)/_cache\n$crusher:~/exago-crusher&gt; . spack/share/spack/setup-env.sh\n\
    \n$crusher:~/exago-crusher&gt; spack mirror add paratools /gpfs/alpine/csc439/world-shared/E4S/ParaTools/exago\n\
    $crusher:~/exago-crusher&gt; spack buildcache keys -it\ngpg: key 4345F04B40005581:\
    \ public key \"University of Oregon - E4S\" imported\ngpg: Total number processed:\
    \ 1\ngpg:               imported: 1\ngpg: inserting ownertrust of 6\n\n$crusher:~/exago-crusher&gt;\
    \ time spack -e . concretize -f | tee concretize.log\n... output truncated for\
    \ brevity; see concretize.log in this repo for full output\nreal\t0m46.340s\n\
    user\t1m25.263s\nsys\t0m2.094s\n\n$crusher:~/exago-crusher&gt; time spack -e .\
    \ install --cache-only\n... output truncated for brevity\nreal\t7m40.626s\nuser\t\
    4m44.081s\nsys\t0m33.864s\n\n$crusher:~/exago-crusher&gt; spack find -lv exago\
    \ hiop ipopt coinhsl\n==&gt; 8 installed packages\n-- cray-sles15-zen3 / gcc@11.2.0\
    \ --------------------------------\nue74alo coinhsl@2015.06.23+blas\nmnelc7u exago@develop~cuda+hiop~ipo~ipopt+mpi+python+raja+rocm\
    \ amdgpu_target=gfx90a build_type=RelWithDebInfo\nanahf5s exago@develop~cuda+hiop~ipo~ipopt+mpi+python+raja+rocm\
    \ amdgpu_target=gfx90a build_type=RelWithDebInfo\n2qog6zw exago@develop~cuda+hiop~ipo+ipopt+mpi+python+raja+rocm\
    \ amdgpu_target=gfx90a build_type=RelWithDebInfo\ndr3jlyb exago@develop~cuda+hiop~ipo+ipopt+mpi+python+raja+rocm\
    \ amdgpu_target=gfx90a build_type=RelWithDebInfo\nwtqj2hu hiop@0.6.2~cuda~cusolver~deepchecking~ginkgo~ipo~jsrun~kron+mpi+raja+rocm~shared+sparse\
    \ amdgpu_target=gfx90a build_type=RelWithDebInfo\nrlw4qhu hiop@0.6.2~cuda~cusolver~deepchecking~ginkgo~ipo~jsrun+kron+mpi+raja+rocm~shared+sparse\
    \ amdgpu_target=gfx90a build_type=RelWithDebInfo\nufjh4v7 ipopt@3.14.5+coinhsl~debug+metis~mumps\n\
    </code></pre>\n"
  stargazers_count: 0
  subscribers_count: 2
  topics: []
  updated_at: 1657663349.0
PawseySC/pawsey-spack-config:
  data_format: 2
  description: Configuration files for Spack at Pawsey
  filenames:
  - setonix/environments/env_utils/spack.yaml
  - setonix/environments/env_bio/spack.yaml
  - setonix/environments/env_num_libs/spack.yaml
  - setonix/environments/env_astro/spack.yaml
  full_name: PawseySC/pawsey-spack-config
  latest_release: null
  readme: '<h1><a id="user-content-pawsey-spack-config" class="anchor" aria-hidden="true"
    href="#pawsey-spack-config"><span aria-hidden="true" class="octicon octicon-link"></span></a>pawsey-spack-config</h1>

    <p>Configuration files for Spack at Pawsey.</p>

    <h2><a id="user-content-setonix-setup" class="anchor" aria-hidden="true" href="#setonix-setup"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Setonix setup</h2>

    <p>This can be found in the <code>setonix/</code> directory.<br>

    See <code>README.md</code> in there for further information.</p>

    <h2><a id="user-content-other-setups" class="anchor" aria-hidden="true" href="#other-setups"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Other setups</h2>

    <ul>

    <li>

    <code>joey/</code>: test deployment for the Setonix test system</li>

    <li>Current Pawsey systems

    <ul>

    <li><code>askapingest/</code></li>

    <li><code>garrawarla/</code></li>

    <li><code>magnus/</code></li>

    <li><code>topaz/</code></li>

    <li><code>zeus/</code></li>

    </ul>

    </li>

    <li>

    <code>examples/</code>: deployment examples and tests</li>

    <li>

    <code>deprecated/</code>: legacy deployments</li>

    </ul>

    '
  stargazers_count: 0
  subscribers_count: 10
  topics: []
  updated_at: 1641801068.0
PawseySC/performance-modelling-tools:
  data_format: 2
  description: This repository hosts configuration files for HPC Toolkit, ROCprof,
    NVprof and ERT, and scripts to help us create roofline and instruction based roofline
    diagrams (performance models) for applications
  filenames:
  - spack/mulan/spack.yaml
  full_name: PawseySC/performance-modelling-tools
  latest_release: null
  readme: '<h1><a id="user-content-performance-modeling-tools" class="anchor" aria-hidden="true"
    href="#performance-modeling-tools"><span aria-hidden="true" class="octicon octicon-link"></span></a>Performance
    Modeling Tools</h1>

    <p>This repository hosts configuration files and scripts to support performance
    modeling of research application on Pawsey Supercomputing Centre systems.</p>

    <p>We have provided</p>

    <ul>

    <li>

    <a href="./spack">Spack environments</a> that provide performance modeling toolchains
    for Pawsey systems</li>

    <li>

    <a href="./examples/">Examples</a> that illustrate how to use this repository
    for active research projects</li>

    <li>

    <a href="./bin/">Scripts</a> for processing profiler data to create graphics and
    other post-processed data to support performance modeling</li>

    </ul>

    <h2><a id="user-content-about-this-repository" class="anchor" aria-hidden="true"
    href="#about-this-repository"><span aria-hidden="true" class="octicon octicon-link"></span></a>About
    this Repository</h2>

    <h3><a id="user-content-scaffolding" class="anchor" aria-hidden="true" href="#scaffolding"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Scaffolding</h3>

    <p>This repository is organized with the following top-level directories</p>

    <ul>

    <li>

    <code>bin/</code> : Contains scripts for post-processing profiler data</li>

    <li>

    <code>docs/</code> : Contains mkdocs documentation</li>

    <li>

    <code>examples/</code> : Contains example configurations for creating profile
    data and processing output with the tools in this repository.</li>

    <li>

    <code>spack/</code> : Contains spack environments for various Pawsey systems that
    provide hpc-toolkit and other useful tools.</li>

    </ul>

    <h2><a id="user-content-getting-help" class="anchor" aria-hidden="true" href="#getting-help"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Getting Help</h2>

    <p>Currently, you can request help by <a href="https://github.com/PawseySC/performance-modelling-tools/issues">submitting
    an issue</a></p>

    '
  stargazers_count: 1
  subscribers_count: 9
  topics: []
  updated_at: 1652665803.0
SCOREC/rhel7-spack-config:
  data_format: 2
  description: rhel7 spack configuration and scripts
  filenames:
  - v0.15.4/spack.yaml
  full_name: SCOREC/rhel7-spack-config
  latest_release: null
  readme: "<h1><a id=\"user-content-setup-on-scorec\" class=\"anchor\" aria-hidden=\"\
    true\" href=\"#setup-on-scorec\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"\
    ></span></a>setup on SCOREC</h1>\n<pre><code>cd /opt/scorec/spack/rhel7-spack-config/\n\
    source setupSpack.sh\n</code></pre>\n<h1><a id=\"user-content-rhel7-spack-config\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#rhel7-spack-config\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>rhel7-spack-config</h1>\n<p>rhel7\
    \ spack configuration and scripts</p>\n<p>The <code>install.sh</code> script maintained\
    \ in this repo is for documentation purposes (e.g., in case we had to reinstall\
    \ the entire stack from scratch) and should not be executed as it will not use\
    \ all of our existing package installs.  More discussion of package installation\
    \ is below.</p>\n<h2><a id=\"user-content-useful-commands\" class=\"anchor\" aria-hidden=\"\
    true\" href=\"#useful-commands\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"\
    ></span></a>useful commands</h2>\n<p>regenerate lmod module tree:</p>\n<pre><code>spack\
    \ module lmod refresh\n</code></pre>\n<h2><a id=\"user-content-installing-new-packages\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#installing-new-packages\"><span\
    \ aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>installing new\
    \ packages</h2>\n<p>Our spack repo is tracking the master spack branch.  Spack\
    \ package updates could result in additional installation of packages with little\
    \ or no package source code changes.  These additional installs can be avoided\
    \ when installing new packages by first examining the output of the <code>spack\
    \ spec -I</code> command.  If a utility/infrastructure level package, such as\
    \ cmake or mpich, is marked with a <code>[+]</code> symbol in the leftmost column\
    \ then it means that the existing install will be used.  If spack does not default\
    \ to using the existing install you can append the hash of the package to the\
    \ spec command.</p>\n<p>For example, lets see what happens when we ask for a pumi\
    \ install using gcc 7.3.0</p>\n<pre><code>$ spack spec -I pumi@develop%gcc@7.3.0\n\
    Input spec\n--------------------------------\n -   pumi@develop%gcc@7.3.0\n\n\
    Concretized\n--------------------------------\n -   pumi@develop%gcc@7.3.0 build_type=RelWithDebInfo\
    \ ~fortran~shared simmodsuite=none ~zoltan arch=linux-rhel7-x86_64 \n[+]     \
    \ ^cmake@3.13.1%gcc@7.3.0~doc+ncurses+openssl+ownlibs~qt arch=linux-rhel7-x86_64\
    \ \n[+]          ^ncurses@6.1%gcc@7.3.0~symlinks~termlib arch=linux-rhel7-x86_64\
    \ \n[+]              ^pkgconf@1.5.4%gcc@7.3.0 arch=linux-rhel7-x86_64 \n[+]  \
    \        ^openssl@1.1.1%gcc@7.3.0+systemcerts arch=linux-rhel7-x86_64 \n[+]  \
    \            ^perl@5.16.3%gcc@7.3.0+cpanm patches=0eac10ed90aeb0459ad8851f88081d439a4e41978e586ec743069e8b059370ac\
    \ +shared+threads arch=linux-rhel7-x86_64 \n[+]              ^zlib@1.2.11%gcc@7.3.0+optimize+pic+shared\
    \ arch=linux-rhel7-x86_64 \n -       ^mpich@3.3%gcc@7.3.0 device=ch3 +hydra netmod=tcp\
    \ +pmi+romio~verbs arch=linux-rhel7-x86_64 \n[+]          ^findutils@4.6.0%gcc@7.3.0\
    \ patches=84b916c0bf8c51b7e7b28417692f0ad3e7030d1f3c248ba77c42ede5c1c5d11e,bd9e4e5cc280f9753ae14956c4e4aa17fe7a210f55dd6c84aa60b12d106d47a2\
    \ arch=linux-rhel7-x86_64 \n[+]              ^autoconf@system%gcc@7.3.0 arch=linux-rhel7-x86_64\
    \ \n[+]              ^automake@system%gcc@7.3.0 arch=linux-rhel7-x86_64 \n[+]\
    \              ^libtool@system%gcc@7.3.0 arch=linux-rhel7-x86_64 \n[+]       \
    \       ^m4@1.4.16%gcc@7.3.0 patches=c0a408fbffb7255fcc75e26bd8edab116fc81d216bfd18b473668b7739a4158e\
    \ +sigsegv arch=linux-rhel7-x86_64 \n[+]              ^texinfo@6.5%gcc@7.3.0 arch=linux-rhel7-x86_64\n\
    </code></pre>\n<p>Spack wants to install mpich 3.3, but we don't want to change\
    \ to the new mpich version yet.  So, we will get the hash of the existing mpich\
    \ 3.2.1 install:</p>\n<pre><code>$ spack find -ldv mpich%gcc@7.3.0\n==&gt; 1 installed\
    \ package\n-- linux-rhel7-x86_64 / gcc@7.3.0 -------------------------------\n\
    niuhmad    mpich@3.2.1 device=ch3 +hydra netmod=tcp +pmi+romio~verbs\n</code></pre>\n\
    <p>then append the hash <code>niuhmad</code> to the spec for pumi using the <code>^</code>\
    \ syntax to specify it as a dependency:</p>\n<pre><code>$ spack spec -I pumi@develop%gcc@7.3.0\
    \ ^/niuhmad\nInput spec\n--------------------------------\n -   pumi@develop%gcc@7.3.0\n\
    [+]      ^mpich@3.2.1%gcc@7.3.0 device=ch3 +hydra netmod=tcp +pmi+romio~verbs\
    \ arch=linux-rhel7-x86_64 \n\nConcretized\n--------------------------------\n\
    \ -   pumi@develop%gcc@7.3.0 build_type=RelWithDebInfo ~fortran~shared simmodsuite=none\
    \ ~zoltan arch=linux-rhel7-x86_64 \n[+]      ^cmake@3.13.1%gcc@7.3.0~doc+ncurses+openssl+ownlibs~qt\
    \ arch=linux-rhel7-x86_64 \n[+]          ^ncurses@6.1%gcc@7.3.0~symlinks~termlib\
    \ arch=linux-rhel7-x86_64 \n[+]              ^pkgconf@1.5.4%gcc@7.3.0 arch=linux-rhel7-x86_64\
    \ \n[+]          ^openssl@1.1.1%gcc@7.3.0+systemcerts arch=linux-rhel7-x86_64\
    \ \n[+]              ^perl@5.16.3%gcc@7.3.0+cpanm patches=0eac10ed90aeb0459ad8851f88081d439a4e41978e586ec743069e8b059370ac\
    \ +shared+threads arch=linux-rhel7-x86_64 \n[+]              ^zlib@1.2.11%gcc@7.3.0+optimize+pic+shared\
    \ arch=linux-rhel7-x86_64 \n[+]      ^mpich@3.2.1%gcc@7.3.0 device=ch3 +hydra\
    \ netmod=tcp +pmi+romio~verbs arch=linux-rhel7-x86_64 \n</code></pre>\n<p>And\
    \ see that in the Concretized spec it is now using the existing mpich 3.2.1 install.</p>\n\
    <h2><a id=\"user-content-contents\" class=\"anchor\" aria-hidden=\"true\" href=\"\
    #contents\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>contents</h2>\n\
    <p>compilers.yaml - compiler list\nconfig.yaml - global config\ninstall.sh - package\
    \ installation commands\nmodules.yaml - hierarchical layout for lua modules\n\
    packages.yaml - system installed packages\nREADME.md - this file\nsetupSpack.sh\
    \ - env needed for executing spack commands</p>\n"
  stargazers_count: 0
  subscribers_count: 6
  topics: []
  updated_at: 1643231013.0
SouthernMethodistUniversity/mp_testing:
  data_format: 2
  description: null
  filenames:
  - mp/testing/08_pytorch/spack.yaml
  - mp/testing/01_spack/spack_lammps.yaml
  - mp/testing/05_openmm/spack.yaml
  - mp/testing/01_spack/spack_nvhpc.yaml
  full_name: SouthernMethodistUniversity/mp_testing
  latest_release: null
  readme: '<h1><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Notes</h1>

    <p><strong>All code in this repo is for testing. The code may not work and may
    change. Pull requests and issues welcome.</strong></p>

    <p>See <a href="quick_start_notes.md">Quick Start Notes</a> for a short overview
    of MP usage.</p>

    <h2><a id="user-content-usage-example" class="anchor" aria-hidden="true" href="#usage-example"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Usage Example</h2>

    <div class="highlight highlight-source-shell"><pre>git clone https://github.com/SouthernMethodistUniversity/mp_testing.git

    <span class="pl-c1">cd</span> mp_testing/demos/00_nemo

    ./submit_jobs.sh</pre></div>

    <h2><a id="user-content-applications" class="anchor" aria-hidden="true" href="#applications"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Applications</h2>

    <ul>

    <li>LAMMPS (NGC)</li>

    <li>AMBER</li>

    <li>NAMD (NGC)</li>

    <li>OpenMM</li>

    <li>Gaussian</li>

    <li>VASP</li>

    <li>CRYSTAL</li>

    <li>Q-Chem</li>

    <li>Quantum Espresso</li>

    </ul>

    <h2><a id="user-content-analysis-tools" class="anchor" aria-hidden="true" href="#analysis-tools"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Analysis Tools</h2>

    <ul>

    <li>Memory profiling</li>

    <li>Performance profiling</li>

    </ul>

    <h2><a id="user-content-librariesapis" class="anchor" aria-hidden="true" href="#librariesapis"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Libraries/APIs</h2>

    <ul>

    <li>Raja</li>

    <li>Magma</li>

    <li>heFFTe</li>

    <li>Pandas</li>

    <li>NumPy</li>

    <li>TensorFlow</li>

    <li>PyTorch</li>

    <li>DALI</li>

    </ul>

    <h2><a id="user-content-languages" class="anchor" aria-hidden="true" href="#languages"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Languages</h2>

    <ul>

    <li>C</li>

    <li>C++</li>

    <li>Python</li>

    <li>Some custom layer in C++/CUDA</li>

    <li>Fortran</li>

    <li>CUDA Fortran</li>

    <li>Julia</li>

    </ul>

    <h2><a id="user-content-molecular-dynamics" class="anchor" aria-hidden="true"
    href="#molecular-dynamics"><span aria-hidden="true" class="octicon octicon-link"></span></a>Molecular
    Dynamics</h2>

    <ul>

    <li>OpenMM</li>

    <li>AMBER</li>

    <li>Desmond</li>

    <li>GROMACS</li>

    <li>Mentioned MIC modes?</li>

    <li>NGC for Keras/TF and Pytorch</li>

    </ul>

    <h2><a id="user-content-issues" class="anchor" aria-hidden="true" href="#issues"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Issues</h2>

    <ul>

    <li>Can''t run enroot images directly via <code>enroot start hello_world.sqsh</code>.
    The OS

    needs squashfuse and fuse-overlayfs installed. I installed these on Easley and

    it works.</li>

    <li>Custom build and final images for containerized Spack environments fails due

    to apparently assuming that Spack already exists. See: <code>01_spack/spack_nvhpc.yaml</code>.</li>

    <li>Spack-blessed NVIDIA container fails to build due to public key error. See:
    <code>01_spack/spack_lammps.yaml</code>.</li>

    <li>

    <code>export ENROOT_MOUNT_HOME=1</code> to bind $HOME.</li>

    <li>Default flags and <code>target=zen2</code> gave LAMMPS run times of 4:44,
    while <code>target=zen2 cppflags=-O3</code>

    </li>

    <li>Running containers or non-hpc-x MPI produces warnings about <code>Unknown
    interface name</code> /

    <code>An invalid value was given for btl_tcp_if_include</code>. It appears not
    to see the Mellanox / IB correctly?</li>

    </ul>

    <h2><a id="user-content-maybe-useful" class="anchor" aria-hidden="true" href="#maybe-useful"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Maybe Useful</h2>

    <ul>

    <li><a href="https://www.nvidia.com/content/dam/en-zz/Solutions/Data-Center/tesla-product-literature/gpu-applications-catalog.pdf"
    rel="nofollow">https://www.nvidia.com/content/dam/en-zz/Solutions/Data-Center/tesla-product-literature/gpu-applications-catalog.pdf</a></li>

    <li><a href="https://docs.nvidia.com/deeplearning/frameworks/support-matrix/index.html"
    rel="nofollow">https://docs.nvidia.com/deeplearning/frameworks/support-matrix/index.html</a></li>

    <li><a href="https://docs.nvidia.com/deeplearning/dali/user-guide/docs/index.html"
    rel="nofollow">https://docs.nvidia.com/deeplearning/dali/user-guide/docs/index.html</a></li>

    <li><a href="https://secure.cci.rpi.edu/wiki/" rel="nofollow">https://secure.cci.rpi.edu/wiki/</a></li>

    </ul>

    <h2><a id="user-content-things-we-need-to-plan-for" class="anchor" aria-hidden="true"
    href="#things-we-need-to-plan-for"><span aria-hidden="true" class="octicon octicon-link"></span></a>Things
    we need to plan for</h2>

    <ul>

    <li>How and when do we decide we''re updating Nvidia Drivers / Cuda. I think we
    need to be very clear about this if we''re not going to maintain the latest and
    greatest. (we''re currently on 11.4, but 11.7 and associated drivers are available)</li>

    </ul>

    '
  stargazers_count: 0
  subscribers_count: 2
  topics: []
  updated_at: 1660835942.0
SouthernMethodistUniversity/msds_hpc:
  data_format: 2
  description: null
  filenames:
  - classes/06_2/spack_20.04_mkl.yaml
  - classes/03_2/spack.yaml
  - classes/06_2/spack_20.04_openblas.yaml
  full_name: SouthernMethodistUniversity/msds_hpc
  latest_release: null
  readme: '<h1><a id="user-content-ds-7347-high-performance-computing-hpc-and-data-science"
    class="anchor" aria-hidden="true" href="#ds-7347-high-performance-computing-hpc-and-data-science"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>DS 7347 High-Performance
    Computing (HPC) and Data Science</h1>

    <h2><a id="user-content-assignments" class="anchor" aria-hidden="true" href="#assignments"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Assignments</h2>

    <table>

    <thead>

    <tr>

    <th align="left">Key</th>

    <th align="left">Value</th>

    </tr>

    </thead>

    <tbody>

    <tr>

    <td align="left">A</td>

    <td align="left">Assignment</td>

    </tr>

    <tr>

    <td align="left">L</td>

    <td align="left">Lab</td>

    </tr>

    <tr>

    <td align="left">P</td>

    <td align="left">Project</td>

    </tr>

    </tbody>

    </table>

    <table>

    <thead>

    <tr>

    <th align="left">Assignment</th>

    <th align="left">Issued</th>

    <th align="left">Due</th>

    <th align="left">Deliverable</th>

    </tr>

    </thead>

    <tbody>

    <tr>

    <td align="left">A1</td>

    <td align="left">04-26</td>

    <td align="left">NA</td>

    <td align="left">Fork class repo.</td>

    </tr>

    <tr>

    <td align="left">A2</td>

    <td align="left">04-28</td>

    <td align="left">05-03</td>

    <td align="left"><code>assignments/assignment_02.md</code></td>

    </tr>

    <tr>

    <td align="left">A3</td>

    <td align="left">05-05</td>

    <td align="left">NA</td>

    <td align="left">Detail the CPU, GPU, memory, and hard drive for your own computer.</td>

    </tr>

    <tr>

    <td align="left">A4.1</td>

    <td align="left">05-10</td>

    <td align="left">05-17</td>

    <td align="left"><code>assignments/assignment_04.sh</code></td>

    </tr>

    <tr>

    <td align="left">L1</td>

    <td align="left">05-12</td>

    <td align="left">05-19</td>

    <td align="left"><code>assignments/lab_01.{yaml,md}</code></td>

    </tr>

    <tr>

    <td align="left">A4.2</td>

    <td align="left">05-17</td>

    <td align="left">05-24</td>

    <td align="left"><code>assignments/assignment_04.dockerfile</code></td>

    </tr>

    <tr>

    <td align="left">L2</td>

    <td align="left">05-19</td>

    <td align="left">05-26</td>

    <td align="left"><code>assignments/lab_02.{dockerfile,png,jpg}</code></td>

    </tr>

    <tr>

    <td align="left">A5.1</td>

    <td align="left">05-24</td>

    <td align="left">05-31</td>

    <td align="left"><code>assignments/assignment_05.out</code></td>

    </tr>

    <tr>

    <td align="left">P1</td>

    <td align="left">05-26</td>

    <td align="left">06-02</td>

    <td align="left"><code>project/proposal.md</code></td>

    </tr>

    <tr>

    <td align="left">L3</td>

    <td align="left">06-07</td>

    <td align="left">06-21</td>

    <td align="left"><code>assignments/lab_03.{yaml,sh,make or cmake}</code></td>

    </tr>

    <tr>

    <td align="left">P2</td>

    <td align="left">06-09</td>

    <td align="left">06-16</td>

    <td align="left">Create new GitHub repo from project template.</td>

    </tr>

    <tr>

    <td align="left">P3</td>

    <td align="left">06-16</td>

    <td align="left">06-21</td>

    <td align="left">Prototype of multi-job Slurm submit script.</td>

    </tr>

    <tr>

    <td align="left">A5.2</td>

    <td align="left">06-21</td>

    <td align="left">06-23</td>

    <td align="left"><code>assignments/assignment_05.txt</code></td>

    </tr>

    <tr>

    <td align="left">P4</td>

    <td align="left">06-23</td>

    <td align="left">06-28</td>

    <td align="left">Implement one subtask of your workflow using "easiest" installation
    path.</td>

    </tr>

    <tr>

    <td align="left">P5</td>

    <td align="left">06-30</td>

    <td align="left">NA</td>

    <td align="left">Explore various file formats for your data and compare performance.</td>

    </tr>

    <tr>

    <td align="left">P6</td>

    <td align="left">07-05</td>

    <td align="left">07-12</td>

    <td align="left">Complete non-optimized and basic workflow, reduce data or analysis
    complexity if needed.</td>

    </tr>

    <tr>

    <td align="left">P7</td>

    <td align="left">07-14</td>

    <td align="left">07-19</td>

    <td align="left">Report three targets for optimization and baseline performance</td>

    </tr>

    <tr>

    <td align="left">P8</td>

    <td align="left">07-19</td>

    <td align="left">07-28</td>

    <td align="left">Implement initial improvements for your three optimization targets</td>

    </tr>

    </tbody>

    </table>

    '
  stargazers_count: 0
  subscribers_count: 2
  topics: []
  updated_at: 1657068578.0
UO-OACISS/e4s:
  data_format: 2
  description: E4S Spack environments and container recipes
  filenames:
  - docker-recipes/runner/rhel8-aarch64/spack.yaml
  - docker-recipes/runner/ubuntu20.04-x86_64/spack.yaml
  - docker-recipes/minimal/rhel8-ppc64le/spack.yaml
  - docker-recipes/minimal/ubuntu22.04-aarch64/spack.yaml
  - docker-recipes/minimal/ubuntu20.04-aarch64/spack.yaml
  - docker-recipes/runner/ubuntu20.04-aarch64/spack.yaml
  - docker-recipes/runner/ubuntu18.04-ppc64le/spack.yaml
  - docker-recipes/minimal/ubuntu22.04-x86_64/spack.yaml
  - docker-recipes/runner/ubuntu18.04-x86_64/spack.yaml
  - docker-recipes/runner/rhel8-ppc64le/spack.yaml
  - docker-recipes/runner/rhel8-x86_64/spack.yaml
  - docker-recipes/runner/ubuntu22.04-x86_64/spack.yaml
  - docker-recipes/minimal/ubuntu20.04-ppc64le/spack.yaml
  - docker-recipes/minimal/ubuntu20.04-x86_64/spack.yaml
  - docker-recipes/minimal/rhel8-aarch64/spack.yaml
  - docker-recipes/runner/ubuntu20.04-ppc64le/spack.yaml
  - docker-recipes/minimal/ubuntu22.04-ppc64le/spack.yaml
  - docker-recipes/runner/ubuntu22.04-ppc64le/spack.yaml
  - docker-recipes/minimal/rhel8-x86_64/spack.yaml
  - docker-recipes/runner/ubuntu22.04-aarch64/spack.yaml
  full_name: UO-OACISS/e4s
  latest_release: null
  readme: '<p>This is a collection of configurations for building ECP SDK

    containers with combinations of packages, including the full

    E4S set.</p>

    <p>These are the set of stacks that are targeted for the first release:</p>

    <p><a target="_blank" rel="noopener noreferrer" href="figures/SDKdefinition1.png"><img
    src="figures/SDKdefinition1.png" alt="SDK definitions" style="max-width: 100%;"></a></p>

    <p>The configuration files for each container platform will be specified under
    each directory.  For example, the Docker configurations are under the "docker"
    subdirectory.  Each subdirectory will have a README.md file to explain how to
    build the container image for each stack.</p>

    '
  stargazers_count: 18
  subscribers_count: 6
  topics: []
  updated_at: 1644561389.0
adamqc/devcontainer:
  data_format: 2
  description: null
  filenames:
  - spack.yaml
  full_name: adamqc/devcontainer
  latest_release: null
  stargazers_count: 0
  subscribers_count: 1
  topics: []
  updated_at: 1646725990.0
alexpacheco/spackenv:
  data_format: 2
  description: 'Spack Environments '
  filenames:
  - cent8/envs/avx2/lusoft/spack.yaml
  - cent8/envs/avx/lusoft/spack.yaml
  - cent8/envs/avx512/lusoft/spack.yaml
  - cent8/envs/solhawk/spack.yaml
  - cent8/envs/x86_64/spack.yaml
  full_name: alexpacheco/spackenv
  latest_release: null
  readme: '<h1><a id="user-content-spack-environments" class="anchor" aria-hidden="true"
    href="#spack-environments"><span aria-hidden="true" class="octicon octicon-link"></span></a>SPACK
    Environments</h1>

    <p>This repo contains the environment definitions to deploy site-software on Lehigh
    University''s Research Computing resources via SPACK environments.</p>

    <h2><a id="user-content-software-deployment-for-centos-8x" class="anchor" aria-hidden="true"
    href="#software-deployment-for-centos-8x"><span aria-hidden="true" class="octicon
    octicon-link"></span></a>Software deployment for CentOS 8.x</h2>

    <p>Software is deployed using two Spack installations.</p>

    <ol>

    <li>For compilers and module environments</li>

    <li>Site software for general use</li>

    </ol>

    <h3><a id="user-content-compilers" class="anchor" aria-hidden="true" href="#compilers"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Compilers</h3>

    <p>This spack installation provides the gcc, nvhpc and cuda compilers, and lmod
    software for module management. In the future, this installation will also provide
    intel-oneapi compilers. For legacy reasons, intel@19.0.3 and intel@20.0.3 were
    installed in /share/Apps/intel with older intel compilers. This installation should
    not be used for deploying site software nor should the software provided be made
    available using the module environment.</p>

    <p>To reproduce installation</p>

    <pre><code>git clone https://github.com/alexpacheco/spackenv.git

    cd spackenv/compilers/envs/compilers

    spack env activate -d .

    spack concretize -f # optional

    spack install

    </code></pre>

    <p>The directory <code>etc/lmod</code> contains the LMOD configuration to switch
    between avx, avx2 and avx512 enabled <code>MODULEPATHS</code></p>

    <h3><a id="user-content-lu-software" class="anchor" aria-hidden="true" href="#lu-software"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>LU Software</h3>

    <p>This spack installation provides the deployed site-software on Sol and Hawk.</p>

    <p>To reproduce this installation, you need to first copy the site configuration
    files from <code>etc/spack</code> to your spack install tree. This assumes that
    SLURM and the compiler environment above is already installed. Edit the <code>packages.yaml</code>
    file to point to the location of slurm (/usr/local), rmda-core (/usr), gcc, intel,
    cuda, and nvhpc. The file <code>repo.yaml</code> is hardwired with  location of
    the lubio repository and should be changed to your location. The directory <code>templates</code>
    contains the template lua file for a few modules as defined in the <code>modules.yaml</code>
    file  and should be copied to the <code>etc</code> directory in your spack installation
    tree.</p>

    <p>On Sol, these files are available at <code>/share/Apps/lusoft/etc/spack</code>.</p>

    <h4><a id="user-content-available-environments" class="anchor" aria-hidden="true"
    href="#available-environments"><span aria-hidden="true" class="octicon octicon-link"></span></a>Available
    Environments</h4>

    <h5><a id="user-content-solhawk" class="anchor" aria-hidden="true" href="#solhawk"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>solhawk</h5>

    <p>This environment builds the entire software except the various python and r
    packages for ivybridge, haswell and skylake_avx512 architectures. This environment
    also builds the tcl environment modules that is not currently used. This should
    be build first and any new packages should be added to this environment.</p>

    <pre><code>cd spackenv/cent8/envs/solhawk

    spack env activate -d .

    spack concretize -f # optional

    spack install

    </code></pre>

    <h4><a id="user-content-avxavx2avx512" class="anchor" aria-hidden="true" href="#avxavx2avx512"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>avx/avx2/avx512</h4>

    <p>These environment builds the software stack except the various python and r
    packages for ivybridge/haswell/skylake_avx512 architectures. If software in the
    <code>solhawk</code> environment is already built, then these environments are
    only setting up the installation root for the LMOD module files <code>/share/Apps/lusoft/share/modules/lmod/{avx,avx2,avx512}</code>.
    The only reason these environments exist is due to SPACK''s inability to built
    a architecture based LMOD module tree similar to the TCL module tree.

    <em>Note</em>: If you change the path of the installation root, make sure that
    you change the corresponding path in <code>compilers/etc/SitePackage.lua</code>.</p>

    <pre><code>cd spackenv/cent8/envs/avx2/lusoft

    spack env activate -d .

    spack concretize -f # optional

    spack install

    </code></pre>

    <h4><a id="user-content-python-and-r-packages" class="anchor" aria-hidden="true"
    href="#python-and-r-packages"><span aria-hidden="true" class="octicon octicon-link"></span></a>Python
    and R packages</h4>

    <p>Rather than building module files for various python and r packages, a single
    module is created for a filesystem view of all python and r packages respectively.
    The path to the r filesystem is setup as <code>R_LIBS_SITE</code> so that any
    application such as <code>trinity</code> that requires many R packages only need
    to load the r module. If new packages added to the above environments require
    a dependent R package, then that dependency should be added to the rpoject environment
    and concretized. The python environment uses a <code>concretization: together</code>
    and may not provide the same python package as the above software environments.
    The filesystem views are hardwired as <code>/share/Apps/py_spack/3.8.6/{avx,avx2,avx512}</code>
    and <code>/share/Apps/r_spack/4.0.3/{avx,avx2,avx512}</code>.</p>

    <pre><code>cd spackenv/cent8/envs/avx/python

    spack env activate -d .

    spack concretize -f # optional

    spack install

    </code></pre>

    <pre><code>cd spackenv/cent8/envs/avx512/rproject

    spack env activate -d .

    spack concretize -f # optional

    spack install

    </code></pre>

    <h4><a id="user-content-x86_64" class="anchor" aria-hidden="true" href="#x86_64"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>x86_64</h4>

    <p>This environment builds unoptimized software such as anaconda python, gnu parallel,
    scree, tmux, etc for generic x86_64 processor.</p>

    <h2><a id="user-content-centos-7x-software" class="anchor" aria-hidden="true"
    href="#centos-7x-software"><span aria-hidden="true" class="octicon octicon-link"></span></a>CentOS
    7.x software</h2>

    <p>This just collects the various environments for building software before the
    CentOS 8.x upgrade.</p>

    '
  stargazers_count: 0
  subscribers_count: 1
  topics: []
  updated_at: 1657632897.0
arcaneframework/containers:
  data_format: 2
  description: Containers with Arcane and Alien
  filenames:
  - spack/envs/all/spack.yaml
  - spack/envs/arcane/spack.yaml
  - spack/envs/dev-tools/spack.yaml
  - spack/envs/alien/spack.yaml
  full_name: arcaneframework/containers
  latest_release: null
  readme: '<h1><a id="user-content-containers" class="anchor" aria-hidden="true" href="#containers"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>containers</h1>

    <p>Containers with Arcane and Alien</p>

    '
  stargazers_count: 0
  subscribers_count: 1
  topics: []
  updated_at: 1637878998.0
ashermancinelli/vimconfig:
  data_format: 2
  description: null
  filenames:
  - spack/spack.yaml
  full_name: ashermancinelli/vimconfig
  latest_release: null
  readme: "<h1><a id=\"user-content-vimconfig\" class=\"anchor\" aria-hidden=\"true\"\
    \ href=\"#vimconfig\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"\
    ></span></a>vimconfig</h1>\n<p>Lots and lots of different configurations for various\
    \ programs all wrapped up into one repo. Under heavy development so tread with\
    \ some caution :)</p>\n<h2><a id=\"user-content-how-to-use\" class=\"anchor\"\
    \ aria-hidden=\"true\" href=\"#how-to-use\"><span aria-hidden=\"true\" class=\"\
    octicon octicon-link\"></span></a>How to use</h2>\n<p>The top directory has a\
    \ script to deal with installation - you should pretty much only interact with\
    \ the repo through that script.\nThe help message is quite descriptive:</p>\n\
    <div class=\"highlight highlight-source-shell\"><pre>$ ./configure --h\n\n  Usage:\n\
    \n  -p <span class=\"pl-k\">&lt;</span>path<span class=\"pl-k\">&gt;</span>  \
    \         Sets install prefix. Default: /people/manc568/.local\n  -r <span class=\"\
    pl-k\">&lt;</span>path<span class=\"pl-k\">&gt;</span>           Path to RC file\
    \ <span class=\"pl-k\">for</span> given shell. Default: /qfs/people/manc568/.bashrc\n\
    \  -d                  Default installation. Installs ctags, vim, and bash\n \
    \ -s <span class=\"pl-k\">&lt;</span>pkg<span class=\"pl-k\">&gt;</span>     \
    \       Show installation script <span class=\"pl-k\">for</span> pacakge\n  -i\
    \                  One or more of the following list, separated by commas with\
    \ no spaces:\n\n       zsh\n       bash\n       ctags\n       vim\n       tmux\n\
    \       emacs\n       profiles\n       modules\n       rice\n       rice.sh\n\
    \       fresh</pre></div>\n<h2><a id=\"user-content-examples\" class=\"anchor\"\
    \ aria-hidden=\"true\" href=\"#examples\"><span aria-hidden=\"true\" class=\"\
    octicon octicon-link\"></span></a>Examples</h2>\n<p>For example, to just install\
    \ my vim configuration, you'd do:</p>\n<div class=\"highlight highlight-source-shell\"\
    ><pre>$ ./configure -i vim</pre></div>\n<p>Or to install configs for multiple\
    \ programs:</p>\n<div class=\"highlight highlight-source-shell\"><pre>$ ./configure\
    \ -i vim,ctags,tmux,emacs,bash</pre></div>\n"
  stargazers_count: 1
  subscribers_count: 1
  topics: []
  updated_at: 1641783693.0
bfovet/config:
  data_format: 2
  description: My personal configuration files
  filenames:
  - spack-environments/linux-neon20-skylake/spack.yaml
  full_name: bfovet/config
  latest_release: null
  readme: '<h1><a id="user-content-config" class="anchor" aria-hidden="true" href="#config"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>config</h1>

    '
  stargazers_count: 0
  subscribers_count: 2
  topics: []
  updated_at: 1658465316.0
buildsi/splice-experiment:
  data_format: 2
  description: Preparing for the splice experiment (notes are currently here)
  filenames:
  - manual/ref/e4s/spack.yaml
  full_name: buildsi/splice-experiment
  latest_release: null
  readme: '<h1><a id="user-content-splice-experiment" class="anchor" aria-hidden="true"
    href="#splice-experiment"><span aria-hidden="true" class="octicon octicon-link"></span></a>Splice
    Experiment</h1>

    <p>This is planning for the <a href="https://github.com/buildsi/spliced">spliced</a>
    experiment

    that we plan to run for the BUILDSI project. We will use a container base to the
    largest extent possible.

    To see our original manual setup, you can look in <a href="manual">manual</a>,
    or to read the original

    experiment plan and design, see <a href="plan.md">plan.md</a>. Note that although
    the original plan was to run this on HPC, the file-system had significant issues
    and it was entirely run in GitHub actions. For the interested user,

    examples of running scripts are provided for Singularity, Podman, and Docker,
    in the case you want to do this manually. The actual running of experiments happened
    in <a href="https://github.com/buildsi/splice-experiment-runs">this repository</a>.</p>

    <h2><a id="user-content-setup" class="anchor" aria-hidden="true" href="#setup"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Setup</h2>

    <h3><a id="user-content-1-experiment-derivation" class="anchor" aria-hidden="true"
    href="#1-experiment-derivation"><span aria-hidden="true" class="octicon octicon-link"></span></a>1.
    Experiment Derivation</h3>

    <p><em>data from this step is provided here</em></p>

    <p>To see our first experiment attempt setup, see <a href="attempts.md">attemps.md</a>
    where we tried using tests in spack for a ground truth. Ultimately we decided
    this was not good enough and we would use a set of known libraries with ABI issues
    (manually defined) in <a href="diffs">diffs</a>.</p>

    <h3><a id="user-content-2-running-experiments" class="anchor" aria-hidden="true"
    href="#2-running-experiments"><span aria-hidden="true" class="octicon octicon-link"></span></a>2.
    Running Experiments</h3>

    <p>Running experiments is easy, and automated! We use the container build alongside
    this repostiory with a Github workflow in a separate repository and then can programatically
    get results. Simply:</p>

    <ol>

    <li>Ensure this repository is pushed (up to date), as the diffs/splices come from
    here.</li>

    <li>Go to <a href="https://github.com/buildsi/splice-experiment-runs/actions">buildsi/splice-experiment-runs
    Actions</a>

    </li>

    <li>Click on the "Spliced Analysis" workflow, and then "Run Workflow"</li>

    <li>The name in the box should correspond to the main package and dependency folder
    to run.</li>

    </ol>

    <p>When you are done, you can clone the <a href="https://github.com/buildsi/splice-experiment-artifacts">artifacts
    repository</a> to manually update artifacts, or just wait for it to update overnight.
    The full analysis (with the artifacts as a git submodule) is in <a href="https://github.com/buildsi/splice-experiment-results">buildsi/splice-experiment-results</a>.</p>

    <h2><a id="user-content-changelog" class="anchor" aria-hidden="true" href="#changelog"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Changelog:</h2>

    <ul>

    <li>version 0.0.1: original version with some tweaks</li>

    <li>version 0.0.11: updating cle from its master to resolve dependency install
    bugs <a href="https://github.com/vsoch/cle/commit/b631940d5598e457533866cbc7284123c2c08ef1">commit</a>

    </li>

    <li>version 0.0.12: refactor of spliced to include diff functionality</li>

    </ul>

    '
  stargazers_count: 0
  subscribers_count: 1
  topics: []
  updated_at: 1639367380.0
buildtesters/buildtest-nersc:
  data_format: 2
  description: null
  filenames:
  - buildspecs/apps/e4s/22.05/spack.yaml
  - buildspecs/apps/e4s/22.02/spack.yaml
  full_name: buildtesters/buildtest-nersc
  latest_release: null
  readme: "<h1><a id=\"user-content-buildtest-nersc\" class=\"anchor\" aria-hidden=\"\
    true\" href=\"#buildtest-nersc\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"\
    ></span></a>buildtest-nersc</h1>\n<p>This repository contains tests for Cori and\
    \ Perlmutter using <a href=\"https://buildtest.readthedocs.io/en/devel/\" rel=\"\
    nofollow\">buildtest</a> framework. A mirror of this repository is located on\
    \ GitHub at <a href=\"https://github.com/buildtesters/buildtest-nersc\">https://github.com/buildtesters/buildtest-nersc</a>\
    \ that is public facing.</p>\n<h2><a id=\"user-content-setup\" class=\"anchor\"\
    \ aria-hidden=\"true\" href=\"#setup\"><span aria-hidden=\"true\" class=\"octicon\
    \ octicon-link\"></span></a>Setup</h2>\n<p>To get started, please <a href=\"https://docs.nersc.gov/connect/\"\
    \ rel=\"nofollow\">connect to NERSC system</a> and clone this repo and buildtest:</p>\n\
    <pre><code>git clone https://github.com/buildtesters/buildtest.git\ngit clone\
    \ https://software.nersc.gov/NERSC/buildtest-nersc.git\n</code></pre>\n<p>Note\
    \ if you don't have access to Gitlab server you may clone the mirror on Github:</p>\n\
    <pre><code>git clone https://github.com/buildtesters/buildtest-nersc.git\n</code></pre>\n\
    <p>You will need python 3.7 or higher to <a href=\"https://buildtest.readthedocs.io/en/devel/installing_buildtest.html\"\
    \ rel=\"nofollow\">install buildtest</a>, on Cori/Perlmutter this can be done\
    \ by loading <strong>python</strong>\nmodule and create a conda environment as\
    \ shown below.</p>\n<pre><code>module load python\nconda create -n buildtest\n\
    conda activate buildtest\n</code></pre>\n<p>Now let's install buildtest, assuming\
    \ you have cloned buildtest in $HOME directory source the setup script. For csh\
    \ users you need to source <strong>setup.csh</strong></p>\n<pre><code>source ~/buildtest/setup.sh\n\
    \n# csh users\nsource ~/buildtest/setup.csh\n</code></pre>\n<p>Next, navigate\
    \ to <code>buildtest-nersc</code> directory and set environment <code>BUILDTEST_CONFIGFILE</code>\
    \ to point to <a href=\"https://software.nersc.gov/NERSC/buildtest-nersc/-/blob/devel/config.yml\"\
    \ rel=\"nofollow\">config.yml</a> which is the configuration file for NERSC system.</p>\n\
    <pre><code>cd buildtest-nersc\nexport BUILDTEST_CONFIGFILE=$(pwd)/config.yml\n\
    </code></pre>\n<p>Make sure the configuration is valid, this can be done by running\
    \ the following. buildtest will validate the configuration file with the JSON\
    \ schema :</p>\n<pre><code>buildtest config validate\n</code></pre>\n<p>Please\
    \ make sure you are using tip of <a href=\"https://github.com/buildtesters/buildtest/tree/devel\"\
    >devel</a> branch of buildtest when writing tests. You should sync your local\
    \ devel branch with upstream\nfork, for more details see <a href=\"https://buildtest.readthedocs.io/en/devel/contributing/code_contribution_guide.html\"\
    \ rel=\"nofollow\">contributing guide</a>.</p>\n<p>First time around you should\
    \ discover all buildspecs this can be done via <code>buildtest buildspec find</code>.\
    \  The command below will find\nand validate all buildspecs in the <strong>buildtest-nersc</strong>\
    \ repo and load them in buildspec cache. Note that one needs to specify <code>--root</code>\
    \ to specify location where\nall buildspecs are located, we have not configured\
    \ <a href=\"https://buildtest.readthedocs.io/en/devel/configuring_buildtest/overview.html#buildspec-roots\"\
    \ rel=\"nofollow\">buildspec_root</a> in the configuration file since we don't\
    \ have a central location where this repo will reside.</p>\n<pre><code>cd buildtest-nersc\n\
    buildtest buildspec find --root buildspecs --rebuild -q\n</code></pre>\n<p>The\
    \ buildspecs are loaded in buildspec cache file (JSON) that is used by <code>buildtest\
    \ buildspec find</code> for querying cache. Subsequent runs will\nread from cache.\
    \  For more details see <a href=\"https://buildtest.readthedocs.io/en/devel/gettingstarted/buildspecs_interface.html\"\
    \ rel=\"nofollow\">buildspec interface</a>.</p>\n<h2><a id=\"user-content-building-tests\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#building-tests\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>Building Tests</h2>\n<p><strong>Note:\
    \ All tests are written in YAML using .yml extension</strong></p>\n<p>To build\
    \ tests use <code>buildtest build</code> command for example we build all tests\
    \ in <code>system</code> directory as follows</p>\n<pre><code>buildtest build\
    \ -b system/\n</code></pre>\n<p>You can specify multiple buildspecs either files\
    \ or directory via <code>-b</code> option</p>\n<pre><code>buildtest build -b slurm/partition.yml\
    \ -b slurmutils/\n</code></pre>\n<p>You can exclude a buildspec via <code>-x</code>\
    \ option this behaves same way as <code>-b</code> option so you can specify\n\
    a directory or filepath which could be absolute path, or relative path. This is\
    \ useful when\nyou want to run multiple tests grouped in directory but exclude\
    \ a few.</p>\n<pre><code>buildtest build -b slurm -x slurm/sinfo.yml\n</code></pre>\n\
    <p>buildtest can run tests via tags which can be useful when grouping tests, to\
    \ see a list of available tags you\ncan run: <code>buildtest buildspec find --tags</code></p>\n\
    <p>For instance if you want to run all <code>lustre</code> tests you can run the\
    \ following:</p>\n<pre><code>buildtest build --tags lustre\n</code></pre>\n<p>For\
    \ more details on buildtest test please see the <a href=\"https://buildtest.readthedocs.io/en/devel/getting_started.html\"\
    \ rel=\"nofollow\">buildtest tutorial</a></p>\n<h2><a id=\"user-content-tags-breakdown\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#tags-breakdown\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>Tags Breakdown</h2>\n<p>When\
    \ you write buildspecs, please make sure you attach one or more <code>tags</code>\
    \ to the test that way your test will get picked up during one of the CI checks.\
    \ Shown\nbelow is a summary of tag description</p>\n<ul>\n<li>\n<strong>daily</strong>\
    \ - this tag is used for running daily system checks using gitlab CI. Tests should\
    \ run relatively quick</li>\n<li>\n<strong>system</strong> - this tag is used\
    \ for classifying all system tests that may include: system configuration, servers,\
    \ network, cray tests. This tag should be used</li>\n<li>\n<strong>slurm</strong>\
    \ - this tag is used for slurm test that includes slurm utility check, slurm controller,\
    \ etc... This tag <strong>shouldn't</strong> be used for job submission that is\
    \ managed by <strong>jobs</strong> tag. The <code>slurm</code> tag tests should\
    \ be short running test that use a Local Executor.</li>\n<li>\n<strong>jobs</strong>\
    \ - this tag is used for testing slurm policies by submitting jobs to scheduler.</li>\n\
    <li>\n<strong>compile</strong> - this tag is used for compilation of application\
    \ (OpenMP, MPI, OpenACC, CUDA, upc, bupc, etc...)</li>\n<li>\n<strong>e4s</strong>\
    \ - this tag is used for running tests for E4S stack via <code>spack test</code>\
    \ or <a href=\"https://github.com/E4S-Project/testsuite\">E4S Testsuite</a>.</li>\n\
    <li>\n<strong>module</strong> - this tag is used for testing module system</li>\n\
    <li>\n<strong>benchmark</strong> - this tag is used for benchmark tests. This\
    \ can be application benchmarks, mini-benchmarks, kernels, etc...</li>\n</ul>\n\
    <p>You can see breakdown of tags and buildspec summary with the following commands</p>\n\
    <pre><code>buildtest buildspec summary\nbuildtest buildspec find --group-by-tags\n\
    </code></pre>\n<h2><a id=\"user-content-querying-tests\" class=\"anchor\" aria-hidden=\"\
    true\" href=\"#querying-tests\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"\
    ></span></a>Querying Tests</h2>\n<p>You can use <code>buildtest report</code>\
    \ and <code>buildtest inspect</code> to query tests. The commands differ slightly\
    \ and data is\nrepresented differently. The <code>buildtest report</code> command\
    \ will show output in tabular form and only show some of the metadata,\nif you\
    \ want to access the entire test record use <code>buildtest inspect</code> command\
    \ which displays the content in JSON format.\nFor more details on querying tests\
    \ see <a href=\"https://buildtest.readthedocs.io/en/devel/gettingstarted/query_test_report.html\"\
    \ rel=\"nofollow\">https://buildtest.readthedocs.io/en/devel/gettingstarted/query_test_report.html</a></p>\n\
    <h2><a id=\"user-content-ci-setup\" class=\"anchor\" aria-hidden=\"true\" href=\"\
    #ci-setup\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>CI\
    \ Setup</h2>\n<p>Tests are run on schedule basis with one schedule corresponding\
    \ to one gitlab job in <a href=\"https://software.nersc.gov/NERSC/buildtest-nersc/-/blob/devel/.gitlab-ci.yml\"\
    \ rel=\"nofollow\">.gitlab-ci.yml</a>. The scheduled pipelines are configured\
    \ in\n<a href=\"https://software.nersc.gov/NERSC/buildtest-nersc/-/pipeline_schedules\"\
    \ rel=\"nofollow\">https://software.nersc.gov/NERSC/buildtest-nersc/-/pipeline_schedules</a>.\
    \ Each schedule has a variable <code>TESTNAME</code> defined to control which\
    \ pipeline\nis run since we have multiple gitlab jobs. In the <code>.gitlab-ci.yml</code>\
    \ we make use of conditional rules using <a href=\"https://docs.gitlab.com/ee/ci/yaml/#onlyexcept-basic\"\
    \ rel=\"nofollow\">only</a>.</p>\n<p>The scheduled jobs are run at different intervals\
    \ (1x/day, 1x/week, etc...) at different times of day to avoid overloading the\
    \ system. The gitlab jobs\nwill run jobs based on tags, alternately some tests\
    \ may be defined by running all tests in a directory (<code>buildtest build -b\
    \ apps</code>). If you want to add a new\nscheduled job, please define a <a href=\"\
    https://software.nersc.gov/NERSC/buildtest-nersc/-/pipeline_schedules/new\" rel=\"\
    nofollow\">new schedule</a> with an appropriate time. The\n<code>target branch</code>\
    \ should be <code>devel</code> and define a unique variable used to distinguish\
    \ scheduled jobs. Next, create a job in <code>.gitlab-ci.yml</code> that references\
    \ the scheduled job and define variable <code>TESTNAME</code> in the scheduled\
    \ pipeline.</p>\n<h3><a id=\"user-content-runner-settings\" class=\"anchor\" aria-hidden=\"\
    true\" href=\"#runner-settings\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"\
    ></span></a>Runner settings</h3>\n<p>This project is using a custom runner hosted\
    \ via user <a href=\"https://iris.nersc.gov/user/93315/info\" rel=\"nofollow\"\
    >e4s</a> in order for all jobs to be run by user <em>e4s</em>. The <strong>e4s</strong>\
    \ user is a <a href=\"https://docs.nersc.gov/accounts/collaboration_accounts/\"\
    \ rel=\"nofollow\">collaboration account</a>, if you don't have access to collaboration\
    \ account, please contact the PI for project <a href=\"https://iris.nersc.gov/project/67107/info\"\
    \ rel=\"nofollow\">m3503</a> to see if you can be added to group.  If you are\
    \ logged in to Cori/Perlmutter you can run the following command to switch to\
    \ e4s user.</p>\n<pre><code>collabsu e4s\n</code></pre>\n<p>You will be prompted\
    \ to type your NERSC password for your user account.</p>\n<p>The <code>e4s</code>\
    \ user has two shell runners configured with this project. Please note that you\
    \ must be on the login node to the appropriate system to restart the runner</p>\n\
    <table>\n<thead>\n<tr>\n<th>System</th>\n<th>Runner Tag Name</th>\n</tr>\n</thead>\n\
    <tbody>\n<tr>\n<td>Cori</td>\n<td><code>tags: [cori-e4s]</code></td>\n</tr>\n\
    <tr>\n<td>Perlmutter</td>\n<td><code>tags: [perlmutter-e4s]</code></td>\n</tr>\n\
    </tbody>\n</table>\n<p>The runner can be started manually by running the following.</p>\n\
    <pre><code># Cori\nbash $HOME/cron/restart-cori.sh\n\n# Perlmutter\nbash $HOME/cron/restart-perlmutter.sh\n\
    </code></pre>\n<p>The gitlab-runner is the ECP fork runner which can be found\
    \ at <code>$HOME/nersc-ecp-staff-runner/</code>, and <code>gitlab-runner</code>\
    \ should be in <code>$PATH</code> when you login via <em>e4s</em> which is set\
    \ in <code>~/.bashrc</code> file.</p>\n<p>The runner is tied to a particular hostname\
    \ and is not run as a service, it is advisable to check/be notified when the runner\
    \ goes down. There is a cronjob setup on <code>cori01</code> to automatically\
    \ restart the gitlab runner if it goes down. Shown below is the crontab</p>\n\
    <pre><code># Crontab on Cori - cori01\ne4s@cori01:~/cron&gt; crontab -l\n0 * *\
    \ * * $HOME/cron/restart-cori.sh &gt;/dev/null  2&gt;&amp;1 \n</code></pre>\n\
    <p>All scheduled pipelines are run via <code>e4s</code> user your gitlab job must\
    \ specify the appropriate tag name. You can check registered runner at <a href=\"\
    https://software.nersc.gov/NERSC/buildtest-nersc/-/settings/ci_cd\" rel=\"nofollow\"\
    >https://software.nersc.gov/NERSC/buildtest-nersc/-/settings/ci_cd</a> under <code>Runners</code>\
    \ section. Please make sure <code>e4s</code> user has access to all the queues\
    \ required to run tests, this can be configured in <a href=\"https://iris.nersc.gov/\"\
    \ rel=\"nofollow\">iris</a>.</p>\n<h2><a id=\"user-content-integrations\" class=\"\
    anchor\" aria-hidden=\"true\" href=\"#integrations\"><span aria-hidden=\"true\"\
    \ class=\"octicon octicon-link\"></span></a>Integrations</h2>\n<p>This project\
    \ has integration with Slack to notify CI builds to <a href=\"https://hpcbuildtest.slack.com\"\
    \ rel=\"nofollow\">buildtest Slack</a> at <strong>#buildtest-nersc</strong> workspace.\
    \ The integrations can be\nfound at <a href=\"https://software.nersc.gov/NERSC/buildtest-nersc/-/settings/integrations\"\
    \ rel=\"nofollow\">https://software.nersc.gov/NERSC/buildtest-nersc/-/settings/integrations</a>.</p>\n\
    <p>This project has setup a push mirror to <a href=\"https://github.com/buildtesters/buildtest-nersc\"\
    >https://github.com/buildtesters/buildtest-nersc</a> which can be seen at <a href=\"\
    https://software.nersc.gov/NERSC/buildtest-nersc/-/settings/repository\" rel=\"\
    nofollow\">https://software.nersc.gov/NERSC/buildtest-nersc/-/settings/repository</a>\n\
    under <strong>Mirroring Repositories</strong>. If the push mirror is not setup,\
    \ please add the mirror.</p>\n<h2><a id=\"user-content-cdash\" class=\"anchor\"\
    \ aria-hidden=\"true\" href=\"#cdash\"><span aria-hidden=\"true\" class=\"octicon\
    \ octicon-link\"></span></a>CDASH</h2>\n<p>buildtest will push test results to\
    \ <a href=\"https://www.kitware.com/cdash/project/about.html\" rel=\"nofollow\"\
    >CDASH</a> server\nat <a href=\"https://my.cdash.org/index.php?project=buildtest-nersc\"\
    \ rel=\"nofollow\">https://my.cdash.org/index.php?project=buildtest-nersc</a>\
    \ using <code>buildtest cdash upload</code> command.</p>\n<h2><a id=\"user-content-contributing-guide\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#contributing-guide\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>Contributing Guide</h2>\n<p>To\
    \ contribute back you will want to make sure your buildspec is validated before\
    \ you contribute back, this could be\ndone by running test manually <code>buildtest\
    \ build</code> or see if buildspec is valid via <code>buildtest buildspec find</code>.\
    \ It\nwould be good to run your test and make sure it is working as expected,\
    \ you can view test detail using <code>buildtest inspect name &lt;testname&gt;</code>\
    \ or <code>buildtest inspect query &lt;testname&gt;</code>. For more\ndetails\
    \ on querying test please see <a href=\"https://buildtest.readthedocs.io/en/devel/gettingstarted/query_test_report.html\"\
    \ rel=\"nofollow\">https://buildtest.readthedocs.io/en/devel/gettingstarted/query_test_report.html</a>.</p>\n\
    <p>If you want to contribute your tests, please see <a href=\"https://software.nersc.gov/NERSC/buildtest-nersc/-/blob/devel/CONTRIBUTING.md\"\
    \ rel=\"nofollow\">CONTRIBUTING.md</a></p>\n<h2><a id=\"user-content-references\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#references\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>References</h2>\n<ul>\n<li>buildtest\
    \ documentation: <a href=\"https://buildtest.readthedocs.io/en/devel/\" rel=\"\
    nofollow\">https://buildtest.readthedocs.io/en/devel/</a>\n</li>\n<li>buildtest\
    \ schema docs: <a href=\"https://buildtesters.github.io/buildtest/\" rel=\"nofollow\"\
    >https://buildtesters.github.io/buildtest/</a>\n</li>\n<li>Getting Started: <a\
    \ href=\"https://buildtest.readthedocs.io/en/devel/getting_started.html\" rel=\"\
    nofollow\">https://buildtest.readthedocs.io/en/devel/getting_started.html</a>\n\
    </li>\n<li>Writing Buildspecs: <a href=\"https://buildtest.readthedocs.io/en/devel/buildspec_tutorial.html\"\
    \ rel=\"nofollow\">https://buildtest.readthedocs.io/en/devel/buildspec_tutorial.html</a>\n\
    </li>\n<li>Contributing Guide: <a href=\"https://buildtest.readthedocs.io/en/devel/contributing.html\"\
    \ rel=\"nofollow\">https://buildtest.readthedocs.io/en/devel/contributing.html</a>\n\
    </li>\n</ul>\n"
  stargazers_count: 4
  subscribers_count: 4
  topics:
  - buildtest
  updated_at: 1657142158.0
celeritas-project/celeritas:
  data_format: 2
  description: Celeritas is a new Monte Carlo transport code designed for high-performance
    simulation of high-energy physics detectors.
  filenames:
  - scripts/spack.yaml
  full_name: celeritas-project/celeritas
  latest_release: v0.1.0
  readme: "<h1><a id=\"user-content-celeritas\" class=\"anchor\" aria-hidden=\"true\"\
    \ href=\"#celeritas\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"\
    ></span></a>Celeritas</h1>\n<p>The Celeritas project implements HEP detector physics\
    \ on GPU accelerator\nhardware with the ultimate goal of supporting the massive\
    \ computational\nrequirements of LHC-HL upgrade.</p>\n<h1><a id=\"user-content-installation-and-development\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#installation-and-development\"\
    ><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Installation\
    \ and development</h1>\n<p>This project requires external dependencies to build\
    \ with full functionality.\nHowever, any combination of these requirements can\
    \ be omitted to enable\nlimited development on personal machines with fewer available\
    \ components.</p>\n<ul>\n<li>\n<a href=\"https://developer.nvidia.com/cuda-toolkit\"\
    \ rel=\"nofollow\">CUDA</a>: on-device computation</li>\n<li>an MPI implementation\
    \ (such as <a href=\"https://www.open-mpi.org\" rel=\"nofollow\">Open MPI</a>):\
    \ distributed-memory parallelism</li>\n<li>\n<a href=\"https://root.cern\" rel=\"\
    nofollow\">ROOT</a>: I/O</li>\n<li>\n<a href=\"https://github.com/nlohmann/json\"\
    >nljson</a>: simple text-based I/O for\ndiagnostics and program setup</li>\n<li>\n\
    <a href=\"https://gitlab.cern.ch/VecGeom/VecGeom\" rel=\"nofollow\">VecGeom</a>:\
    \ on-device navigation of GDML-defined detector geometry</li>\n<li>\n<a href=\"\
    https://geant4.web.cern.ch/support/download\" rel=\"nofollow\">Geant4</a>: preprocessing\
    \ physics data for a problem input</li>\n<li>\n<a href=\"https://geant4.web.cern.ch/support/download\"\
    \ rel=\"nofollow\">G4EMLOW</a>: EM physics model data</li>\n<li>\n<a href=\"http://hepmc.web.cern.ch/hepmc/\"\
    \ rel=\"nofollow\">HepMC3</a>: Event input</li>\n<li>\n<a href=\"http://swig.org\"\
    \ rel=\"nofollow\">SWIG</a>: limited set of Python wrappers for analyzing input\n\
    data</li>\n</ul>\n<p>Build/test dependencies are:</p>\n<ul>\n<li>\n<a href=\"\
    https://cmake.org\" rel=\"nofollow\">CMake</a>: build system</li>\n<li>\n<a href=\"\
    https://clang.llvm.org/docs/ClangFormat.html\" rel=\"nofollow\">clang-format</a>:\
    \ formatting enforcement</li>\n<li>\n<a href=\"https://github.com/google/googletest\"\
    >GoogleTest</a>: test harness</li>\n</ul>\n<h2><a id=\"user-content-installing-with-spack\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#installing-with-spack\"><span\
    \ aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Installing with\
    \ Spack</h2>\n<p><a href=\"https://github.com/spack/spack\">Spack</a> is an HPC-oriented\
    \ package manager that\nincludes numerous scientific packages, including those\
    \ used in HEP. An included\nSpack \"environment\" (at <code>scripts/dev/env/celeritas-{platform}.yaml</code>)\
    \ defines\nthe required prerequisites for this project.</p>\n<p>The script at\
    \ <code>scripts/dev/install-spack.sh</code> provides a \"one-button solution\"\
    \nto installing and activating the Spack prerequisites for building Celeritas.\n\
    Alternatively, you can manually perform the following steps:</p>\n<ul>\n<li>Clone\
    \ Spack following its <a href=\"https://spack.readthedocs.io/en/latest/getting_started.html\"\
    \ rel=\"nofollow\">getting started instructions</a>\n</li>\n<li>Add CUDA to your\
    \ <code>$SPACK_ROOT/etc/spack/packages.yaml</code> file</li>\n<li>Run <code>spack\
    \ env create celeritas scripts/dev/env/celeritas-linux.yaml</code> (or\nreplace\
    \ <code>linux</code> with <code>darwin</code> if running on a mac); then <code>spack\
    \ -e celeritas concretize</code> and <code>spack -e celeritas install</code>\n\
    </li>\n<li>Run and add to your startup environment profile <code>spack env activate\
    \ celeritas</code>\n</li>\n<li>Configure Celeritas by creating a build directory\
    \ and running CMake (or\n<code>ccmake</code> for an interactive prompt for configuring\
    \ options).</li>\n</ul>\n<p>An example file for a <code>packages.yaml</code> that\
    \ defines an externally installed CUDA\non a system with an NVIDIA GPU that has\
    \ architecture capability 3.5 is thus:</p>\n<div class=\"highlight highlight-source-yaml\"\
    ><pre><span class=\"pl-ent\">packages</span>:\n  <span class=\"pl-ent\">cuda</span>:\n\
    \    <span class=\"pl-ent\">paths</span>:\n      <span class=\"pl-ent\">cuda@10.2</span>:\
    \ <span class=\"pl-s\">/usr/local/cuda-10.2</span>\n    <span class=\"pl-ent\"\
    >buildable</span>: <span class=\"pl-c1\">False</span>\n  <span class=\"pl-ent\"\
    >all</span>:\n    <span class=\"pl-ent\">variants</span>: <span class=\"pl-s\"\
    >cuda_arch=35</span></pre></div>\n<h2><a id=\"user-content-configuring-and-building-celeritas\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#configuring-and-building-celeritas\"\
    ><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Configuring\
    \ and building Celeritas</h2>\n<p>To configure Celeritas, assuming the dependencies\
    \ you want are located in the\n<code>CMAKE_PREFIX_PATH</code> search path, and\
    \ other environment variables such as <code>CXX</code>\nare set, you should be\
    \ able to just run CMake and build:</p>\n<div class=\"highlight highlight-text-shell-session\"\
    ><pre>$ <span class=\"pl-s1\">mkdir build</span>\n$ <span class=\"pl-s1\"><span\
    \ class=\"pl-c1\">cd</span> build <span class=\"pl-k\">&amp;&amp;</span> cmake\
    \ ..</span>\n$ <span class=\"pl-s1\">make</span></pre></div>\n<p>Ideally you will\
    \ build Celeritas with all dependencies to gain the full\nfunctionality of the\
    \ code, but there are circumstances in which you may not\nhave all the dependencies\
    \ or features available. By default, the CMake code in\nCeleritas queries available\
    \ packages and sets several <code>CELERITAS_USE_{package}</code>\noptions based\
    \ on what it finds, so you have a good chance of successfully\nconfiguring Celeritas\
    \ on the first go. Two optional components,\n<code>CELERITAS_BUILD_&lt;DEMOS|TESTS&gt;</code>,\
    \ will error in the configure if their required\ncomponents are missing, but they\
    \ will update the CMake cache variable so that\nthe next configure will succeed\
    \ (but with that component disabled).</p>\n<p>For a slightly more advanced but\
    \ potentially simpler setup, you can use the\nCMake presets provided by Celeritas\
    \ via the <code>CMakePresets.json</code> file for CMake\n3.21 and higher:</p>\n\
    <div class=\"highlight highlight-text-shell-session\"><pre>$ <span class=\"pl-s1\"\
    >cmake --preset=default</span></pre></div>\n<p>The three main options are \"minimal\"\
    , \"default\", and \"full\", which all set\ndifferent expectations for available\
    \ dependencies.</p>\n<p>If you want to add your own set of custom options and\
    \ flags, create a\n<code>CMakeUserPresets.json</code> file or, if you are a developer,\
    \ create a preset at\n<code>scripts/cmake-presets/${HOSTNAME%%.*}.json</code>\
    \ and call <code>scripts/build.sh {preset}</code> to create the symlink, configure\
    \ the preset, build, and test. See\n<a href=\"scripts/README.md\">the scripts\
    \ readme</a> for more details.</p>\n<p>If your CMake version is too old, you may\
    \ get an unhelpful message:</p>\n<pre><code>CMake Error: Could not read presets\
    \ from celeritas: Unrecognized \"version\" field\n</code></pre>\n<p>which is just\
    \ a poor way of saying the version in the <code>CMakePresets.json</code> file\n\
    is newer than that version knows how to handle.</p>\n<h2><a id=\"user-content-commit-hooks\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#commit-hooks\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>Commit hooks</h2>\n<p>Run <code>scripts/dev/install-commit-hooks.sh</code>\
    \ to install a git post-commit hook\nthat will amend each commit with clang-format\
    \ updates if necessary.</p>\n<h2><a id=\"user-content-contributing\" class=\"\
    anchor\" aria-hidden=\"true\" href=\"#contributing\"><span aria-hidden=\"true\"\
    \ class=\"octicon octicon-link\"></span></a>Contributing</h2>\n<p>See the <a href=\"\
    https://github.com/celeritas-project/celeritas/wiki/Development\">development\
    \ wiki\npage</a> for\nguidelines and best practices for code in the project.</p>\n\
    <p>The <a href=\"https://github.com/celeritas-project/celeritas/wiki/Code-design\"\
    >code design\npage</a> outlines\nthe basic physics design philosophy and classes,\
    \ and <a href=\"https://github.com/celeritas-project/celeritas-docs/tree/master/graphs\"\
    >the layout of some\nalgorithms and\nclasses</a>\nare available on the <code>celeritas-docs</code>\
    \ repo.</p>\n<p>All submissions to the Celeritas project are automatically licensed\
    \ under the\nterms of <a href=\"COPYRIGHT\">the project copyright</a> as formalized\
    \ by the <a href=\"https://docs.github.com/en/github/site-policy/github-terms-of-service#6-contributions-under-repository-license\"\
    >GitHub terms\nof service</a>.</p>\n"
  stargazers_count: 21
  subscribers_count: 9
  topics:
  - hep
  - cuda
  - computational-physics
  - monte-carlo
  updated_at: 1660054181.0
dbkinghorn/Puget-Labs-Containers:
  data_format: 2
  description: Puget Labs container build files
  filenames:
  - quantum-espresso-amd/spack.yaml
  - lammps-amd/spack.yaml
  - namd-amd/spack.yaml
  - hmmer-amd/spack.yaml
  - gromacs-amd/spack.yaml
  - openfoam-amd/spack.yaml
  - wrf-amd/spack.yaml
  full_name: dbkinghorn/Puget-Labs-Containers
  latest_release: null
  readme: '<h1><a id="user-content-puget-labs-containers" class="anchor" aria-hidden="true"
    href="#puget-labs-containers"><span aria-hidden="true" class="octicon octicon-link"></span></a>Puget
    Labs Containers</h1>

    <p>This is a collection of container spec files used to build the images available
    on <a href="https://hub.docker.com/orgs/pugetsystems/repositories" rel="nofollow">https://hub.docker.com/orgs/pugetsystems/repositories</a></p>

    <p>Many of these images are based on performance optimized application builds
    for specific hardware targets i.e. AMD Zen3, Intel OneAPI, NVIDIA CUDA etc.</p>

    <p>These container images are the basis for some of our Scientific and Machine
    Learning benchmarks.</p>

    <p>Files included for each application include,</p>

    <ul>

    <li>Spack spec.yaml build specifications</li>

    <li>Dockerfiles (Multi-stage)</li>

    <li>Enroot container-bundle (self running) build scripts</li>

    <li>Benchmarks</li>

    <li>Usage notes</li>

    </ul>

    '
  stargazers_count: 0
  subscribers_count: 1
  topics: []
  updated_at: 1660670570.0
eic/eic-spack-cvmfs-environments:
  data_format: 2
  description: Spack environments for the Electron Ion Collider
  filenames:
  - eic-shell/spack.yaml
  full_name: eic/eic-spack-cvmfs-environments
  latest_release: null
  readme: '<h1><a id="user-content-eic-spack-environments" class="anchor" aria-hidden="true"
    href="#eic-spack-environments"><span aria-hidden="true" class="octicon octicon-link"></span></a>EIC
    Spack Environments</h1>

    <p>This repository contains <a href="https://spack.readthedocs.io/en/latest/index.html"
    rel="nofollow">Spack</a> environments for the EIC.</p>

    '
  stargazers_count: 0
  subscribers_count: 4
  topics: []
  updated_at: 1641684249.0
eth-cscs/spack-stack:
  data_format: 2
  description: fast spack builds on slow filesystem
  filenames:
  - packages/nvhpc/spack.yaml
  - packages/tools/spack.yaml
  - compilers/3-llvm/spack.yaml
  - compilers/1-gcc/spack.yaml
  - compilers/2-gcc/spack.yaml
  - packages/gcc/spack.yaml
  - packages/clang/spack.yaml
  full_name: eth-cscs/spack-stack
  latest_release: null
  readme: '<p>Bootstrap GCC, LLVM and NVHPC, and build an HPC software stack based
    on

    OpenMPI, with a few unique features:</p>

    <ol>

    <li>parallel package builds with single jobserver for all builds;</li>

    <li>avoiding relocation issues by fixing the install path to a new directory <code>/some-dir</code>
    of choice (no root access required);</li>

    <li>fast, in-memory builds.</li>

    </ol>

    <p><strong>Requirements</strong>:</p>

    <ul>

    <li><code>spack</code></li>

    <li>

    <code>bwrap</code> (when not already building inside a sandbox)</li>

    </ul>

    <p><strong>Usage</strong>:</p>

    <ol>

    <li>Copy <code>Make.user.example</code> to <code>Make.user</code> and change some
    variables.</li>

    <li>Run <code>make -j$(nproc)</code> to bootstrap compilers and packages.</li>

    <li>Run <code>make store.squashfs</code> to bundle those in a squashfs file.</li>

    <li>Run <code>make build.tar.gz</code> to create a tarball of all concrete environments
    and

    generated config files for posterity. This excludes the actual software.</li>

    </ol>

    <p><strong>Variables</strong></p>

    <p>A few variables in <code>Make.user</code>:</p>

    <ul>

    <li>

    <code>STORE</code>: where to install packages;</li>

    <li>

    <code>SPACK</code>: what <code>spack</code> to use;</li>

    <li>

    <code>SPACK_SYSTEM_CONFIG_PATH</code>: path to spack config dir (e.g. <a href="config/hohgant">config/hohgant</a>).</li>

    <li>

    <code>SANDBOX</code>: run commands in a sandbox (e.g. bubblewrap), see <code>Make.user.example</code>
    for details.</li>

    <li>

    <code>SPACK_INSTALL_FLAGS</code>: specify more install flags, like <code>--verbose</code>.</li>

    </ul>

    <p><strong>Reproducibility</strong></p>

    <p>When building on a production system instead of in a sandbox, there''s a few
    things to

    do to improve reproducibility:</p>

    <ol>

    <li>Always run <code>make</code> inside a clean environment:

    <pre><code>env --ignore-environment PATH=/usr/bin:/bin make

    </code></pre>

    </li>

    <li>Update <code>Make.user</code> to hide your home folder so that no user config
    is picked up:

    <pre><code>SANDBOX := bwrap --tmpfs ~ ...

    </code></pre>

    </li>

    <li>Set <code>LC_ALL</code>, <code>TZ</code> and <code>SOURCE_DATE_EPOCH</code>
    to something fixed in <code>Make.user</code>.</li>

    </ol>

    <p><strong>Unprivileged mounts</strong></p>

    <p>The squashfs file can then be mounted using <a href="https://github.com/eth-cscs/squashfs-mount">squashfs-mount</a>
    or <code>squashfuse</code></p>

    '
  stargazers_count: 0
  subscribers_count: 2
  topics: []
  updated_at: 1658141772.0
eugeneswalker/facility-spack:
  data_format: 2
  description: null
  filenames:
  - oci/mvapich2/spack.yaml
  - uo-containers/22.08/prep/cuda-noex/spack.yaml
  - crusher/develop/PrgEnv-gnu/spack.yaml
  - uo-containers/22.05/production/base/aarch64-cuda.spack.yaml
  - uo-containers/22.05/archives/spack-cuda-external.spack.yaml
  - uo-containers/22.05/components/e4s-cuda-builder.spack.yaml
  - crusher/22.02/PrgEnv-gnu/spack.yaml
  - crusher/22.02/PrgEnv-amd/spack.yaml
  - uo-containers/22.08/prep/rocm/spack.yaml
  - uo-containers/22.05/production/e4s-22.05-cuda-ppc64le.spack.yaml
  - perlmutter/22.05/PrgEnv-gnu/failures/spack.yaml
  - uo-containers/22.05/production/base/ppc64le-cuda.spack.yaml
  - crusher/22.05/PrgEnv-amd/failures/spack.yaml
  - uo-containers/22.05/archives/spack-cpu-ppc64le.spack.yaml
  - uo-containers/22.05/components/e4s-cpu-builder.spack.yaml
  - arcticus/22.02/spack.yaml
  - uo-containers/22.05/production/save/e4s-22.05-oneapi.spack.yaml
  - uo-containers/22.05/production/base/amd64-cuda.spack.yaml
  - uo-containers/22.05/production/e4s-22.05-cuda.spack.yaml
  - uo-containers/22.05/production/base/amd64-rocm.spack.yaml
  - uo-containers/22.05/components/e4s-cuda-builder-noextern.spack.yaml
  - uo-containers/22.08/prep/rocm-noex/spack.yaml
  - uo-containers/22.05/components/e4s-cpu-builder-ppc64le.spack.yaml
  - arcticus/22.05/spack.yaml
  - crusher/22.05/PrgEnv-cray/failures/spack.yaml
  - applications/exago/crusher/spack.yaml
  - uo-containers/22.05/components/e4s-oneapi-builder.spack.yaml
  - uo-containers/22.08/prep/cuda/spack.yaml
  - uo-containers/22.05/archives/spack-rocm-external.spack.yaml
  - uo-containers/22.05/production/e4s-22.05-oneapi.spack.yaml
  - perlmutter/22.05/PrgEnv-gnu/spack.yaml
  - uo-containers/22.05/components/e4s-rocm-builder.spack.yaml
  - crusher/22.02/PrgEnv-cray/spack.yaml
  - uo-containers/22.05/production/base/amd64-oneapi.spack.yaml
  - uo-containers/22.05/failed-oneapi/spack.yaml
  - crusher/22.05/PrgEnv-amd/spack.yaml
  - crusher/22.05/PrgEnv-cray/spack.yaml
  - perlmutter/22.05/mvapich2-3.0a/spack.yaml
  - arcticus/22.05/failures/spack.yaml
  - uo-containers/22.05/components/e4s-rocm-builder-noextern.spack.yaml
  - crusher/22.05/PrgEnv-gnu/spack.yaml
  - uo-containers/22.05/components/e4s-cuda-builder-ppc64le-noextern.spack.yaml
  - crusher/22.05/mvapich2/spack.yaml
  - uo-containers/22.05/components/e4s-cuda-builder-ppc64le.spack.yaml
  - bridges2/22.05/openmpi-4.1.1-gcc8.3.1/spack.yaml
  - uo-containers/22.05/components/save/e4s-oneapi-builder.spack.yaml
  - perlmutter/22.05/PrgEnv-nvhpc/spack.yaml
  - uo-containers/22.08/prep/cuda-ppc64le-noex/spack.yaml
  - uo-containers/22.05/production/e4s-22.05-rocm.spack.yaml
  - oneapi/ubuntu20.04-runner-x86_64-oneapi/spack.yaml
  - uo-containers/22.08/prep/cuda-ppc64le/spack.yaml
  - frontera/22.05/spack.yaml
  full_name: eugeneswalker/facility-spack
  latest_release: null
  stargazers_count: 0
  subscribers_count: 1
  topics: []
  updated_at: 1655395315.0
flux-framework/flux-research-artifacts:
  data_format: 2
  description: Collection of Research Artifacts from Papers Involving Flux
  filenames:
  - 2021-IJHPCA/spack-env/spack.yaml
  full_name: flux-framework/flux-research-artifacts
  latest_release: v0.2
  readme: '<h1><a id="user-content-flux-research-artifacts" class="anchor" aria-hidden="true"
    href="#flux-research-artifacts"><span aria-hidden="true" class="octicon octicon-link"></span></a>flux-research-artifacts</h1>

    <p>Collection of Research Artifacts from Papers Involving Flux</p>

    '
  stargazers_count: 0
  subscribers_count: 8
  topics: []
  updated_at: 1628308190.0
giltirn/mochi-margo:
  data_format: 2
  description: null
  filenames:
  - spack.yaml
  full_name: giltirn/mochi-margo
  latest_release: null
  readme: "<h1><a id=\"user-content-margo\" class=\"anchor\" aria-hidden=\"true\"\
    \ href=\"#margo\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Margo</h1>\n\
    <p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/mochi-hpc/mochi-margo/actions/workflows/test.yml/badge.svg?branch=main\"\
    ><img src=\"https://github.com/mochi-hpc/mochi-margo/actions/workflows/test.yml/badge.svg?branch=main\"\
    \ alt=\"\" style=\"max-width: 100%;\"></a>\n<a href=\"https://codecov.io/gh/mochi-hpc/mochi-margo\"\
    \ rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/c64ae5809121f4158ced0cf46c628aca60e6db908b2639f6758b0595a6fdd779/68747470733a2f2f636f6465636f762e696f2f67682f6d6f6368692d6870632f6d6f6368692d6d6172676f2f6272616e63682f6d61696e2f67726170682f62616467652e737667\"\
    \ alt=\"codecov\" data-canonical-src=\"https://codecov.io/gh/mochi-hpc/mochi-margo/branch/main/graph/badge.svg\"\
    \ style=\"max-width: 100%;\"></a></p>\n<p>Margo provides Argobots-aware bindings\
    \ to the Mercury RPC library.</p>\n<p>Mercury (<a href=\"https://mercury-hpc.github.io/\"\
    \ rel=\"nofollow\">https://mercury-hpc.github.io/</a>) is a remote procedure call\n\
    library optimized for use in HPC environments.  Its native API presents a\ncallback-oriented\
    \ interface to manage asynchronous operation.  Argobots\n(<a href=\"https://www.argobots.org/\"\
    \ rel=\"nofollow\">https://www.argobots.org/</a>) is a user-level threading package.</p>\n\
    <p>Margo combines Mercury and Argobots to simplify development of distributed\n\
    services.  Mercury operations are presented as conventional blocking\noperations,\
    \ and RPC handlers are presented as sequential threads.  This\nconfiguration enables\
    \ high degree of concurrency while hiding the\ncomplexity associated with asynchronous\
    \ communication progress and callback\nmanagement.</p>\n<p>Internally, Margo suspends\
    \ callers after issuing a Mercury operation, and\nautomatically resumes them when\
    \ the operation completes.  This allows\nother concurrent user-level threads to\
    \ make progress while Mercury\noperations are in flight without consuming operating\
    \ system threads.\nThe goal of this design is to combine the performance advantages\
    \ of\nMercury's native event-driven execution model with the progamming\nsimplicity\
    \ of a multi-threaded execution model.</p>\n<p>A companion library called abt-io\
    \ provides similar wrappers for POSIX I/O\nfunctions: <a href=\"https://github.com/mochi-hpc/mochi-abt-io\"\
    >https://github.com/mochi-hpc/mochi-abt-io</a></p>\n<p>Note that Margo should\
    \ be compatible with any Mercury network\ntransport (NA plugin).  The documentation\
    \ assumes the use of\nthe NA SM (shared memory) plugin that is built into Mercury\
    \ for\nsimplicity.  This plugin is only valid for communication between\nprocesses\
    \ on a single node.  See <a href=\"##using-margo-with-other-mercury-na-plugins\"\
    >Using Margo with other Mercury NA\nplugins</a> for information\non other configuration\
    \ options.</p>\n<h2><a id=\"user-content-spack\" class=\"anchor\" aria-hidden=\"\
    true\" href=\"#spack\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"\
    ></span></a>Spack</h2>\n<p>The simplest way to install Margo is by installing\
    \ the \"mochi-margo\" package\nin spack (<a href=\"https://spack.io/\" rel=\"\
    nofollow\">https://spack.io/</a>).</p>\n<h2><a id=\"user-content-dependencies\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#dependencies\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>Dependencies</h2>\n<ul>\n<li>mercury\
    \  (git clone --recurse-submodules <a href=\"https://github.com/mercury-hpc/mercury.git\"\
    >https://github.com/mercury-hpc/mercury.git</a>)</li>\n<li>argobots (git clone\
    \ <a href=\"https://github.com/pmodels/argobots.git\">https://github.com/pmodels/argobots.git</a>)</li>\n\
    </ul>\n<h3><a id=\"user-content-recommended-mercury-build-options\" class=\"anchor\"\
    \ aria-hidden=\"true\" href=\"#recommended-mercury-build-options\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>Recommended Mercury build options</h3>\n\
    <ul>\n<li>Mercury must be compiled with -DMERCURY_USE_BOOST_PP:BOOL=ON to enable\
    \ the\nBoost preprocessor macros for encoding.</li>\n<li>Mercury should be compiled\
    \ with -DMERCURY_USE_SELF_FORWARD:BOOL=ON in order to enable\nfast execution path\
    \ for cases in which a Mercury service is linked into the same\nexecutable as\
    \ the client</li>\n</ul>\n<p>Example Mercury compilation:</p>\n<pre><code>mkdir\
    \ build\ncd build\ncmake -DMERCURY_USE_SELF_FORWARD:BOOL=ON \\\n -DBUILD_TESTING:BOOL=ON\
    \ -DMERCURY_USE_BOOST_PP:BOOL=ON \\\n -DCMAKE_INSTALL_PREFIX=/home/pcarns/working/install\
    \ \\\n -DBUILD_SHARED_LIBS:BOOL=ON -DCMAKE_BUILD_TYPE:STRING=Debug ../\n</code></pre>\n\
    <h2><a id=\"user-content-building\" class=\"anchor\" aria-hidden=\"true\" href=\"\
    #building\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Building</h2>\n\
    <p>Example configuration:</p>\n<pre><code>../configure --prefix=/home/pcarns/working/install\
    \ \\\n    PKG_CONFIG_PATH=/home/pcarns/working/install/lib/pkgconfig \\\n    CFLAGS=\"\
    -g -Wall\"\n</code></pre>\n<h2><a id=\"user-content-running-examples\" class=\"\
    anchor\" aria-hidden=\"true\" href=\"#running-examples\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>Running examples</h2>\n<p>The\
    \ examples subdirectory contains:</p>\n<ul>\n<li>margo-example-client.c: an example\
    \ client</li>\n<li>margo-example-server.c: an example server</li>\n<li>my-rpc.[ch]:\
    \ an example RPC definition</li>\n</ul>\n<p>The following example shows how to\
    \ execute them.  Note that when the server starts it will display the address\
    \ that the client can use to connect to it.</p>\n<pre><code>$ examples/margo-example-server\
    \ na+sm://\n# accepting RPCs on address \"na+sm://13367/0\"\nGot RPC request with\
    \ input_val: 0\nGot RPC request with input_val: 1\nGot RPC request with input_val:\
    \ 2\nGot RPC request with input_val: 3\nGot RPC request to shutdown\n\n$ examples/margo-example-client\
    \ na+sm://13367/0\nULT [0] running.\nULT [1] running.\nULT [2] running.\nULT [3]\
    \ running.\nGot response ret: 0\nULT [0] done.\nGot response ret: 0\nULT [1] done.\n\
    Got response ret: 0\nULT [2] done.\nGot response ret: 0\nULT [3] done.\n</code></pre>\n\
    <p>The client will issue 4 concurrent RPCs to the server and wait for them to\n\
    complete.</p>\n<h2><a id=\"user-content-running-tests\" class=\"anchor\" aria-hidden=\"\
    true\" href=\"#running-tests\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"\
    ></span></a>Running tests</h2>\n<p><code>make check</code></p>\n<h2><a id=\"user-content-using-margo-with-the-other-na-plugins\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#using-margo-with-the-other-na-plugins\"\
    ><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Using Margo\
    \ with the other NA plugins</h2>\n<p>See the <a href=\"http://mercury-hpc.github.io/documentation/\"\
    \ rel=\"nofollow\">Mercury\ndocumentation</a> for details.\nMargo is compatible\
    \ with any Mercury transport and uses the same address\nformat.</p>\n<h2><a id=\"\
    user-content-instrumentation\" class=\"anchor\" aria-hidden=\"true\" href=\"#instrumentation\"\
    ><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Instrumentation</h2>\n\
    <p>See the <a href=\"doc/instrumentation.md\">Instrumentation documentation</a>\
    \ for\ninformation on how to extract diagnostic instrumentation from Margo.</p>\n\
    <h2><a id=\"user-content-debugging\" class=\"anchor\" aria-hidden=\"true\" href=\"\
    #debugging\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Debugging</h2>\n\
    <p>See the <a href=\"doc/debugging.md\">Debugging documentation</a> for Margo\
    \ debugging\nfeatures and strategies.</p>\n<h2><a id=\"user-content-design-details\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#design-details\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>Design details</h2>\n<p><a target=\"\
    _blank\" rel=\"noopener noreferrer\" href=\"doc/fig/margo-diagram.png\"><img src=\"\
    doc/fig/margo-diagram.png\" alt=\"Margo architecture\" style=\"max-width: 100%;\"\
    ></a></p>\n<p>Margo provides Argobots-aware wrappers to common Mercury library\
    \ functions\nlike HG_Forward(), HG_Addr_lookup(), and HG_Bulk_transfer().  The\
    \ wrappers\nhave the same arguments as their native Mercury counterparts except\
    \ that no\ncallback function is specified.  Each function blocks until the operation\n\
    is complete.  The above diagram illustrates a typical control flow.</p>\n<p>Margo\
    \ launches a long-running user-level thread internally to drive\nprogress on Mercury\
    \ and execute Mercury callback functions (labeled\n<code>__margo_progress()</code>\
    \ above).  This thread can be assigned to a\ndedicated Argobots execution stream\
    \ (i.e., an operating system thread)\nto drive network progress with a dedicated\
    \ core.  Otherwise it will be\nautomatically scheduled when the caller's execution\
    \ stream is blocked\nwaiting for network events as shown in the above diagram.</p>\n\
    <p>Argobots eventual constructs are used to suspend and resume user-level\nthreads\
    \ while Mercury operations are in flight.</p>\n<p>Margo allows several different\
    \ threading/multicore configurations:</p>\n<ul>\n<li>The progress loop can run\
    \ on a dedicated operating system thread or not</li>\n<li>Multiple Margo instances\
    \ (and thus progress loops) can be\nexecuted on different operating system threads</li>\n\
    <li>(for servers) a single Margo instance can launch RPC handlers\non different\
    \ operating system threads</li>\n</ul>\n"
  stargazers_count: 0
  subscribers_count: 1
  topics: []
  updated_at: 1654705049.0
haampie/spack-pgo-lto-environment:
  data_format: 2
  description: Enable PGO and LTO in Spack software stacks
  filenames:
  - spack.yaml
  full_name: haampie/spack-pgo-lto-environment
  latest_release: null
  stargazers_count: 0
  subscribers_count: 1
  topics: []
  updated_at: 1653473825.0
hariharan-devarajan/brahma:
  data_format: 2
  description: Interceptor library for I/O calls using Gotcha
  filenames:
  - dependency/spack.yaml
  full_name: hariharan-devarajan/brahma
  latest_release: null
  readme: '<h1><a id="user-content-brahma" class="anchor" aria-hidden="true" href="#brahma"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Brahma</h1>

    <p>Interceptor library for I/O calls using Gotcha</p>

    '
  stargazers_count: 0
  subscribers_count: 1
  topics: []
  updated_at: 1659995517.0
hariharan-devarajan/tailorfs:
  data_format: 2
  description: null
  filenames:
  - dependency/spack.yaml
  full_name: hariharan-devarajan/tailorfs
  latest_release: null
  readme: ''
  stargazers_count: 0
  subscribers_count: 1
  topics: []
  updated_at: 1656016375.0
hepnos/HEPnOS-ICARUS-Benchmark:
  data_format: 2
  description: A HEPnOS benchmark aimed at investigating performance issues with the
    ICARUS application access pattern.
  filenames:
  - spack.yaml
  full_name: hepnos/HEPnOS-ICARUS-Benchmark
  latest_release: null
  stargazers_count: 0
  subscribers_count: 1
  topics: []
  updated_at: 1659444215.0
key4hep/key4hep-spack:
  data_format: 2
  description: A Spack recipe repository of Key4hep software.
  filenames:
  - environments/key4hep-release/spack.yaml
  - environments/geant4-data-share/spack.yaml
  - environments/key4hep-nightlies/spack.yaml
  - environments/key4hep-desy-release/spack.yaml
  - environments/contrib-compilers/spack.yaml
  - environments/key4hep-nightlies-clang/spack.yaml
  - environments/key4hep-release-user/spack.yaml
  - environments/key4hep-ci/spack.yaml
  full_name: key4hep/key4hep-spack
  latest_release: '2021-10-29'
  readme: '<h1><a id="user-content-spack-package-repo-for-key4hep-software-packaging"
    class="anchor" aria-hidden="true" href="#spack-package-repo-for-key4hep-software-packaging"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>

    <a href="https://github.com/spack/spack">Spack</a> package repo for Key4HEP software
    packaging</h1>

    <p>This repository holds a set of Spack recipes for key4hep software. It grew
    out of <a href="https://github.com/HSF/hep-spack">https://github.com/HSF/hep-spack</a>,
    and many recipes habe been included in the upstream spack repostiory.</p>

    <p>Consult the <a href="https://spack.readthedocs.io/en/latest/" rel="nofollow">spack
    documentation</a> and the <a href="https://cern.ch/key4hep" rel="nofollow">key4hep
    documentation website</a> for more details.</p>

    <h3><a id="user-content-repository-contents" class="anchor" aria-hidden="true"
    href="#repository-contents"><span aria-hidden="true" class="octicon octicon-link"></span></a>Repository
    Contents</h3>

    <p>Apart from the recipes for key4hep packages in the folder <code>packages</code>,
    the repository contains some <code>scripts</code> used for publishing on cvmfs,
    and <code>config</code> files for spack.</p>

    <h3><a id="user-content-central-installations" class="anchor" aria-hidden="true"
    href="#central-installations"><span aria-hidden="true" class="octicon octicon-link"></span></a>Central
    Installations</h3>

    <p>Installations of the software stack can be found under <code>/cvmfs/sw.hsf.org/</code>,
    see:</p>

    <p><a href="https://key4hep.github.io/key4hep-doc/setup-and-getting-started/README.html"
    rel="nofollow">https://key4hep.github.io/key4hep-doc/setup-and-getting-started/README.html</a></p>

    '
  stargazers_count: 9
  subscribers_count: 9
  topics: []
  updated_at: 1657179516.0
laristra/ristra_spackages:
  data_format: 2
  description: 'A mirror of Ristra''s internal gitlab repository. '
  filenames:
  - .gitlab-ci/env/root-build/spack.yaml
  full_name: laristra/ristra_spackages
  latest_release: null
  readme: '<h1><a id="user-content-ristra-spackages" class="anchor" aria-hidden="true"
    href="#ristra-spackages"><span aria-hidden="true" class="octicon octicon-link"></span></a>Ristra
    Spackages</h1>

    <p>This repository contains the custom spackage files for the repos in laristra
    family.</p>

    <h2><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Basic Usage</h2>

    <p>We assume the user wish to work in the home directory and already have a spack
    instance setup.  The minimum required version of spack is 0.15.2.</p>

    <p>To get the content of this repo</p>

    <pre><code>$ git clone git@gitlab.lanl.gov:laristra/ristra_spackages.git

    </code></pre>

    <p>To use the custom spackage files with your spack</p>

    <pre><code>$ spack repo add ristra_spackages/spack-repo

    ==&gt; Added repo with namespace ''lanl_ristra''.


    $ spack repo list

    ==&gt; 2 package repositories.

    lanl_ristra        /home/&lt;user&gt;/ristra_spackages/spack-repo

    builtin            /home/&lt;user&gt;/spack/var/spack/repos/builtin

    </code></pre>

    <p>[Optional]

    To ensure you have this custom repo in your spack all the time, move the <code>repos.yaml</code>
    into your spack config folder</p>

    <pre><code>$ mv /home/&lt;user&gt;/.spack/linux/repos.yaml /home/&lt;user&gt;/spack/etc/spack/

    </code></pre>

    <p>Please see the <a href="https://spack.readthedocs.io/en/latest/configuration.html"
    rel="nofollow">Spack documentation</a> for more detailed info.</p>

    '
  stargazers_count: 0
  subscribers_count: 3
  topics: []
  updated_at: 1649449003.0
mfem/mfem:
  data_format: 2
  description: Lightweight, general, scalable C++ library for finite element methods
  filenames:
  - config/docker/spack.yaml
  full_name: mfem/mfem
  latest_release: v4.4
  readme: "<pre><code>                Finite Element Discretization Library\n    \
    \                           __\n                   _ __ ___   / _|  ___  _ __\
    \ ___\n                  | '_ ` _ \\ | |_  / _ \\| '_ ` _ \\\n               \
    \   | | | | | ||  _||  __/| | | | | |\n                  |_| |_| |_||_|   \\___||_|\
    \ |_| |_|\n\n                           https://mfem.org\n</code></pre>\n<p><a\
    \ href=\"https://mfem.org\" rel=\"nofollow\">MFEM</a> is a modular parallel C++\
    \ library for finite element\nmethods. Its goal is to enable high-performance\
    \ scalable finite element\ndiscretization research and application development\
    \ on a wide variety of\nplatforms, ranging from laptops to supercomputers.</p>\n\
    <p>We welcome contributions and feedback from the community. Please see the file\n\
    <a href=\"CONTRIBUTING.md\">CONTRIBUTING.md</a> for additional details about our\
    \ development\nprocess.</p>\n<ul>\n<li>\n<p>For building instructions, see the\
    \ file <a href=\"INSTALL\">INSTALL</a>, or type \"make help\".</p>\n</li>\n<li>\n\
    <p>Copyright and licensing information can be found in files <a href=\"LICENSE\"\
    >LICENSE</a> and <a href=\"NOTICE\">NOTICE</a>.</p>\n</li>\n<li>\n<p>The best\
    \ starting point for new users interested in MFEM's features is to\nreview the\
    \ examples and miniapps at <a href=\"https://mfem.org/examples\" rel=\"nofollow\"\
    >https://mfem.org/examples</a>.</p>\n</li>\n<li>\n<p>Instructions for learning\
    \ with Docker are in <a href=\"config/docker\">config/docker</a>.</p>\n</li>\n\
    </ul>\n<p>Conceptually, MFEM can be viewed as a finite element toolbox that provides\
    \ the\nbuilding blocks for developing finite element algorithms in a manner similar\
    \ to\nthat of MATLAB for linear algebra methods. In particular, MFEM provides\
    \ support\nfor arbitrary high-order H1-conforming, discontinuous (L2), H(div)-conforming,\n\
    H(curl)-conforming and NURBS finite element spaces in 2D and 3D, as well as many\n\
    bilinear, linear and nonlinear forms defined on them. It enables the quick\nprototyping\
    \ of various finite element discretizations, including Galerkin\nmethods, mixed\
    \ finite elements, Discontinuous Galerkin (DG), isogeometric\nanalysis, hybridization\
    \ and Discontinuous Petrov-Galerkin (DPG) approaches.</p>\n<p>MFEM includes classes\
    \ for dealing with a wide range of mesh types: triangular,\nquadrilateral, tetrahedral\
    \ and hexahedral, as well as surface and topologically\nperiodical meshes. It\
    \ has general support for mesh refinement, including local\nconforming and non-conforming\
    \ (AMR) adaptive refinement. Arbitrary element\ntransformations, allowing for\
    \ high-order mesh elements with curved boundaries,\nare also supported.</p>\n\
    <p>When used as a \"finite element to linear algebra translator\", MFEM can take\
    \ a\nproblem described in terms of finite element-type objects, and produce the\n\
    corresponding linear algebra vectors and fully or partially assembled operators,\n\
    e.g. in the form of global sparse matrices or matrix-free operators. The library\n\
    includes simple smoothers and Krylov solvers, such as PCG, MINRES and GMRES, as\n\
    well as support for sequential sparse direct solvers from the SuiteSparse\nlibrary.\
    \ Nonlinear solvers (the Newton method), eigensolvers (LOBPCG), and\nseveral explicit\
    \ and implicit Runge-Kutta time integrators are also available.</p>\n<p>MFEM supports\
    \ MPI-based parallelism throughout the library, and can readily be\nused as a\
    \ scalable unstructured finite element problem generator. Starting with\nversion\
    \ 4.0, MFEM offers support for GPU acceleration, and programming models,\nsuch\
    \ as CUDA, HIP, OCCA, RAJA and OpenMP. MFEM-based applications require\nminimal\
    \ changes to switch from a serial to a highly-performant MPI-parallel\nversion\
    \ of the code, where they can take advantage of the integrated linear\nsolvers\
    \ from the hypre library. Comprehensive support for other external\npackages,\
    \ e.g. PETSc, SUNDIALS and libCEED is also included, giving access to\nadditional\
    \ linear and nonlinear solvers, preconditioners, time integrators, etc.</p>\n\
    <p>For examples of using MFEM, see the <a href=\"examples\">examples/</a> and\
    \ <a href=\"miniapps\">miniapps/</a>\ndirectories, as well as the OpenGL visualization\
    \ tool GLVis which is available\nat <a href=\"https://glvis.org\" rel=\"nofollow\"\
    >https://glvis.org</a>.</p>\n<h2><a id=\"user-content-license\" class=\"anchor\"\
    \ aria-hidden=\"true\" href=\"#license\"><span aria-hidden=\"true\" class=\"octicon\
    \ octicon-link\"></span></a>License</h2>\n<p>MFEM is distributed under the terms\
    \ of the BSD-3 license. All new contributions\nmust be made under this license.\
    \ See <a href=\"LICENSE\">LICENSE</a> and <a href=\"NOTICE\">NOTICE</a> for\n\
    details.</p>\n<p>SPDX-License-Identifier: BSD-3-Clause <br>\nLLNL Release Number:\
    \ LLNL-CODE-806117 <br>\nDOI: 10.11578/dc.20171025.1248</p>\n"
  stargazers_count: 985
  subscribers_count: 117
  topics:
  - finite-elements
  - high-order
  - high-performance-computing
  - parallel-computing
  - amr
  - computational-science
  - fem
  - scientific-computing
  - hpc
  - math-physics
  - radiuss
  updated_at: 1661316352.0
mochi-hpc/mobject:
  data_format: 2
  description: Mobject is a prototype Mochi object storage system based on RADOS
  filenames:
  - spack.yaml
  full_name: mochi-hpc/mobject
  latest_release: v0.6.1
  readme: ''
  stargazers_count: 0
  subscribers_count: 6
  topics: []
  updated_at: 1640785210.0
mochi-hpc/mochi-bedrock:
  data_format: 2
  description: Mochi bootstrapping service.
  filenames:
  - spack.yaml
  full_name: mochi-hpc/mochi-bedrock
  latest_release: v0.5.2
  readme: '<h1><a id="user-content-bedrock" class="anchor" aria-hidden="true" href="#bedrock"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Bedrock</h1>

    <p>Bedrock is Mochi''s service bootstrapping mechanism.

    For documentations and tutorials, please see

    <a href="https://mochi.readthedocs.io/en/latest/bedrock.html" rel="nofollow">here</a>.</p>

    '
  stargazers_count: 0
  subscribers_count: 4
  topics: []
  updated_at: 1640527359.0
mochi-hpc/mochi-colza:
  data_format: 2
  description: Mochi-based staging service for in situ analysis and visualization
  filenames:
  - spack.yaml
  full_name: mochi-hpc/mochi-colza
  latest_release: v0.2.1
  readme: ''
  stargazers_count: 0
  subscribers_count: 4
  topics: []
  updated_at: 1640788783.0
mochi-hpc/mochi-margo:
  data_format: 2
  description: Argobots bindings for the Mercury RPC library
  filenames:
  - spack.yaml
  full_name: mochi-hpc/mochi-margo
  latest_release: v0.9.10
  readme: "<h1><a id=\"user-content-margo\" class=\"anchor\" aria-hidden=\"true\"\
    \ href=\"#margo\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Margo</h1>\n\
    <p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/mochi-hpc/mochi-margo/actions/workflows/test.yml/badge.svg?branch=main\"\
    ><img src=\"https://github.com/mochi-hpc/mochi-margo/actions/workflows/test.yml/badge.svg?branch=main\"\
    \ alt=\"\" style=\"max-width: 100%;\"></a>\n<a href=\"https://codecov.io/gh/mochi-hpc/mochi-margo\"\
    \ rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/c64ae5809121f4158ced0cf46c628aca60e6db908b2639f6758b0595a6fdd779/68747470733a2f2f636f6465636f762e696f2f67682f6d6f6368692d6870632f6d6f6368692d6d6172676f2f6272616e63682f6d61696e2f67726170682f62616467652e737667\"\
    \ alt=\"codecov\" data-canonical-src=\"https://codecov.io/gh/mochi-hpc/mochi-margo/branch/main/graph/badge.svg\"\
    \ style=\"max-width: 100%;\"></a></p>\n<p>Margo provides Argobots-aware bindings\
    \ to the Mercury RPC library.</p>\n<p>Mercury (<a href=\"https://mercury-hpc.github.io/\"\
    \ rel=\"nofollow\">https://mercury-hpc.github.io/</a>) is a remote procedure call\n\
    library optimized for use in HPC environments.  Its native API presents a\ncallback-oriented\
    \ interface to manage asynchronous operation.  Argobots\n(<a href=\"https://www.argobots.org/\"\
    \ rel=\"nofollow\">https://www.argobots.org/</a>) is a user-level threading package.</p>\n\
    <p>Margo combines Mercury and Argobots to simplify development of distributed\n\
    services.  Mercury operations are presented as conventional blocking\noperations,\
    \ and RPC handlers are presented as sequential threads.  This\nconfiguration enables\
    \ high degree of concurrency while hiding the\ncomplexity associated with asynchronous\
    \ communication progress and callback\nmanagement.</p>\n<p>Internally, Margo suspends\
    \ callers after issuing a Mercury operation, and\nautomatically resumes them when\
    \ the operation completes.  This allows\nother concurrent user-level threads to\
    \ make progress while Mercury\noperations are in flight without consuming operating\
    \ system threads.\nThe goal of this design is to combine the performance advantages\
    \ of\nMercury's native event-driven execution model with the progamming\nsimplicity\
    \ of a multi-threaded execution model.</p>\n<p>A companion library called abt-io\
    \ provides similar wrappers for POSIX I/O\nfunctions: <a href=\"https://github.com/mochi-hpc/mochi-abt-io\"\
    >https://github.com/mochi-hpc/mochi-abt-io</a></p>\n<p>Note that Margo should\
    \ be compatible with any Mercury network\ntransport (NA plugin).  The documentation\
    \ assumes the use of\nthe NA SM (shared memory) plugin that is built into Mercury\
    \ for\nsimplicity.  This plugin is only valid for communication between\nprocesses\
    \ on a single node.  See <a href=\"##using-margo-with-other-mercury-na-plugins\"\
    >Using Margo with other Mercury NA\nplugins</a> for information\non other configuration\
    \ options.</p>\n<h2><a id=\"user-content-spack\" class=\"anchor\" aria-hidden=\"\
    true\" href=\"#spack\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"\
    ></span></a>Spack</h2>\n<p>The simplest way to install Margo is by installing\
    \ the \"mochi-margo\" package\nin spack (<a href=\"https://spack.io/\" rel=\"\
    nofollow\">https://spack.io/</a>).</p>\n<h2><a id=\"user-content-dependencies\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#dependencies\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>Dependencies</h2>\n<ul>\n<li>mercury\
    \  (git clone --recurse-submodules <a href=\"https://github.com/mercury-hpc/mercury.git\"\
    >https://github.com/mercury-hpc/mercury.git</a>)</li>\n<li>argobots (git clone\
    \ <a href=\"https://github.com/pmodels/argobots.git\">https://github.com/pmodels/argobots.git</a>)</li>\n\
    </ul>\n<h3><a id=\"user-content-recommended-mercury-build-options\" class=\"anchor\"\
    \ aria-hidden=\"true\" href=\"#recommended-mercury-build-options\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>Recommended Mercury build options</h3>\n\
    <ul>\n<li>Mercury must be compiled with -DMERCURY_USE_BOOST_PP:BOOL=ON to enable\
    \ the\nBoost preprocessor macros for encoding.</li>\n<li>Mercury should be compiled\
    \ with -DMERCURY_USE_SELF_FORWARD:BOOL=ON in order to enable\nfast execution path\
    \ for cases in which a Mercury service is linked into the same\nexecutable as\
    \ the client</li>\n</ul>\n<p>Example Mercury compilation:</p>\n<pre><code>mkdir\
    \ build\ncd build\ncmake -DMERCURY_USE_SELF_FORWARD:BOOL=ON \\\n -DBUILD_TESTING:BOOL=ON\
    \ -DMERCURY_USE_BOOST_PP:BOOL=ON \\\n -DCMAKE_INSTALL_PREFIX=/home/pcarns/working/install\
    \ \\\n -DBUILD_SHARED_LIBS:BOOL=ON -DCMAKE_BUILD_TYPE:STRING=Debug ../\n</code></pre>\n\
    <h2><a id=\"user-content-building\" class=\"anchor\" aria-hidden=\"true\" href=\"\
    #building\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Building</h2>\n\
    <p>Example configuration:</p>\n<pre><code>../configure --prefix=/home/pcarns/working/install\
    \ \\\n    PKG_CONFIG_PATH=/home/pcarns/working/install/lib/pkgconfig \\\n    CFLAGS=\"\
    -g -Wall\"\n</code></pre>\n<h2><a id=\"user-content-running-examples\" class=\"\
    anchor\" aria-hidden=\"true\" href=\"#running-examples\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>Running examples</h2>\n<p>The\
    \ examples subdirectory contains:</p>\n<ul>\n<li>margo-example-client.c: an example\
    \ client</li>\n<li>margo-example-server.c: an example server</li>\n<li>my-rpc.[ch]:\
    \ an example RPC definition</li>\n</ul>\n<p>The following example shows how to\
    \ execute them.  Note that when the server starts it will display the address\
    \ that the client can use to connect to it.</p>\n<pre><code>$ examples/margo-example-server\
    \ na+sm://\n# accepting RPCs on address \"na+sm://13367/0\"\nGot RPC request with\
    \ input_val: 0\nGot RPC request with input_val: 1\nGot RPC request with input_val:\
    \ 2\nGot RPC request with input_val: 3\nGot RPC request to shutdown\n\n$ examples/margo-example-client\
    \ na+sm://13367/0\nULT [0] running.\nULT [1] running.\nULT [2] running.\nULT [3]\
    \ running.\nGot response ret: 0\nULT [0] done.\nGot response ret: 0\nULT [1] done.\n\
    Got response ret: 0\nULT [2] done.\nGot response ret: 0\nULT [3] done.\n</code></pre>\n\
    <p>The client will issue 4 concurrent RPCs to the server and wait for them to\n\
    complete.</p>\n<h2><a id=\"user-content-running-tests\" class=\"anchor\" aria-hidden=\"\
    true\" href=\"#running-tests\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"\
    ></span></a>Running tests</h2>\n<p><code>make check</code></p>\n<h2><a id=\"user-content-using-margo-with-the-other-na-plugins\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#using-margo-with-the-other-na-plugins\"\
    ><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Using Margo\
    \ with the other NA plugins</h2>\n<p>See the <a href=\"http://mercury-hpc.github.io/documentation/\"\
    \ rel=\"nofollow\">Mercury\ndocumentation</a> for details.\nMargo is compatible\
    \ with any Mercury transport and uses the same address\nformat.</p>\n<h2><a id=\"\
    user-content-instrumentation\" class=\"anchor\" aria-hidden=\"true\" href=\"#instrumentation\"\
    ><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Instrumentation</h2>\n\
    <p>See the <a href=\"doc/instrumentation.md\">Instrumentation documentation</a>\
    \ for\ninformation on how to extract diagnostic instrumentation from Margo.</p>\n\
    <h2><a id=\"user-content-debugging\" class=\"anchor\" aria-hidden=\"true\" href=\"\
    #debugging\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Debugging</h2>\n\
    <p>See the <a href=\"doc/debugging.md\">Debugging documentation</a> for Margo\
    \ debugging\nfeatures and strategies.</p>\n<h2><a id=\"user-content-design-details\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#design-details\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>Design details</h2>\n<p><a target=\"\
    _blank\" rel=\"noopener noreferrer\" href=\"doc/fig/margo-diagram.png\"><img src=\"\
    doc/fig/margo-diagram.png\" alt=\"Margo architecture\" style=\"max-width: 100%;\"\
    ></a></p>\n<p>Margo provides Argobots-aware wrappers to common Mercury library\
    \ functions\nlike HG_Forward(), HG_Addr_lookup(), and HG_Bulk_transfer().  The\
    \ wrappers\nhave the same arguments as their native Mercury counterparts except\
    \ that no\ncallback function is specified.  Each function blocks until the operation\n\
    is complete.  The above diagram illustrates a typical control flow.</p>\n<p>Margo\
    \ launches a long-running user-level thread internally to drive\nprogress on Mercury\
    \ and execute Mercury callback functions (labeled\n<code>__margo_progress()</code>\
    \ above).  This thread can be assigned to a\ndedicated Argobots execution stream\
    \ (i.e., an operating system thread)\nto drive network progress with a dedicated\
    \ core.  Otherwise it will be\nautomatically scheduled when the caller's execution\
    \ stream is blocked\nwaiting for network events as shown in the above diagram.</p>\n\
    <p>Argobots eventual constructs are used to suspend and resume user-level\nthreads\
    \ while Mercury operations are in flight.</p>\n<p>Margo allows several different\
    \ threading/multicore configurations:</p>\n<ul>\n<li>The progress loop can run\
    \ on a dedicated operating system thread or not</li>\n<li>Multiple Margo instances\
    \ (and thus progress loops) can be\nexecuted on different operating system threads</li>\n\
    <li>(for servers) a single Margo instance can launch RPC handlers\non different\
    \ operating system threads</li>\n</ul>\n"
  stargazers_count: 14
  subscribers_count: 9
  topics: []
  updated_at: 1660707472.0
mochi-hpc/mochi-mona:
  data_format: 2
  description: Mochi messaging over NA
  filenames:
  - benchmark/cori/spack.yaml
  - spack.yaml
  full_name: mochi-hpc/mochi-mona
  latest_release: v0.2.3
  readme: '<h1><a id="user-content-mona---messaging-over-na" class="anchor" aria-hidden="true"
    href="#mona---messaging-over-na"><span aria-hidden="true" class="octicon octicon-link"></span></a>MoNA
    - Messaging over NA</h1>

    <p>MoNA is a Mochi library combining the NA layer of Mercury with

    the Argobots threading library, in a way similar to how Margo

    combines Mercury with Argobots. It provides a low-level messaging

    interface and hides the NA progress loop into Argobots ULTs.</p>

    '
  stargazers_count: 0
  subscribers_count: 4
  topics: []
  updated_at: 1633974549.0
mochi-hpc/mochi-ssg:
  data_format: 2
  description: Scalable Service Groups (SSG), a group membership service for Mochi
  filenames:
  - spack.yaml
  full_name: mochi-hpc/mochi-ssg
  latest_release: v0.5.3
  readme: '<h1><a id="user-content-ssg-scalable-service-groups" class="anchor" aria-hidden="true"
    href="#ssg-scalable-service-groups"><span aria-hidden="true" class="octicon octicon-link"></span></a>SSG
    (Scalable Service Groups)</h1>

    <p>SSG is a group membership microservice based on the Mercury RPC system.

    It provides mechanisms for bootstrapping sets of Mercury processes into

    logical groups and for managing the membership of these process groups

    over time. At a high-level, each group collectively maintains a <em>group view</em>,

    which is just a mapping from group member identifiers to Mercury address

    information. The inital group membership view is specified completely

    when the group is bootstrapped (created). Currently, SSG offers the

    following group bootstrapping methods:</p>

    <ul>

    <li>MPI communicator-based bootstrap</li>

    <li>config file-based bootstrap</li>

    <li>generic bootstrap method using an array of Mercury address strings</li>

    </ul>

    <p>Process groups are referenced using unique group identifiers

    which encode Mercury address information that can be used to connect

    with a representative member of the group. These identifiers may be

    transmitted to other processes so they can join the group or attach to

    the group (<em>attachment</em> provides non-group members a way to access a

    group''s view).</p>

    <p>Optionally, SSG can be configured to use the <a href="http://www.cs.cornell.edu/~asdas/research/dsn02-SWIM.pdf"
    rel="nofollow">SWIM failure detection and

    group membership protocol</a>

    internally to detect and respond to group member failures. SWIM uses a

    randomized probing mechanism to detect faulty group members and uses an

    efficient gossip protocol to dissmeninate group membership changes to other

    group members. SSG propagates group membership view updates back to the SSG

    user using a callback interface.</p>

    <p><strong>NOTE</strong>: SSG does not currently support group members dynamically
    leaving

    or joining a group, though this should be supported in the near future.

    This means that, for now, SSG groups are immutable after creation.

    When using SWIM, this means members can be marked as faulty, but they

    cannot be fully evicted from the group view yet.</p>

    <p><strong>NOTE</strong>: SSG does not currently allow for user-specified group
    member

    identifiers, and instead assigns identifiers as dense ranks into the

    list of address strings specified at group creation time. That is,

    the group member with the first address string in the list is rank 0,

    and so on.</p>

    <h2><a id="user-content-dependencies" class="anchor" aria-hidden="true" href="#dependencies"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Dependencies</h2>

    <ul>

    <li>mercury (git clone --recurse-submodules <a href="https://github.com/mercury-hpc/mercury.git">https://github.com/mercury-hpc/mercury.git</a>)</li>

    <li>argobots (git clone <a href="https://github.com/pmodels/argobots.git">https://github.com/pmodels/argobots.git</a>)</li>

    <li>margo (git clone <a href="https://xgitlab.cels.anl.gov/sds/margo.git" rel="nofollow">https://xgitlab.cels.anl.gov/sds/margo.git</a>)</li>

    <li>libev (e.g libev-dev package on Ubuntu or Debian)</li>

    </ul>

    <h2><a id="user-content-building" class="anchor" aria-hidden="true" href="#building"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Building</h2>

    <p>(if configuring for the first time)

    ./prepare.sh</p>

    <p>./configure [standard options] PKG_CONFIG_PATH=/path/to/pkgconfig/files</p>

    <p>make</p>

    <p>make install</p>

    <p>MPI support is by default optionally included. If you wish to compile with
    MPI

    support, set CC=mpicc (or equivalent) in configure. If you wish to disable MPI

    entirely, use --disable-mpi (you can also force MPI inclusion through

    --enable-mpi).</p>

    '
  stargazers_count: 1
  subscribers_count: 6
  topics: []
  updated_at: 1641352657.0
mochi-hpc/mochi-yokan:
  data_format: 2
  description: Remote Key/Value storage service for Mochi
  filenames:
  - spack.yaml
  full_name: mochi-hpc/mochi-yokan
  latest_release: v0.2.7
  readme: '<h1><a id="user-content-yokan---mochis-keyvalue-and-more-storage-service"
    class="anchor" aria-hidden="true" href="#yokan---mochis-keyvalue-and-more-storage-service"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Yokan - Mochi''s Key/Value
    (and more) storage service</h1>

    <p><a target="_blank" rel="noopener noreferrer" href="https://github.com/mochi-hpc/mochi-yokan/actions/workflows/test.yml/badge.svg?branch=main"><img
    src="https://github.com/mochi-hpc/mochi-yokan/actions/workflows/test.yml/badge.svg?branch=main"
    alt="" style="max-width: 100%;"></a>

    <a href="https://codecov.io/gh/mochi-hpc/mochi-yokan" rel="nofollow"><img src="https://camo.githubusercontent.com/fc95c801bafa29b49219f4727f651b97e7385800c8dc4a4757a1dccadefe6611/68747470733a2f2f636f6465636f762e696f2f67682f6d6f6368692d6870632f6d6f6368692d796f6b616e2f6272616e63682f6d61696e2f67726170682f62616467652e737667"
    alt="codecov" data-canonical-src="https://codecov.io/gh/mochi-hpc/mochi-yokan/branch/main/graph/badge.svg"
    style="max-width: 100%;"></a></p>

    <p>Please see documentation <a href="https://mochi.readthedocs.io/en/latest/yokan.html"
    rel="nofollow">here</a>.</p>

    '
  stargazers_count: 0
  subscribers_count: 1
  topics: []
  updated_at: 1641326484.0
mochi-hpc/ycsb-cpp-interface:
  data_format: 2
  description: Mochi-based DB backends for the YCSB benchmark
  filenames:
  - spack.yaml
  full_name: mochi-hpc/ycsb-cpp-interface
  latest_release: null
  readme: "<h1><a id=\"user-content-ycsb-c-interface\" class=\"anchor\" aria-hidden=\"\
    true\" href=\"#ycsb-c-interface\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"\
    ></span></a>YCSB C++ Interface</h1>\n<p><a href=\"https://github.com/brianfrankcooper/YCSB\"\
    >YCSB</a> is one of the most popular Cloud\nstorage benchmark. However it is written\
    \ in Java, forcing databases implemented\nin other languages to provide a Java\
    \ wrapper. While <a href=\"https://github.com/ls4154/YCSB-cpp\">YCSC-cpp</a>\n\
    provides a reimplementation of YCSB in C++, to date it only supports three backends,\
    \ as\nopposed to 45 for the original YCSB.</p>\n<p><a href=\"https://github.com/mochi-hpc/ycsb-cpp-interface\"\
    >ycsb-cpp-interface</a>\ntakes a different approach from YCSB-cpp, providing a\
    \ Java/C++ library\nthat enables the use of C++ to write DB backends for YCSB.</p>\n\
    <p>ycsb-cpp-inteface works in a modular way, dynamically loading your C++ database\n\
    implementation from a library using a factory pattern.</p>\n<h2><a id=\"user-content-installing\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#installing\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>Installing</h2>\n<h3><a id=\"\
    user-content-building-manually\" class=\"anchor\" aria-hidden=\"true\" href=\"\
    #building-manually\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"\
    ></span></a>Building manually</h3>\n<p>To build this repository from source, you\
    \ will first need to have\nits dependencies installed and findable by CMake. These\
    \ dependencies\ninclude:</p>\n<ul>\n<li>Java Development Kit (e.g., OpenJDK)</li>\n\
    <li>YCSB</li>\n<li>cmake</li>\n</ul>\n<p>Make sure to set the <code>JAVA_HOME</code>\
    \ environment variable\nto point to where your JDK is installed so that CMake\
    \ can find it.\nIt is recommended to install a distribution of YCSB, rather than\n\
    the source.</p>\n<p>You can then build the source contained in this repository\
    \ as follows.</p>\n<pre><code>$ mkdir build\n$ cd build\n$ cmake .. -DYCSB_ROOT=&lt;path/to/where/ycsb/is/installed&gt;\
    \ \\\n           -DCMAKE_INSTALL_PREFIX=&lt;install/prefix&gt;\n$ make\n</code></pre>\n\
    <h3><a id=\"user-content-installing-using-spack\" class=\"anchor\" aria-hidden=\"\
    true\" href=\"#installing-using-spack\"><span aria-hidden=\"true\" class=\"octicon\
    \ octicon-link\"></span></a>Installing using Spack</h3>\n<p>You can install this\
    \ library using <a href=\"https://spack.io/\" rel=\"nofollow\">Spack</a>.\nThe\
    \ <code>ycsb-cpp-interface</code> Spack package is available via the\n<a href=\"\
    https://github.com/mochi-hpc/mochi-spack-packages\">Mochi repository</a>,\nwhich\
    \ can be added to Spack as follows.</p>\n<pre><code>$ git clone https://github.com/mochi-hpc/mochi-spack-packages.git\n\
    $ spack repo add mochi-spack-packages\n</code></pre>\n<p>Once the <code>mochi-spack-packages</code>\
    \ repository has been made available to Spack,\nyou can install <code>ycsb-cpp-interface</code>\
    \ as follows.</p>\n<pre><code>$ spack install ycsb-cpp-interface\n</code></pre>\n\
    <h2><a id=\"user-content-testing\" class=\"anchor\" aria-hidden=\"true\" href=\"\
    #testing\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Testing</h2>\n\
    <p>If you have installed ycsb-cpp-interface with Spack, make sure that\nthe package\
    \ is loaded (<code>spack load ycsb-cpp-interface</code>), then you\ncan start\
    \ the CLI for testing, as follows.</p>\n<pre><code>ycsb-cpp-cli\n</code></pre>\n\
    <p>When building from source, the CLI is located in the <code>bin</code> subdirectory\n\
    of your build folder.</p>\n<p>You will end up in YCBS's CLI, with the YcsbDBClient\
    \ loaded as the\nDB backend, itself using a test implementation of an in-memory\
    \ database\nwith which you can interact (type <code>help</code> to see a list\
    \ of available commands).</p>\n<h2><a id=\"user-content-writing-your-own-c-db-backend\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#writing-your-own-c-db-backend\"\
    ><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Writing\
    \ your own C++ DB backend</h2>\n<p>ycsb-cpp-interface provides a header file,\
    \ <code>YCSBCppInterface.hpp</code>, with\na <code>ycsb::DB</code> abstract class.\
    \ To implement your own C++ backend database,\nyou simply need to implement a\
    \ child class of the <code>ycsb::DB</code> class that\nimplements the required\
    \ virtual functions. You may look at <a href=\"src/TestDB.cpp\"></a>\nas an example\
    \ of such an implementation. Note the use of the\n<code>YCSB_CPP_REGISTER_DB_TYPE</code>\
    \ macro after the class definition. This macro\nmust be called in a .cpp file\
    \ to associate the name of your backend\n(e.g. <code>myawesomedb</code>) with\
    \ the class name to use (e.g., <code>MyAwesomeDB</code>).</p>\n<p>Once your database\
    \ class is ready, compile it into a shared library\n(e.g., <code>libmyawesomedb.so</code>).\
    \ Make sure the <code>LD_LIBRARY_PATH</code> environment\nvariable contains the\
    \ path to your dynamic library. You may then test\nyour backend with the CLI as\
    \ follows.</p>\n<pre><code>$ ycsb-cpp-cli -p ycsb.cpp.library=libmyawesomedb.so\
    \ -p ycsb.cpp.backend=myawesomedb\n</code></pre>\n<p>The <code>ycsb.cpp.library</code>\
    \ and <code>ycsb.cpp.backend</code> properties are the only properties\nneeded\
    \ by ycsb-cpp-interface. Any other properties provided will be propagated\nto\
    \ your database implementation in the form of an <code>std::unordered_map&lt;std::string,\
    \ std::string&gt;</code>.\nNote that <code>ycsb.cpp.library</code> may accept\
    \ a full path to your dynamic library,\nif you don't want to change the <code>LD_LIBRARY_PATH</code>\
    \ environment variable.</p>\n<h2><a id=\"user-content-running-ycsb-with-your-c-db-backend\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#running-ycsb-with-your-c-db-backend\"\
    ><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Running\
    \ YCSB with your C++ DB backend</h2>\n<p>ycsb-cpp-interface provides a convenience\
    \ script, <code>ycsb-cpp</code>, to run YCSB\nwith your own backend. It can be\
    \ used in a way similar to the original ycsb script,\nas follows.</p>\n<pre><code>$\
    \ ycsb-cpp load -p ycsb.cpp.library=libmyawesomedb.so -p ycsb.cpp.backend=myawesomedb\
    \ -P workloadfile\n$ ycsb-cpp run -p ycsb.cpp.library=libmyawesomedb.so -p ycsb.cpp.backend=myawesomedb\
    \ -P workloadfile\n</code></pre>\n"
  stargazers_count: 0
  subscribers_count: 7
  topics: []
  updated_at: 1661162651.0
mpbelhorn/olcf-spack-environments:
  data_format: 2
  description: Spack environments for OLCF resources.
  filenames:
  - hosts/andes/envs/base/spack.yaml
  - hosts/frontier/envs/base/spack.yaml
  - hosts/bones/envs/base/spack.yaml
  - hosts/spock/envs/base/spack.yaml
  full_name: mpbelhorn/olcf-spack-environments
  latest_release: null
  readme: '<h1><a id="user-content-olcf-spack-environments" class="anchor" aria-hidden="true"
    href="#olcf-spack-environments"><span aria-hidden="true" class="octicon octicon-link"></span></a>OLCF
    Spack Environments</h1>

    <p>This repo contains the infrastructure and environment definitions to deploy

    site-provided software on OLCF resources via Spack environments.</p>

    <h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Getting Started</h2>

    <p>Clone this repo and it''s facility-modified spack fork somewhere on an OLCF

    filesystem:</p>

    <pre><code>git clone --recurse-submodules git@github.com:mpbelhorn/olcf-spack-environments.git

    </code></pre>

    <p>or</p>

    <pre><code>git clone --recurse-submodules https://github.com/mpbelhorn/olcf-spack-environments

    </code></pre>

    <p>Next, initialize spack and the build environment. This is done by calling</p>

    <pre><code>FACSPACK_MY_ENVS=/path/to/host-specific/private/envs FACSPACK_ENV_NAME=base
    . ./init-facility-spack.sh

    </code></pre>

    <p>This will configure the spack build- and run-time environment build and install

    the facility spack environment <code>FACSPACK_ENV_NAME</code> tracked by this
    repo for the

    current machine in a private location under <code>FACSPACK_MY_ENVS</code>. Both
    of these

    variables are optional. If omitted, each variable will take on their default

    values:</p>

    <pre><code>FACSPACK_MY_ENVS="/sw/${_THIS_HOST}/spack-envs"

    FACSPACK_ENV_NAME="base"

    </code></pre>

    <p>such that sourcing this script by itself</p>

    <pre><code>. ./init-facility-spack.sh

    </code></pre>

    <p>will setup the runtime shell environment to manipulate the production spack

    environment on the current system.</p>

    <p>This repo will always track at least one spack environment per machine named

    <code>base</code> which is the complete standard software environment used in
    production

    for that machine. Furthermore, only the user account with owner permissions on

    the production environment may be used to manipulate it in the default

    <code>FACSPACK_MY_ENVS</code>.  This is an intentional safety mechanism to prevent
    multiple

    users from concurrently modifying the production environment. Users may set an

    alternate <code>FACSPACK_MY_ENVS</code> under which they can run build tests using
    any

    tracked <code>hosts/${_THIS_HOST}/${FACSPACK_ENV_NAME}/spack.yaml</code> file
    in this repo.</p>

    <p>From these variables, a unique path per each environment name will be

    constructed:</p>

    <pre><code>FACSPACK_ENV="${FACSPACK_MY_ENVS}/${FACSPACK_ENV_NAME}"

    </code></pre>

    <p>The value of <code>${_THIS_HOST}</code> is determined automatically from the
    hostname on

    which the init script is being run. For each system and environment tracked in

    this repo that you wish to work on, ensure that the final expanded value of

    <code>FACSPACK_ENV</code> corresponds to an actual existing directory.</p>

    <p>Configuration paths in our <code>spack.yaml</code> environments that are not
    fixed to

    universal values are expressed in terms of relative paths to either the spack

    instance setup by <code>init-facility-spack</code> or the path to the <code>FACSPACK_MY_ENVS</code>.

    These paths are referenced in the <code>spack.yaml</code> files via environment
    variables

    set by <code>init-facility-spack</code>. This allows the <code>spack.yaml</code>
    environment files to

    define portable and relocatable spack environments which can be re-deployed in

    arbitrary private locations by any users without needing to modify the

    environment file.</p>

    <p>The following variables are exported in Spack''s runtime environment by

    <code>init-facility-spack</code> and can be referred to in the <code>spack.yaml</code>
    the enviornment

    files tracked in this repo.</p>

    <ul>

    <li>

    <code>${FACSPACK_ENV}</code>:

    Path to where spack environment will be installed. Contains subdirs <code>opt</code>

    and <code>modules</code>.</li>

    <li>

    <code>${FACSPACK_ENV_MODULEROOT}</code>:

    Shortcut to <code>${FACSPACK_ENV}/modules</code> under which static and

    spack-generated modules are generated. Contains subdirectories <code>spack</code>,

    <code>flat</code>, and <code>site</code> corresponding to lmod, tcl, and static
    modulefiles

    respectively.</li>

    <li>

    <code>${FACSPACK_CONF_COMMON}</code>:

    Path to facility-wide common configuration files under <code>${this_repo}/share</code>.</li>

    <li>

    <code>${FACSPACK_CONF_HOST}</code>:

    Path to host-specific configuration files under <code>${this_repo}/hosts/${_THIS_HOST}</code>

    </li>

    </ul>

    <p>There are (as of spack v0.15.0) a couple exceptional paths used in <code>spack.yaml</code>

    files which cannot de-reference environment variables. These affect</p>

    <ul>

    <li>Mirrors</li>

    <li>Extensions</li>

    </ul>

    <p>Spack does not internally expand environment variables in the configuration
    of

    these items so they must be expressed as hard-coded full path strings. The

    default values in this repo should point to permanent world-readable paths on

    the OLCF filesystem populated with OLCF-maintained extensions and mirrors.</p>

    <h2><a id="user-content-spack-fork" class="anchor" aria-hidden="true" href="#spack-fork"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Spack Fork</h2>

    <p>The upstream development branch of spack is not used directly. Instead, the
    OLCF

    has implemented some customizations that are tracked in the "olcf-X.Y.Z"

    branches of a <a href="https://github.com/mpbelhorn/olcf-spack/tree/olcf-0.15.0">facility
    fork of spack</a>

    where <code>X.Y.Z</code> refers to the tagged release of upstream spack from which
    the

    OLCF-modified branch is forked.</p>

    '
  stargazers_count: 3
  subscribers_count: 1
  topics: []
  updated_at: 1654273247.0
olcf/spack-environments:
  data_format: 2
  description: Spack Environments Templates for OLCF resources
  filenames:
  - linux-centos7-broadwell/or-slurm/spack.yaml
  full_name: olcf/spack-environments
  latest_release: null
  readme: '<p>OLCF Spack Environments Templates</p>

    <p>Companion files the for: <a href="https://docs.olcf.ornl.gov/software/spack_env/index.html"
    rel="nofollow">OLCF Documentaton for spack environments</a></p>

    <h2><a id="user-content-purpose" class="anchor" aria-hidden="true" href="#purpose"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Purpose</h2>

    <p>The provided Spack environment files are intended to assist OLCF users in setup
    their development environment at the

    OLCF.  The base environment file includes the compilers and packages that are
    installed at the system level.</p>

    <p>Spack documentation can be found <a href="https://spack.readthedocs.io/" rel="nofollow">here</a>.</p>

    '
  stargazers_count: 0
  subscribers_count: 19
  topics: []
  updated_at: 1635266343.0
robertu94/libpressio_adios2:
  data_format: 2
  description: null
  filenames:
  - spack.yaml
  full_name: robertu94/libpressio_adios2
  latest_release: null
  readme: '<h1><a id="user-content-libpressio-adios2-io-plugin" class="anchor" aria-hidden="true"
    href="#libpressio-adios2-io-plugin"><span aria-hidden="true" class="octicon octicon-link"></span></a>LibPressio
    ADIOS2 IO Plugin</h1>

    <p>An experimental plugin to read ADIOS2 files in LibPressio use at your own risk</p>

    '
  stargazers_count: 0
  subscribers_count: 1
  topics: []
  updated_at: 1652738176.0
robertu94/roibin-sz3-experiments:
  data_format: 2
  description: null
  filenames:
  - spack.yaml
  full_name: robertu94/roibin-sz3-experiments
  latest_release: null
  readme: '<h1><a id="user-content-roibin-sz-experiments" class="anchor" aria-hidden="true"
    href="#roibin-sz-experiments"><span aria-hidden="true" class="octicon octicon-link"></span></a>ROIBIN-SZ
    Experiments</h1>

    <h2><a id="user-content-system-information" class="anchor" aria-hidden="true"
    href="#system-information"><span aria-hidden="true" class="octicon octicon-link"></span></a>System
    Information</h2>

    <p>The hardware and software versions used for the performance evaluations can
    be found in Table I in the paper. These nodes come from Clemson University''s
    Palmetto Cluster.</p>

    <p>The quality assessment was done on the PSANA system at SLAC national accelerator
    laboratory using PSOCAKE, PHENIX, and CCP4.</p>

    <h2><a id="user-content-where-is-the-implementation-of-roibin-sz3" class="anchor"
    aria-hidden="true" href="#where-is-the-implementation-of-roibin-sz3"><span aria-hidden="true"
    class="octicon octicon-link"></span></a>Where is the implementation of ROIBIN-SZ3?</h2>

    <p>This repository contains only our experimental codes and configuration files.</p>

    <p>We contributed the composed building blocks for ROIBIN-SZ3 into the <a href="https://github.com/robertu94/libpressio">libpressio</a>
    repository specifically <a href="https://github.com/robertu94/libpressio/blob/d1fee62c84f82b71753d64a509d45244b9b9a88e/src/plugins/compressors/binning.cc"><code>binning.cc</code></a>,  <a
    href="https://github.com/robertu94/libpressio/blob/d1fee62c84f82b71753d64a509d45244b9b9a88e/src/plugins/compressors/roibin.cc"><code>roibin.cc</code></a>
    and <a href="https://github.com/robertu94/libpressio/blob/d1fee62c84f82b71753d64a509d45244b9b9a88e/src/plugins/compressors/roibin_impl.h"><code>roibin_impl.h</code></a>
    in the <code>src/plugins/compressors</code> subdirectory.  The automated tuning
    implementation was used directly from <a href="https://github.com/robertu94/libpressio_opt">OptZConfig/LibPressioOpt</a>.</p>

    <p>See <a href="#obtaining-data">Obtaining Data</a> to request the dataset used.</p>

    <p>The quality assessment software was not designed in this paper.</p>

    <h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Getting started</h2>

    <p>For ease of evaluation, we provide a docker container to evaluate our performance
    results.</p>

    <p>There are several key steps:</p>

    <ol>

    <li>Obtaining Data</li>

    <li>Installing the software (either in a container or on the host system)</li>

    <li>Running the experiments</li>

    </ol>

    <h3><a id="user-content-obtaining-data" class="anchor" aria-hidden="true" href="#obtaining-data"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Obtaining Data</h3>

    <p>The data for these experiments are extremely large (6+TB for one complete dataset
    used in the quality assessment). The full Se-SAD dataset is publicly available
    here <a href="https://cxidb.org/id-54.html" rel="nofollow">https://cxidb.org/id-54.html</a>,
    but require some domain knowledge to process the entire dataset. We include a
    subset of the data for testing roibin-sz3. For more information about CXI files
    used for this paper, contact the authors.</p>

    <p>To run in the container, you may need to set the files to world readable <code>chmod
    a+r</code> to be read inside the container depending on your container manager.</p>

    <h3><a id="user-content-quality-assessment" class="anchor" aria-hidden="true"
    href="#quality-assessment"><span aria-hidden="true" class="octicon octicon-link"></span></a>Quality
    Assessment</h3>

    <p>The quality analysis results (Figures 1,4-8 and Table 3)  were produced using
    <a href="https://confluence.slac.stanford.edu/display/PSDM/Psocake+SFX+tutorial"
    rel="nofollow">PSOCAKE</a>, <a href="https://phenix-online.org" rel="nofollow">PHENIX</a>,
    and <a href="https://www.ccp4.ac.uk" rel="nofollow">CCP4</a>.

    Correct use of this tool requires experience and expertise in serial

    crystallography and is outside the scope of this document.</p>

    <p>Where decompressed outputs were needed for inputs for these tools, they were
    outputted from the Performance Assessment codes.</p>

    <h3><a id="user-content-container-install-for-ease-of-setup" class="anchor" aria-hidden="true"
    href="#container-install-for-ease-of-setup"><span aria-hidden="true" class="octicon
    octicon-link"></span></a>Container Install (for ease of setup)</h3>

    <p>We provide a container for <code>x86_64</code> image for ease of installation.</p>

    <p>This container differs from our experimental setup in 2 ways:</p>

    <ol>

    <li>The production build used <code>-march=native -mtune=native</code> for architecture
    optimized builds where as the container does not use these flags to maximize compatablity
    across <code>x86_64</code> hardware.</li>

    <li>We use MPICH in the container rather than the OpenMPI because we found MPICH
    more reliably ran in the container during testing while OpenMPI was the system
    MPI.</li>

    </ol>

    <p>NOTE this file is &gt;= 6 GB (without datasets; see above), download with caution.</p>

    <h4><a id="user-content-singularity" class="anchor" aria-hidden="true" href="#singularity"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Singularity</h4>

    <p>You can install and start the container on many super computers using singularity.</p>

    <div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span>
    this first commmand may issue a ton of warnings regarding xattrs depending on
    your filesystem on your container host; these were benign in our testing.</span>

    singularity pull roibin.sif docker://ghcr.io/robertu94/roibin:latest


    <span class="pl-c"><span class="pl-c">#</span> -c enables additional confinement
    than singularity uses by default to prevent polution from /home</span>

    <span class="pl-c"><span class="pl-c">#</span> -B bind mounts in the data directory
    containing your CXI files.</span>

    singularity run -c -B path/to/datadir:/data:ro roibin.sif bash</pre></div>

    <h4><a id="user-content-docker" class="anchor" aria-hidden="true" href="#docker"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Docker</h4>

    <p>You can run an example code on a small dataset by running with the following
    container and requesting a dataset.</p>

    <div class="highlight highlight-source-shell"><pre>docker pull ghcr.io/robertu94/roibin:latest

    <span class="pl-c"><span class="pl-c">#</span>most systems</span>

    docker run -it --rm -v path/to/datadir:/data:ro ghcr.io/robertu94/roibin:latest


    <span class="pl-c"><span class="pl-c">#</span> if running on a SeLinux enforcing
    system</span>

    docker run -it --rm --security-opt label=disable -v path/to/datadir:/data:ro roibin</pre></div>

    <h3><a id="user-content-building-the-container" class="anchor" aria-hidden="true"
    href="#building-the-container"><span aria-hidden="true" class="octicon octicon-link"></span></a>Building
    the container</h3>

    <p>You can build the container yourself as follows:

    NOTE this process takes 3+ hours on a modern laptop, and most clusters do not

    provide sufficient permissions to run container builds on the cluster.</p>

    <p>Additional some of the dependencies (i.e. MGARD) require 4GB/RAM per core to
    build.</p>

    <div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span>
    install/module load git-lfs, needed to download example_data for building the
    container</span>

    sudo dnf install git-lfs <span class="pl-c"><span class="pl-c">#</span>Fedora/CentOS
    Stream 8</span>

    sudo apt-get install git-lfs <span class="pl-c"><span class="pl-c">#</span> Ubuntu</span>

    spack install git-lfs<span class="pl-k">;</span> spack load git-lfs <span class="pl-c"><span
    class="pl-c">#</span> using spack</span>


    <span class="pl-c"><span class="pl-c">#</span> clone this repository</span>

    git clone --recursive https://github.com/robertu94/roibin-sz3-experiments

    <span class="pl-c1">cd</span> roibin-sz3-experiments

    docker build <span class="pl-c1">.</span> -t roibin</pre></div>

    <p>If you forgot to install <code>git-lfs</code> before and have an empty <code>example_data</code>
    folder, you should install <code>git-lfs</code>

    and then run the following:</p>

    <pre><code>git lfs fetch

    git lfs checkout

    </code></pre>

    <h3><a id="user-content-manual-install-for-scale" class="anchor" aria-hidden="true"
    href="#manual-install-for-scale"><span aria-hidden="true" class="octicon octicon-link"></span></a>Manual
    Install (for scale)</h3>

    <p>The easiest way to install this manually is with <code>spack</code></p>

    <div class="highlight highlight-source-shell"><pre>git clone --recursive https://github.com/robertu94/roibin-sz3-experiments

    git clone https://github.com/spack/spack

    <span class="pl-c1">source</span> ./spack/share/spack/setup-env.sh

    spack compiler find


    spack env activate <span class="pl-c1">.</span>

    <span class="pl-c"><span class="pl-c">#</span>see note about MPI below</span>

    spack install


    mkdir build

    <span class="pl-c1">cd</span> build

    cmake ..</pre></div>

    <p>This software is not compatible with Windows, and hasn''t been tested on MacOS.</p>

    <p>Please note all functionality will not work on Debian/Ubuntu (due to known
    bug in LibPressio we hope to resolve soon).

    Please use on a RedHat based distribution for testing (i.e. Fedora, CentOS, RHEL,
    ...).

    Additionally some of this code requires a newer compiler and may not compile on
    older versions of CentOS.</p>

    <p>You may wish to configure the build to use your local version of MPI.

    Please see <a href="https://spack.readthedocs.io/en/latest/build_settings.html#external-packages"
    rel="nofollow">the spack guide</a> for how to do this.</p>

    <h2><a id="user-content-running-the-experiments" class="anchor" aria-hidden="true"
    href="#running-the-experiments"><span aria-hidden="true" class="octicon octicon-link"></span></a>Running
    the Experiments</h2>

    <p>Once the container is installed, you can run our testing commmands.</p>

    <div class="highlight highlight-source-shell"><pre>mpiexec -np <span class="pl-smi">$procs</span>
    /app/build/roibin_test -c 1 -f /app/example_data/cxic0415_0020.cxi -p /app/share/roibin_sz.json</pre></div>

    <p>where <code>-f</code> is the input data file, and <code>-p</code> is the configuration
    to use <code>-c</code> is the chunk size.</p>

    <p>Please see <code>run_all.sh</code> for our production configurations.</p>

    <h3><a id="user-content-example-output" class="anchor" aria-hidden="true" href="#example-output"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Example Output</h3>

    <p>NOTE results below from a laptop, not the server grade hardware from the paper

    and in the container with the differences noted above so bandwidth will differ.

    Additionally, this files results were only reported in aggregate in the paper

    and may not represent the entire 6TB dataset.  It was selected as one of the smaller

    files from the data-set to ease reproduce-ability.</p>

    <div class="highlight highlight-text-shell-session"><pre><span class="pl-e">[demo@620bb069495a
    app]</span>$ <span class="pl-s1"><span class="pl-c1">cd</span> /app</span>

    <span class="pl-e">[demo@620bb069495a app]</span>$ <span class="pl-s1">mpiexec
    -np 8 ./build/roibin_test -f ./example_data/cxic0415_0020.cxi -p ./share/roibin_sz.json
    -c 32</span>

    <span class="pl-c1">/pressio/composite/time:time:metric &lt;char*&gt; = "noop"</span>

    <span class="pl-c1">/pressio/composite:composite:names &lt;char*[]&gt; = {}</span>

    <span class="pl-c1">/pressio/composite:composite:plugins &lt;char*[]&gt; = {size,
    time, }</span>

    <span class="pl-c1">/pressio/composite:composite:scripts &lt;char*[]&gt; = {}</span>

    <span class="pl-c1">/pressio/roibin/background/composite/time:time:metric &lt;char*&gt;
    = "noop"</span>

    <span class="pl-c1">/pressio/roibin/background/composite:composite:names &lt;char*[]&gt;
    = {}</span>

    <span class="pl-c1">/pressio/roibin/background/composite:composite:plugins &lt;char*[]&gt;
    = {size, time, }</span>

    <span class="pl-c1">/pressio/roibin/background/composite:composite:scripts &lt;char*[]&gt;
    = {}</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/composite/time:time:metric
    &lt;char*&gt; = "noop"</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/composite:composite:names
    &lt;char*[]&gt; = {}</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/composite:composite:plugins
    &lt;char*[]&gt; = {size, time, }</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/composite:composite:scripts
    &lt;char*[]&gt; = {}</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz/composite/time:time:metric
    &lt;char*&gt; = "noop"</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz/composite:composite:names
    &lt;char*[]&gt; = {}</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz/composite:composite:plugins
    &lt;char*[]&gt; = {size, time, }</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz/composite:composite:scripts
    &lt;char*[]&gt; = {}</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:metrics:copy_compressor_results
    &lt;int32&gt; = 1</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:metrics:errors_fatal
    &lt;int32&gt; = 1</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:pressio:abs &lt;double&gt;
    = 90</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:pressio:lossless &lt;int32&gt;
    = &lt;empty&gt;</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:pressio:metric &lt;char*&gt;
    = "composite"</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:pressio:pw_rel &lt;double&gt;
    = &lt;empty&gt;</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:pressio:rel &lt;double&gt;
    = &lt;empty&gt;</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:abs_err_bound &lt;double&gt;
    = 90</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:accelerate_pw_rel_compression
    &lt;int32&gt; = 1</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:app &lt;char*&gt;
    = "SZ"</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:config_file &lt;char*&gt;
    = &lt;empty&gt;</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:config_struct &lt;void*&gt;
    = &lt;empty&gt;</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:data_type &lt;double&gt;
    = &lt;empty&gt;</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:error_bound_mode
    &lt;int32&gt; = 0</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:error_bound_mode_str
    &lt;char*&gt; = &lt;empty&gt;</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:exafel:bin_size &lt;uint32&gt;
    = 0</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:exafel:calib_panel
    &lt;data&gt; = data{ type=byte dims={} has_data=false}</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:exafel:num_peaks
    &lt;uint32&gt; = 0</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:exafel:peak_size
    &lt;uint32&gt; = 0</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:exafel:peaks_cols
    &lt;data&gt; = data{ type=byte dims={} has_data=false}</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:exafel:peaks_rows
    &lt;data&gt; = data{ type=byte dims={} has_data=false}</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:exafel:peaks_segs
    &lt;data&gt; = data{ type=byte dims={} has_data=false}</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:exafel:sz_dim &lt;uint32&gt;
    = 0</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:exafel:tolerance
    &lt;double&gt; = 0</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:gzip_mode &lt;int32&gt;
    = 3</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:lossless_compressor
    &lt;int32&gt; = 1</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:max_quant_intervals
    &lt;uint32&gt; = 65536</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:metric &lt;char*&gt;
    = "composite"</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:pred_threshold &lt;float&gt;
    = 0.99</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:prediction_mode &lt;int32&gt;
    = &lt;empty&gt;</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:protect_value_range
    &lt;int32&gt; = 0</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:psnr_err_bound &lt;double&gt;
    = 90</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:pw_rel_err_bound
    &lt;double&gt; = 0.001</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:quantization_intervals
    &lt;uint32&gt; = 0</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:rel_err_bound &lt;double&gt;
    = 0.0001</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:sample_distance &lt;int32&gt;
    = 100</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:segment_size &lt;int32&gt;
    = 36</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:snapshot_cmpr_step
    &lt;int32&gt; = 5</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:sol_id &lt;int32&gt;
    = 101</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:sz_mode &lt;int32&gt;
    = 1</span>

    <span class="pl-c1">/pressio/roibin/background/pressio/sz:sz:user_params &lt;void*&gt;
    = 0</span>

    <span class="pl-c1">/pressio/roibin/background/pressio:metrics:copy_compressor_results
    &lt;int32&gt; = 1</span>

    <span class="pl-c1">/pressio/roibin/background/pressio:metrics:errors_fatal &lt;int32&gt;
    = 1</span>

    <span class="pl-c1">/pressio/roibin/background/pressio:pressio:abs &lt;double&gt;
    = 90</span>

    <span class="pl-c1">/pressio/roibin/background/pressio:pressio:compressor &lt;char*&gt;
    = "sz"</span>

    <span class="pl-c1">/pressio/roibin/background/pressio:pressio:metric &lt;char*&gt;
    = "composite"</span>

    <span class="pl-c1">/pressio/roibin/background/pressio:pressio:rel &lt;double&gt;
    = &lt;empty&gt;</span>

    <span class="pl-c1">/pressio/roibin/background/pressio:pressio:reset_mode &lt;bool&gt;
    = &lt;empty&gt;</span>

    <span class="pl-c1">/pressio/roibin/background:binning:compressor &lt;char*&gt;
    = "pressio"</span>

    <span class="pl-c1">/pressio/roibin/background:binning:metric &lt;char*&gt; =
    "composite"</span>

    <span class="pl-c1">/pressio/roibin/background:binning:nthreads &lt;uint32&gt;
    = 4</span>

    <span class="pl-c1">/pressio/roibin/background:binning:shape &lt;data&gt; = data{
    type=double dims={3, } has_data=[2, 2, 1, ]}</span>

    <span class="pl-c1">/pressio/roibin/background:metrics:copy_compressor_results
    &lt;int32&gt; = 1</span>

    <span class="pl-c1">/pressio/roibin/background:metrics:errors_fatal &lt;int32&gt;
    = 1</span>

    <span class="pl-c1">/pressio/roibin/background:pressio:metric &lt;char*&gt; =
    "composite"</span>

    <span class="pl-c1">/pressio/roibin/composite/time:time:metric &lt;char*&gt; =
    "noop"</span>

    <span class="pl-c1">/pressio/roibin/composite:composite:names &lt;char*[]&gt;
    = {}</span>

    <span class="pl-c1">/pressio/roibin/composite:composite:plugins &lt;char*[]&gt;
    = {size, time, }</span>

    <span class="pl-c1">/pressio/roibin/composite:composite:scripts &lt;char*[]&gt;
    = {}</span>

    <span class="pl-c1">/pressio/roibin/roi/composite/time:time:metric &lt;char*&gt;
    = "noop"</span>

    <span class="pl-c1">/pressio/roibin/roi/composite:composite:names &lt;char*[]&gt;
    = {}</span>

    <span class="pl-c1">/pressio/roibin/roi/composite:composite:plugins &lt;char*[]&gt;
    = {size, time, }</span>

    <span class="pl-c1">/pressio/roibin/roi/composite:composite:scripts &lt;char*[]&gt;
    = {}</span>

    <span class="pl-c1">/pressio/roibin/roi:fpzip:has_header &lt;int32&gt; = 0</span>

    <span class="pl-c1">/pressio/roibin/roi:fpzip:metric &lt;char*&gt; = "composite"</span>

    <span class="pl-c1">/pressio/roibin/roi:fpzip:prec &lt;int32&gt; = 0</span>

    <span class="pl-c1">/pressio/roibin/roi:metrics:copy_compressor_results &lt;int32&gt;
    = 1</span>

    <span class="pl-c1">/pressio/roibin/roi:metrics:errors_fatal &lt;int32&gt; = 1</span>

    <span class="pl-c1">/pressio/roibin/roi:pressio:metric &lt;char*&gt; = "composite"</span>

    <span class="pl-c1">/pressio/roibin:metrics:copy_compressor_results &lt;int32&gt;
    = 1</span>

    <span class="pl-c1">/pressio/roibin:metrics:errors_fatal &lt;int32&gt; = 1</span>

    <span class="pl-c1">/pressio/roibin:pressio:metric &lt;char*&gt; = "composite"</span>

    <span class="pl-c1">/pressio/roibin:roibin:background &lt;char*&gt; = "binning"</span>

    <span class="pl-c1">/pressio/roibin:roibin:centers &lt;data&gt; = data{ type=byte
    dims={} has_data=false}</span>

    <span class="pl-c1">/pressio/roibin:roibin:metric &lt;char*&gt; = "composite"</span>

    <span class="pl-c1">/pressio/roibin:roibin:nthreads &lt;uint32&gt; = 1</span>

    <span class="pl-c1">/pressio/roibin:roibin:roi &lt;char*&gt; = "fpzip"</span>

    <span class="pl-c1">/pressio/roibin:roibin:roi_size &lt;data&gt; = data{ type=double
    dims={3, } has_data=[8, 8, 0, ]}</span>

    <span class="pl-c1">/pressio:metrics:copy_compressor_results &lt;int32&gt; = 1</span>

    <span class="pl-c1">/pressio:metrics:errors_fatal &lt;int32&gt; = 1</span>

    <span class="pl-c1">/pressio:pressio:compressor &lt;char*&gt; = "roibin"</span>

    <span class="pl-c1">/pressio:pressio:metric &lt;char*&gt; = "composite"</span>

    <span class="pl-c1">/pressio:pressio:reset_mode &lt;bool&gt; = &lt;empty&gt;</span>


    <span class="pl-c1">processing 0 256</span>

    <span class="pl-c1">global_cr=51.805</span>

    <span class="pl-c1">wallclock_ms=2811</span>

    <span class="pl-c1">compress_ms=1098</span>

    <span class="pl-c1">compress_bandwidth_GBps=1.08781</span>

    <span class="pl-c1">wallclock_bandwidth_GBps=0.424909</span></pre></div>

    <p>In this output, the lines beginning with <code>/pressio</code> are the represent
    the configuration used for the experiment.

    All of the configurations we used can be found in the <code>/app/share</code>
    directory.

    More details on the meanings of these options by calling <code>pressio -a help
    &lt;compressor_id&gt;</code> where the compressor id is one of <code>binning</code>,
    <code>roi</code>, <code>opt</code>, <code>fpzip</code>, <code>sz</code>, <code>sz3</code>,
    <code>zfp</code>, <code>mgard</code>, <code>blosc</code>, etc...</p>

    <p>The <code>-o</code> flag provided in some of our run codes outputs the decompressed
    dataset.

    There is also a <code>-d</code> and <code>-D</code> which together output fine
    grained metrics on individual events.</p>

    <p>the lines <code>processing &lt;start&gt; &lt;end&gt;</code> show the progress
    of each stage of the compression.

    For example <code>processing 0 256</code> means that the first 256 events are
    being processed.</p>

    <p><code>global_cr</code> is the compression ratio across all events.

    <code>wallclock_ms</code> is the wall clock time including IO from the CXI file.  In
    the real system, there would not be the IO from the CXI files.

    <code>compress_ms</code> is the compression clock time.

    <code>compress_bandwidth_GBps</code> is the compression bandwidth in GB/s.

    <code>wallclock_bandwidth_GBps</code> is the wallclock bandwidth in GB/s</p>

    <h2><a id="user-content-results-for-figures" class="anchor" aria-hidden="true"
    href="#results-for-figures"><span aria-hidden="true" class="octicon octicon-link"></span></a>Results
    for Figures</h2>

    <p>The script <code>run_all.sh</code> contains configurations for all runs for
    all results in the paper.  Each specific configuration corresponds to a configuration
    file in the <code>share</code> directory.  We would comment and uncomment specific
    sections to run various sub experiments. All results output metrics files (not
    the decompressed data) are also included from all past runs.</p>

    <p>The results for table 2 are in from the lines in the sectoin labeled "full_table2".

    The results for table 3 come from the section labeled "full scale" with cxi_file
    set to the appropriate dataset.

    The results for table 4 come from the section labeled "tune"

    The results for table 5 come from the section labeled "scalability"

    The results for table 6 come from the section labeled "overview"</p>

    <p>Many of the visualizations come from the section labeled "full scale"</p>

    '
  stargazers_count: 0
  subscribers_count: 2
  topics: []
  updated_at: 1648861627.0
roblatham00/cachercise:
  data_format: 2
  description: null
  filenames:
  - spack.yaml
  full_name: roblatham00/cachercise
  latest_release: null
  readme: "<h1><a id=\"user-content-cachercise\" class=\"anchor\" aria-hidden=\"true\"\
    \ href=\"#cachercise\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"\
    ></span></a>Cachercise:</h1>\n<p>exploring scalable ways to manage concurrency\
    \ in mochi.  The provider maintains\na simple in-memory data structure.  The client\
    \ api sets and retrieves values\nfrom this structure.</p>\n<h2><a id=\"user-content-requirements\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#requirements\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>Requirements</h2>\n<ul>\n<li>bedrock</li>\n\
    </ul>\n<h2><a id=\"user-content-building\" class=\"anchor\" aria-hidden=\"true\"\
    \ href=\"#building\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"\
    ></span></a>Building</h2>\n<p>Pick your <code>INSTALL_PREFIX</code> (e.g. ${HOME}/soft/cachercise)\
    \ and <code>BUILD_TYPE</code> (e.g\nDebug, Release, etc)</p>\n<pre><code>    mkdir\
    \ build\n    cd build\n    cmake .. -DENABLE_TESTS=ON -DENABLE_EXAMPLES=ON -DENABLE_BEDROCK=ON\
    \ \\\n        -DCMAKE_INSTALL_PREFIX=... -DCMAKE_BUILD_TYPE=...\n</code></pre>\n\
    <h2><a id=\"user-content-running-provider\" class=\"anchor\" aria-hidden=\"true\"\
    \ href=\"#running-provider\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"\
    ></span></a>Running Provider</h2>\n<p>This is a bedrock-based service.  There\
    \ are some json files in <code>examples</code> to get you started.  One way to\
    \ start the provider side of this benchmark:</p>\n<pre><code>    bedrock -c examples/cachercise-4x-server.json\
    \ na+sm &amp;\n</code></pre>\n<p>Once the provider is running the client can read\
    \ the SSG group file to find the\nprovider.  Client tunables are in a separate\
    \ JSON file.  The\n<code>cachercise-client.json</code> file in <code>examples</code>\
    \ is a good starting point.</p>\n<h3><a id=\"user-content-running-with-jx9\" class=\"\
    anchor\" aria-hidden=\"true\" href=\"#running-with-jx9\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>Running with jx9</h3>\n<p>bedrock\
    \ will let you start the serivce with a json-like configuration language,\ninstead\
    \ of straight json.  See examples/cachercise-server.jx9, which allows us\nto vary\
    \ the number of pools and execution streams like so, instead of creating\na JSON\
    \ file for each configuration:</p>\n<pre><code>   bedrock na+sm -v trace --jx9\
    \ -c examples/cachercise-server.jx9 --jx9-context 'num_extra_pools=4,num_extra_xstreams=16'\
    \ &amp;\n\n</code></pre>\n<h2><a id=\"user-content-clients\" class=\"anchor\"\
    \ aria-hidden=\"true\" href=\"#clients\"><span aria-hidden=\"true\" class=\"octicon\
    \ octicon-link\"></span></a>Clients</h2>\n<p>The client is an MPI program.  You\
    \ can find some job scripts in the <code>examples</code> directory.</p>\n"
  stargazers_count: 0
  subscribers_count: 1
  topics: []
  updated_at: 1652391781.0
roblatham00/cashersize:
  data_format: 2
  description: Exercise caching in the mochi context
  filenames:
  - spack.yaml
  full_name: roblatham00/cashersize
  latest_release: null
  readme: '<p>Your project "cachersize" has been setup!

    Enjoy programming with Mochi!</p>

    '
  stargazers_count: 0
  subscribers_count: 1
  topics: []
  updated_at: 1652377734.0
salotz/scoot:
  data_format: 2
  description: Boost/STL for Scopes
  filenames:
  - spack.yaml
  full_name: salotz/scoot
  latest_release: null
  readme: "<h1><a id=\"user-content-scoot\" class=\"anchor\" aria-hidden=\"true\"\
    \ href=\"#scoot\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>scoot</h1>\n\
    <h2><a id=\"user-content-installation\" class=\"anchor\" aria-hidden=\"true\"\
    \ href=\"#installation\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"\
    ></span></a>Installation</h2>\n<p>The module is under <code>src/scoot</code>.\
    \ You can copy this subtree into your\nproject and then add it to the <code>package.path</code>\
    \ in your Scopes\n<code>_project.sc</code> file.</p>\n<h3><a id=\"user-content-with-spack\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#with-spack\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>With Spack</h3>\n<p>This module\
    \ is available as the <code>scoot</code> package in the\n<a href=\"https://github.com/salotz/snailpacks\"\
    >snailpacks</a> repository. This will pull in the necessary dependencies\nincluding\
    \ Scopes.</p>\n<div class=\"highlight highlight-source-shell\"><pre>  spack install\
    \ scoot</pre></div>\n<p>See the <a href=\"https://github.com/salotz/snailpacks\"\
    >snailpacks</a> documentation for more best practices of installing.</p>\n<h2><a\
    \ id=\"user-content-development-environment\" class=\"anchor\" aria-hidden=\"\
    true\" href=\"#development-environment\"><span aria-hidden=\"true\" class=\"octicon\
    \ octicon-link\"></span></a>Development Environment</h2>\n<p>We use <a href=\"\
    https://spack.io/\" rel=\"nofollow\">Spack</a> to install dependencies. First\
    \ install Spack.</p>\n<p>Then you'll need our custom repo of build recipes:</p>\n\
    <div class=\"highlight highlight-source-shell\"><pre>  mkdir -p <span class=\"\
    pl-s\"><span class=\"pl-pds\">`</span>/.spack/repos</span>\n<span class=\"pl-s\"\
    >  git clone git@github.com:salotz/snailpacks.git <span class=\"pl-pds\">`</span></span>/.spack/repos/snailpacks\n\
    \  spack repo add <span class=\"pl-s\"><span class=\"pl-pds\">`</span>/resources/spack-repos/snailpacks</span></pre></div>\n\
    <p>Then you need to create an environment in this folder that will\ncontain the\
    \ headers and libraries etc., this will create this and\ninstall the packages:</p>\n\
    <div class=\"highlight highlight-source-shell\"><pre>  make init</pre></div>\n\
    <p>Then you can activate the environment to get started:</p>\n<div class=\"highlight\
    \ highlight-source-shell\"><pre>  spacktivate <span class=\"pl-c1\">.</span></pre></div>\n\
    <p>Run some commands:</p>\n<div class=\"highlight highlight-source-shell\"><pre><span\
    \ class=\"pl-c\"><span class=\"pl-c\">#</span> run the sanity entrypoint</span>\n\
    make sanity\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> run the tests</span>\n\
    make <span class=\"pl-c1\">test</span></pre></div>\n<p>To exit the environment\
    \ (i.e. unset the env variables):</p>\n<div class=\"highlight highlight-source-shell\"\
    ><pre>  despacktivate</pre></div>\n"
  stargazers_count: 0
  subscribers_count: 1
  topics: []
  updated_at: 1661112922.0
salotz/scopes-demos:
  data_format: 2
  description: null
  filenames:
  - 003_python-embed/spack.yaml
  full_name: salotz/scopes-demos
  latest_release: null
  readme: "<h2><a id=\"user-content-running-the-demos\" class=\"anchor\" aria-hidden=\"\
    true\" href=\"#running-the-demos\"><span aria-hidden=\"true\" class=\"octicon\
    \ octicon-link\"></span></a>Running the Demos</h2>\n<p>You will need Spack installed\
    \ as well as the <a href=\"\">snailpacks</a> repo. The\nquick bootstrap script\
    \ should be enough to get going if you don't have\nthis installed already:</p>\n\
    <div class=\"highlight highlight-source-shell\"><pre>curl --proto <span class=\"\
    pl-s\"><span class=\"pl-pds\">'</span>=https<span class=\"pl-pds\">'</span></span>\
    \ --tlsv1.2 -sSf https://raw.githubusercontent.com/salotz/snailpacks/master/bootstrap.sh\
    \ <span class=\"pl-k\">|</span> sh</pre></div>\n<p>Then for each demo you can\
    \ build the environment, activate it, and run\nthem.</p>\n<div class=\"highlight\
    \ highlight-source-shell\"><pre>  <span class=\"pl-c1\">cd</span> XXX_demo-name\n\
    \  make env\n  spacktivate <span class=\"pl-c1\">.</span>\n  make run</pre></div>\n\
    <h2><a id=\"user-content-creating-a-new-demo\" class=\"anchor\" aria-hidden=\"\
    true\" href=\"#creating-a-new-demo\"><span aria-hidden=\"true\" class=\"octicon\
    \ octicon-link\"></span></a>Creating a New Demo</h2>\n<p>You can use the template\
    \ for a quick start (requires <code>copier</code> &gt; 6):</p>\n<div class=\"\
    highlight highlight-source-shell\"><pre>copier template</pre></div>\n<p>To update\
    \ the</p>\n"
  stargazers_count: 0
  subscribers_count: 1
  topics: []
  updated_at: 1657842137.0
salotz/scopes-lib_copier-template:
  data_format: 2
  description: Copier template for a Scopes library
  filenames:
  - template/spack.yaml
  full_name: salotz/scopes-lib_copier-template
  latest_release: null
  readme: "<h1><a id=\"user-content-project-template-for-a-scopes-lang-library\" class=\"\
    anchor\" aria-hidden=\"true\" href=\"#project-template-for-a-scopes-lang-library\"\
    ><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Project\
    \ Template for a Scopes Lang Library</h1>\n<p>This is a project template generator\
    \ and updater using the\n<a href=\"https://github.com/copier-org/copier/\">copier</a>\
    \ tool for creating libraries for the <a href=\"http://scopes.rocks\" rel=\"nofollow\"\
    >Scopes</a> programming language.</p>\n<p>Please install from the latest copier\
    \ for this to work, not the latest\nstable release. Currently I am using\n<a href=\"\
    https://github.com/pypa/pipx\">pipx</a>:</p>\n<div class=\"highlight highlight-source-shell\"\
    ><pre>pipx install copier</pre></div>\n<h2><a id=\"user-content-generating-and-updating-a-project\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#generating-and-updating-a-project\"\
    ><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Generating\
    \ and Updating a Project</h2>\n<p>Then you can generate your project:</p>\n<div\
    \ class=\"highlight highlight-source-shell\"><pre>copier <span class=\"pl-s\"\
    ><span class=\"pl-pds\">'</span>gh:salotz/scopes-lib_copier-template<span class=\"\
    pl-pds\">'</span></span> name-of-folder</pre></div>\n<p>This should generate something\
    \ like the following (<code>repo_name = my-lib</code>):</p>\n<pre><code>name-of-folder\n\
    \u251C\u2500\u2500 __env.sc\n\u251C\u2500\u2500 Makefile\n\u251C\u2500\u2500 README.md\n\
    \u251C\u2500\u2500 spack.yaml\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500\
    \ my-lib\n        \u251C\u2500\u2500 init.sc\n        \u2514\u2500\u2500 ...\n\
    </code></pre>\n<p>You can update the project with:</p>\n<div class=\"highlight\
    \ highlight-source-shell\"><pre><span class=\"pl-c1\">cd</span> name-of-folder\n\
    copier update</pre></div>\n<p>See documentation of copier for more details.</p>\n\
    <h2><a id=\"user-content-development-environment\" class=\"anchor\" aria-hidden=\"\
    true\" href=\"#development-environment\"><span aria-hidden=\"true\" class=\"octicon\
    \ octicon-link\"></span></a>Development Environment</h2>\n<p>See the docs in <code>template/README.md.jinja</code>\
    \ that will be generated for\neach project.</p>\n<h2><a id=\"user-content-libraries-using-this-template\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#libraries-using-this-template\"\
    ><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Libraries\
    \ Using this Template</h2>\n<ul>\n<li><a href=\"https://github.com/salotz/raylib-scopes\"\
    >scopes-raylib</a></li>\n<li><a href=\"https://github.com/salotz/scopes-chipmunk2d\"\
    >scopes-chipmunk2d</a></li>\n</ul>\n"
  stargazers_count: 0
  subscribers_count: 1
  topics:
  - copier-template
  - scopes-lang
  updated_at: 1648781021.0
salotz/snailpacks:
  data_format: 2
  description: Spack repo for multimedia development
  filenames:
  - examples/c-scons/spack.yaml
  - examples/c-embed-python/spack.yaml
  - examples/c-premake/spack.yaml
  - examples/c-genie/spack.yaml
  - examples/c-embed-chibi/spack.yaml
  - examples/c-meson/spack.yaml
  - examples/c-wgpu/spack.yaml
  - examples/c-cmake/spack.yaml
  full_name: salotz/snailpacks
  latest_release: null
  stargazers_count: 1
  subscribers_count: 1
  topics:
  - spack
  - spack-repo
  - scopes-lang
  - multimedia
  - game-development
  - package-manager
  - development-environment
  updated_at: 1648089720.0
sayefsakin/auto_profiler:
  data_format: 2
  description: null
  filenames:
  - py_src/spack.yaml
  full_name: sayefsakin/auto_profiler
  latest_release: null
  stargazers_count: 0
  subscribers_count: 1
  topics: []
  updated_at: 1659512207.0
srini009/serviz:
  data_format: 2
  description: Ascent visualization microservice built using the Mochi software stack
  filenames:
  - spack_laptop.yaml
  - spack.yaml
  full_name: srini009/serviz
  latest_release: v0.1.0
  readme: '<h1><a id="user-content-serviz-a-shared-in-situ-visualization-service"
    class="anchor" aria-hidden="true" href="#serviz-a-shared-in-situ-visualization-service"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>SERVIZ: A Shared In
    Situ Visualization Service</h1>

    <p>This is an experimental repo implementing a distributed Ascent visualization
    microservice.</p>

    <p>Inline and in transit visualization have arisen as popular models of in situ
    visualization for high performance computing (HPC) applications. Inline visualization
    is invoked through a library call on the HPC application (simulation code), while
    in transit methods involve the invocation of the visualization module on in transit
    resources. Compared to inline methods, in transit methods have the flexibility
    to run at a lower level of concurrency than the simulation code, allowing them
    to offer better efficiency for the visualization operation. The state-of-the-art
    in transit schemes are limited to employing a dedicated in transit resource for
    every HPC application.

    This results in significant idle time on the in transit resource and severely
    limits the cost savings that can be achieved over the inline model.

    This research proposes that a single, in transit visualization service be shared
    amongst multiple HPC applications to make efficient use of the in transit resources
    by reducing the idle time. We realize this idea through SERVIZ, a shared in transit
    visualization service. SERVIZ achieves cost savings of up to 40% over inline (at
    scale) and up to 4x reduction in idle time compared to a dedicated in transit
    implementation.

    In all, the results from this work identify that a shared in transit resource
    is an attractive approach for cost efficiency.</p>

    <p>SERVIZ is a hybrid MPI + RPC visualization program that can be partitioned
    into multiple "instances" that are each capable

    of serving multiple clients simultaneously. RPC is used to transfer simulation
    data to the SERVIZ instance, and MPI is subsequently used to

    parallelize the visualization operation.

    <a target="_blank" rel="noopener noreferrer" href="SERVIZ.svg"><img src="SERVIZ.svg"
    alt="SERVIZ" style="max-width: 100%;"></a></p>

    '
  stargazers_count: 0
  subscribers_count: 2
  topics: []
  updated_at: 1649894816.0
supercontainers/isc-tutorial:
  data_format: 2
  description: ISC 2022 -- Getting Started with Containers on HPC
  filenames:
  - files/spack_contenerize/spack.yaml
  - exercises/spack_contenerize/spack.yaml
  full_name: supercontainers/isc-tutorial
  latest_release: null
  readme: '<h1><a id="user-content-getting-started-with-containers-on-hpc" class="anchor"
    aria-hidden="true" href="#getting-started-with-containers-on-hpc"><span aria-hidden="true"
    class="octicon octicon-link"></span></a>Getting Started with Containers on HPC</h1>

    <p>View this on the <a href="https://supercontainers.github.io/isc-tutorial/"
    rel="nofollow">Tutorial Homepage</a>.</p>

    <h2><a id="user-content-ecp-supercontainers-tutorial-session" class="anchor" aria-hidden="true"
    href="#ecp-supercontainers-tutorial-session"><span aria-hidden="true" class="octicon
    octicon-link"></span></a>ECP Supercontainers Tutorial Session</h2>

    <p><a target="_blank" rel="noopener noreferrer" href="fig/ecp.jpg"><img src="fig/ecp.jpg"
    width="250" style="max-width: 100%;"></a><a target="_blank" rel="noopener noreferrer"
    href="fig/pawsey.jpeg"><img src="fig/pawsey.jpeg" width="250" style="max-width:
    100%;"></a></p>

    <h2><a id="user-content-details" class="anchor" aria-hidden="true" href="#details"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Details</h2>

    <p>Half-day Tutorial Session</p>

    <p>Venue: International Supercomputing Conference (ISC 2022)</p>

    <p>Date: 29 May 2022 2:00pm - 6:00pm, Central European Summer Time CEST (GMT+2)</p>

    <p>Location: Hamburg, Germany</p>

    <p>Link: <a href="https://app.swapcard.com/widget/event/isc-high-performance-2022/planning/UGxhbm5pbmdfODYxMTU3"
    rel="nofollow">ISC 2022 Schedule</a></p>

    <p>Keywords: Containerized HPC, System Software and Runtime Systems, Scientific
    Software Development, DevOps</p>

    <h2><a id="user-content-ec2-login" class="anchor" aria-hidden="true" href="#ec2-login"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>EC2 Login</h2>

    <p>These will be provided the day of the tutorial.</p>

    <h2><a id="user-content-abstract" class="anchor" aria-hidden="true" href="#abstract"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Abstract</h2>

    <p>Container computing has revolutionized the way applications are developed and
    delivered.  It offers opportunities that never existed before for significantly
    improving efficiency of scientific workflows and easily moving these workflows
    from the laptop to the supercomputer.  Tools like Docker, Shifter, Singularity,
    Charliecloud and Podman enable a new paradigm for scientific and technical computing.  However,
    to fully unlock its potential, users and administrators need to understand how
    to utilize these new approaches.  This tutorial will introduce attendees to the
    basics of creating container images, explain best practices, and cover more advanced
    topics such as creating images to be run on HPC platforms using various container
    runtimes.  The tutorial will also explain how research scientists can utilize
    container-based computing to accelerate their research and how these tools can
    boost the impact of their research by enabling better reproducibility and sharing
    of their scientific process without compromising security.</p>

    <p>This is an updated version of the highly successful tutorial presented at SC16-21
    and ISC19-21.</p>

    <h2><a id="user-content-prerequisites" class="anchor" aria-hidden="true" href="#prerequisites"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Prerequisites</h2>

    <p>This is a hands-on tutorial.  Participants should bring a laptop and load or
    pre-install a terminal and/or ssh client in advance to make best use of time during
    the tutorial.  We will be providing training user accounts to both pre-configured
    EC2 instances.</p>

    <div><a target="_blank" rel="noopener noreferrer" href="fig/AWS_logo.png"><img
    src="fig/AWS_logo.png" width="250" style="max-width: 100%;"></a></div>

    <p>This tutorial is supported by the Amazon AWS Machine Learning Research Awards.  EC2
    images and temporary login credentials will be distributed onsite at the tutorial.</p>

    <p>After the tutorial, you can boot our tutorial image yourself on Amazon EC2
    to run through the tutorial again. We recommend you use your own EC2 key and change
    the password.</p>

    <p>US-West-Oregon: ami-0fe12765123c6a840</p>

    <h3><a id="user-content-optional-prerequisites" class="anchor" aria-hidden="true"
    href="#optional-prerequisites"><span aria-hidden="true" class="octicon octicon-link"></span></a>Optional
    Prerequisites</h3>

    <p>Users can also install Docker and Singularity prior to attending the tutorial
    session.  Here, it may be beneficial to create Docker and Sylabs (Singularity)
    accounts in advance at <a href="https://cloud.docker.com/" rel="nofollow">https://cloud.docker.com/</a>
    and <a href="https://cloud.sylabs.io/" rel="nofollow">https://cloud.sylabs.io/</a>.  These
    accounts will be needed to create images on Docker Cloud/Dockerhub and Sylabs
    Cloud.</p>

    <p><a href="https://sylabs.io/guides/3.7/user-guide/" rel="nofollow">Install Singularity
    on Linux</a></p>

    <p><a href="https://repo.sylabs.io/desktop/" rel="nofollow">Install Singularity
    on Mac</a> (Alpha)</p>

    <p><a href="https://www.docker.com/products/docker-desktop" rel="nofollow">Install
    Docker for Desktop</a></p>

    <h2><a id="user-content-questions" class="anchor" aria-hidden="true" href="#questions"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Questions</h2>

    <p>You can ask questions verbally or with this <a href="https://docs.google.com/document/d/11gMZ-T7iA5XiRWPLYIqX7Gqv7RMb-NF9kzGYHrnOi04/edit?usp=sharing"
    rel="nofollow">Google Doc</a>.

    Please append your question below the others in the document.</p>

    <p>We have also created a Slack Team for this.  The invitation link is <a href="https://join.slack.com/t/hpc-containers/shared_invite/enQtODI3NzY1NDU4OTk5LTUxOTgyOWJmYjIwOWI5YWU2MzBhZDI3Zjc1YmZmMjAxZjgzYzk4ZWEwNmFlNzlkOWI0MGNlZDNlMTBhYTBlOWY"
    rel="nofollow">here</a>.</p>

    <h2><a id="user-content-schedule-see-the-git-pages-site-for-the-autogenerated-version"
    class="anchor" aria-hidden="true" href="#schedule-see-the-git-pages-site-for-the-autogenerated-version"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Schedule (See the git
    pages site for the autogenerated version)</h2>

    <p>14:00 - 14:15 Introduction to containers in HPC (Shane)<br>

    Including defining jargon (containers, images, registries/repos,..)</p>

    <p>14:15 - 14:55 Build and run your first container (Eduardo)<br>

    Basic of containers and understanding the OCI Image Spec</p>

    <p>14:55 - 15:30 Deploy containers on a supercomputer (Alexis)</p>

    <p>15:30 - 16:00 High-performance containers (Alexis)</p>

    <p>16:00 - 16:30 BREAK</p>

    <p>16:30 - 17:05 Best practices (Shane)</p>

    <p>17:05 - 17:35 E4S containers initiative (Sameer)</p>

    <p>17:35 - 17:55 Advanced container builds (Eduardo)</p>

    <p>17:55 - 18:00 Wrap-up and final Q&amp;A</p>

    '
  stargazers_count: 5
  subscribers_count: 8
  topics:
  - hpc
  - containers
  - singularity-container
  - singularity
  - shifter
  - docker
  - tutorial
  - supercomputer
  updated_at: 1659454820.0
sxs-collaboration/spectre:
  data_format: 2
  description: SpECTRE is a code for multi-scale, multi-physics problems in astrophysics
    and gravitational physics.
  filenames:
  - support/DevEnvironments/spack.yaml
  full_name: sxs-collaboration/spectre
  latest_release: v2022.08.01
  readme: "<p><a href=\"https://github.com/sxs-collaboration/spectre/blob/develop/LICENSE.txt\"\
    ><img src=\"https://camo.githubusercontent.com/83d3746e5881c1867665223424263d8e604df233d0a11aae0813e0414d433943/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e737667\"\
    \ alt=\"license\" data-canonical-src=\"https://img.shields.io/badge/license-MIT-blue.svg\"\
    \ style=\"max-width: 100%;\"></a>\n<a href=\"https://en.wikipedia.org/wiki/C%2B%2B#Standardization\"\
    \ rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/a3dbfd7a9a0364af5f02772460bf69fce89f741e10fb7c8e9aa3f26a0d96cfe7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f632532422532422d31372d626c75652e737667\"\
    \ alt=\"Standard\" data-canonical-src=\"https://img.shields.io/badge/c%2B%2B-17-blue.svg\"\
    \ style=\"max-width: 100%;\"></a>\n<a href=\"https://github.com/sxs-collaboration/spectre/actions\"\
    ><img src=\"https://github.com/sxs-collaboration/spectre/workflows/Tests/badge.svg?branch=develop\"\
    \ alt=\"Build Status\" style=\"max-width: 100%;\"></a>\n<a href=\"https://coveralls.io/github/sxs-collaboration/spectre?branch=develop\"\
    \ rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/e909837c9640462fc3f2587028319e5f5dc6198453d97af6b12696ddeb34930b/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f7378732d636f6c6c61626f726174696f6e2f737065637472652f62616467652e7376673f6272616e63683d646576656c6f70\"\
    \ alt=\"Coverage Status\" data-canonical-src=\"https://coveralls.io/repos/github/sxs-collaboration/spectre/badge.svg?branch=develop\"\
    \ style=\"max-width: 100%;\"></a>\n<a href=\"https://codecov.io/gh/sxs-collaboration/spectre\"\
    \ rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/2b0d1a9c279878e18a98627f608e86ad2f22a730eebd7713b9ba9b173a16cdbb/68747470733a2f2f636f6465636f762e696f2f67682f7378732d636f6c6c61626f726174696f6e2f737065637472652f6272616e63682f646576656c6f702f67726170682f62616467652e737667\"\
    \ alt=\"codecov\" data-canonical-src=\"https://codecov.io/gh/sxs-collaboration/spectre/branch/develop/graph/badge.svg\"\
    \ style=\"max-width: 100%;\"></a>\n<a href=\"https://github.com/sxs-collaboration/spectre/releases/tag/v2022.08.01\"\
    ><img src=\"https://camo.githubusercontent.com/d330355103eb34021e58bbc6466c4892ffa3bb88478abffa21a6ecc969ff1419/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f72656c656173652d76323032322e30382e30312d696e666f726d6174696f6e616c\"\
    \ alt=\"release\" data-canonical-src=\"https://img.shields.io/badge/release-v2022.08.01-informational\"\
    \ style=\"max-width: 100%;\"></a>\n<a href=\"https://doi.org/10.5281/zenodo.6949324\"\
    \ rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/be2dfd20e83367dd35bc53950980cd02503fcc6e3ea5d7ae5c5cce9f1a4eb26e/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f646f692f31302e353238312f7a656e6f646f2e363934393332342e737667\"\
    \ alt=\"DOI\" data-canonical-src=\"https://zenodo.org/badge/doi/10.5281/zenodo.6949324.svg\"\
    \ style=\"max-width: 100%;\"></a></p>\n<h2><a id=\"user-content-what-is-spectre\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#what-is-spectre\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>What is SpECTRE?</h2>\n<p>SpECTRE\
    \ is an open-source code for multi-scale, multi-physics problems\nin astrophysics\
    \ and gravitational physics. In the future, we hope that\nit can be applied to\
    \ problems across discipline boundaries in fluid\ndynamics, geoscience, plasma\
    \ physics, nuclear physics, and\nengineering. It runs at petascale and is designed\
    \ for future exascale\ncomputers.</p>\n<p>SpECTRE is being developed in support\
    \ of our collaborative Simulating\neXtreme Spacetimes (SXS) research program into\
    \ the multi-messenger\nastrophysics of neutron star mergers, core-collapse supernovae,\
    \ and\ngamma-ray bursts.</p>\n<h2><a id=\"user-content-citing-spectre\" class=\"\
    anchor\" aria-hidden=\"true\" href=\"#citing-spectre\"><span aria-hidden=\"true\"\
    \ class=\"octicon octicon-link\"></span></a>Citing SpECTRE</h2>\n<p>Please cite\
    \ SpECTRE in any publications that make use of its code or data. Cite\nthe latest\
    \ version that you use in your publication. The DOI for this version\nis:</p>\n\
    <ul>\n<li>DOI: <a href=\"https://doi.org/10.5281/zenodo.6949324\" rel=\"nofollow\"\
    >10.5281/zenodo.6949324</a>\n</li>\n</ul>\n<p>You can cite this BibTeX entry in\
    \ your publication:</p>\n\n\n<div class=\"highlight highlight-text-bibtex\"><pre><span\
    \ class=\"pl-k\">@software</span>{<span class=\"pl-en\">spectrecode</span>,\n\
    \    <span class=\"pl-s\">author</span> = <span class=\"pl-s\"><span class=\"\
    pl-pds\">\"</span>Deppe, Nils and Throwe, William and Kidder, Lawrence E. and\
    \ Vu,</span>\n<span class=\"pl-s\">Nils L. and H\\'ebert, Fran\\c{c}ois and Moxon,\
    \ Jordan and Armaza, Crist\\'obal and</span>\n<span class=\"pl-s\">Bonilla, Gabriel\
    \ S. and Kim, Yoonsoo and Kumar, Prayush and Lovelace, Geoffrey</span>\n<span\
    \ class=\"pl-s\">and Macedo, Alexandra and Nelli, Kyle C. and O'Shea, Eamonn and\
    \ Pfeiffer, Harald</span>\n<span class=\"pl-s\">P. and Scheel, Mark A. and Teukolsky,\
    \ Saul A. and Wittek, Nikolas A. and</span>\n<span class=\"pl-s\">others<span\
    \ class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\">title</span> =\
    \ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>\\texttt{SpECTRE v2022.08.01}<span\
    \ class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\">version</span>\
    \ = <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>2022.08.01<span class=\"\
    pl-pds\">\"</span></span>,\n    <span class=\"pl-s\">publisher</span> = <span\
    \ class=\"pl-s\"><span class=\"pl-pds\">\"</span>Zenodo<span class=\"pl-pds\"\
    >\"</span></span>,\n    <span class=\"pl-s\">doi</span> = <span class=\"pl-s\"\
    ><span class=\"pl-pds\">\"</span>10.5281/zenodo.6949324<span class=\"pl-pds\"\
    >\"</span></span>,\n    <span class=\"pl-s\">url</span> = <span class=\"pl-s\"\
    ><span class=\"pl-pds\">\"</span>https://spectre-code.org<span class=\"pl-pds\"\
    >\"</span></span>,\n    <span class=\"pl-s\">howpublished</span> =\n<span class=\"\
    pl-s\"><span class=\"pl-pds\">\"</span>\\href{https://doi.org/10.5281/zenodo.6949324}{10.5281/zenodo.6949324}<span\
    \ class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\">license</span>\
    \ = <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>MIT<span class=\"pl-pds\"\
    >\"</span></span>,\n    <span class=\"pl-s\">year</span> = <span class=\"pl-s\"\
    ><span class=\"pl-pds\">\"</span>2022<span class=\"pl-pds\">\"</span></span>,\n\
    \    <span class=\"pl-s\">month</span> = <span class=\"pl-s\"><span class=\"pl-pds\"\
    >\"</span>8<span class=\"pl-pds\">\"</span></span>\n}</pre></div>\n\n<p>To aid\
    \ reproducibility of your scientific results with SpECTRE, we recommend you\n\
    keep track of the version(s) you used and report this information in your\npublication.\
    \ We also recommend you supply the YAML input files and, if\nappropriate, any\
    \ additional C++ code you wrote to compile SpECTRE executables as\nsupplemental\
    \ material to the publication.</p>\n<p>See our <a href=\"https://spectre-code.org/publication_policies.html\"\
    \ rel=\"nofollow\">publication policy</a>\nfor more information.</p>\n<h2><a id=\"\
    user-content-viewing-documentation\" class=\"anchor\" aria-hidden=\"true\" href=\"\
    #viewing-documentation\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"\
    ></span></a>Viewing Documentation</h2>\n<p>The documentation can be viewed at\
    \ <a href=\"https://spectre-code.org/\" rel=\"nofollow\">https://spectre-code.org/</a>.</p>\n"
  stargazers_count: 113
  subscribers_count: 14
  topics: []
  updated_at: 1660531817.0
trilinos/ForTrilinos:
  data_format: 2
  description: ForTrilinos provides portable object-oriented Fortran interfaces to
    Trilinos C++ packages.
  filenames:
  - scripts/spack.yaml
  full_name: trilinos/ForTrilinos
  latest_release: v2.1.0
  readme: '<h1><a id="user-content-fortrilinos" class="anchor" aria-hidden="true"
    href="#fortrilinos"><span aria-hidden="true" class="octicon octicon-link"></span></a>ForTrilinos</h1>

    <p><a href="https://cloud.cees.ornl.gov/jenkins-ci/job/ForTrilinos-master-continuous"
    rel="nofollow"><img src="https://camo.githubusercontent.com/857fffb6b672ed62abe998b01a81c3932111fcba10541918cb2f938f414440e6/68747470733a2f2f636c6f75642e636565732e6f726e6c2e676f762f6a656e6b696e732d63692f6275696c645374617475732f69636f6e3f6a6f623d466f725472696c696e6f732d6d61737465722d636f6e74696e756f7573"
    alt="Build Status" data-canonical-src="https://cloud.cees.ornl.gov/jenkins-ci/buildStatus/icon?job=ForTrilinos-master-continuous"
    style="max-width: 100%;"></a>

    <a href="http://fortrilinos.readthedocs.io/en/latest/?badge=latest" rel="nofollow"><img
    src="https://camo.githubusercontent.com/e261f09cffcfcbf7e647f541614bf7912e3018ccd3a085f035a1219a854f5867/687474703a2f2f72656164746865646f63732e6f72672f70726f6a656374732f666f727472696c696e6f732f62616467652f3f76657273696f6e3d6c6174657374"
    alt="Documentation Status" data-canonical-src="http://readthedocs.org/projects/fortrilinos/badge/?version=latest"
    style="max-width: 100%;"></a>

    <a href="https://codecov.io/gh/trilinos/ForTrilinos/branch/develop" rel="nofollow"><img
    src="https://camo.githubusercontent.com/fbeea009914f87218441791dba76a1a512b7c287749f94ff47d7b76f49902d23/68747470733a2f2f636f6465636f762e696f2f67682f7472696c696e6f732f466f725472696c696e6f732f6272616e63682f646576656c6f702f67726170682f62616467652e737667"
    alt="codecov" data-canonical-src="https://codecov.io/gh/trilinos/ForTrilinos/branch/develop/graph/badge.svg"
    style="max-width: 100%;"></a></p>

    <p><a href="http://trilinos.org/packages/fortrilinos" rel="nofollow">ForTrilinos</a>
    is a part of the <a href="http://trilinos.org" rel="nofollow">Trilinos</a> project
    and provides object-oriented Fortran interfaces to Trilinos C++ packages.</p>

    <p>This is the new effort to provide Fortran interfaces to Trilinos through

    automatic code generation using SWIG. The previous effort (ca. 2008-2012) can

    be obtained by downloading Trilinos releases prior to 12.12. See <a href="https://fortrilinos.readthedocs.io/en/latest/install.html#version-compatibility"
    rel="nofollow">the

    documentation</a> for details on version compatibility.</p>

    <h2><a id="user-content-provided-functionality" class="anchor" aria-hidden="true"
    href="#provided-functionality"><span aria-hidden="true" class="octicon octicon-link"></span></a>Provided
    functionality</h2>

    <p>ForTrilinos provides Fortran interfaces for the following capabilities:</p>

    <ul>

    <li>Parameter lists and XML parsers (through Teuchos);</li>

    <li>Distributed linear algebra object including sparse graphs, sparse matrices,
    and dense vectors (through Tpetra);</li>

    <li>Linear solvers and preconditioners (through Stratimikos, Ifpack2, Belos, MueLu);</li>

    <li>Eigen solvers (through Anasazi).</li>

    </ul>

    <h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Documentation</h2>

    <ul>

    <li>

    <p><a href="https://fortrilinos.readthedocs.org" rel="nofollow">Documentation</a></p>

    </li>

    <li>

    <p><a href="https://trilinos.github.io/ForTrilinos/" rel="nofollow">Summary</a></p>

    </li>

    </ul>

    <h2><a id="user-content-installing-fortrilinos" class="anchor" aria-hidden="true"
    href="#installing-fortrilinos"><span aria-hidden="true" class="octicon octicon-link"></span></a>Installing
    ForTrilinos</h2>

    <p>Please consult the documentation available <a href="https://fortrilinos.readthedocs.io/en/latest/install.html"
    rel="nofollow">here</a>.</p>

    <h2><a id="user-content-questions-bug-reporting-and-issue-tracking" class="anchor"
    aria-hidden="true" href="#questions-bug-reporting-and-issue-tracking"><span aria-hidden="true"
    class="octicon octicon-link"></span></a>Questions, Bug Reporting, and Issue Tracking</h2>

    <p>Questions, bug reporting and issue tracking are provided by GitHub. Please

    report all bugs by creating a new issue with the bug tag. You can ask

    questions by creating a new issue with the question tag.</p>

    <h2><a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Contributing</h2>

    <p>We encourage you to contribute to ForTrilinos! Please check out the

    <a href="CONTRIBUTING.md">guidelines</a> about how to proceed.</p>

    <h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>License</h2>

    <p>ForTrilinos is licensed under a BSD license.</p>

    '
  stargazers_count: 24
  subscribers_count: 10
  topics:
  - trilinos
  - fortran
  - swig
  - scientific-computing
  updated_at: 1654781824.0
ukri-excalibur/excalibur-tests:
  data_format: 2
  description: Performance benchmarks and regression tests for the ExCALIBUR project
  filenames:
  - spack-environments/csd3-skylake/compute-node/spack.yaml
  - spack-environments/cosma8/compute-node/spack.yaml
  - spack-environments/github-actions/default/spack.yaml
  - spack-environments/myriad/compute-node/spack.yaml
  - spack-environments/tursa/cpu/spack.yaml
  - spack-environments/tesseract/compute-node/spack.yaml
  - spack-environments/dial3/compute-node/spack.yaml
  - spack-environments/csd3-icelake/compute-node/spack.yaml
  full_name: ukri-excalibur/excalibur-tests
  latest_release: null
  readme: "<h1><a id=\"user-content-excalibur-tests\" class=\"anchor\" aria-hidden=\"\
    true\" href=\"#excalibur-tests\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"\
    ></span></a>ExCALIBUR tests</h1>\n<p>Performance benchmarks and regression tests\
    \ for the ExCALIBUR project.</p>\n<p>These benchmarks are based on a similar project\
    \ by\n<a href=\"https://github.com/stackhpc/hpc-tests\">StackHPC</a>.</p>\n<p><em><strong>Note</strong>:\
    \ at the moment the ExCALIBUR benchmarks are a work-in-progress.</em></p>\n<h2><a\
    \ id=\"user-content-requirements\" class=\"anchor\" aria-hidden=\"true\" href=\"\
    #requirements\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Requirements</h2>\n\
    <h3><a id=\"user-content-spack\" class=\"anchor\" aria-hidden=\"true\" href=\"\
    #spack\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Spack</h3>\n\
    <p><em><strong>Note</strong>: in some HPC facilities there may be already a central\
    \ Spack\ninstallation available.  In principle you should be able to use that\
    \ one (you\nonly need to have <code>spack</code> in the <code>PATH</code>), but\
    \ you may need an up-to-date version\nof Spack in order to install some packages.\
    \  Instructions below show you how to\ninstall Spack locally.</em></p>\n<p><a\
    \ href=\"https://spack.io/\" rel=\"nofollow\">Spack</a> is a package manager specifically\
    \ designed for HPC\nfacilities.  Follow the <a href=\"https://spack.readthedocs.io/en/latest/getting_started.html\"\
    \ rel=\"nofollow\">official\ninstructions</a> to\ninstall the latest version of\
    \ Spack.</p>\n<p>In order to use Spack in ReFrame, the framework we use to run\
    \ the benchmarks\n(see below), the directory where the <code>spack</code> program\
    \ is installed needs to be in\nthe <code>PATH</code> environment variable.  This\
    \ can be achieved for instance by running\nthe commands to get shell support described\
    \ in Spack documentation, which you\ncan also add to your shell init script to\
    \ do it automatically in every session.\nFor example, if you use a shell of the\
    \ family bash/zsh/sh you can add to your\ninit script:</p>\n<div class=\"highlight\
    \ highlight-source-shell\"><pre><span class=\"pl-k\">export</span> SPACK_ROOT=<span\
    \ class=\"pl-s\"><span class=\"pl-pds\">\"</span>/path/to/spack<span class=\"\
    pl-pds\">\"</span></span>\n<span class=\"pl-k\">if</span> [ <span class=\"pl-k\"\
    >-f</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"\
    pl-smi\">${SPACK_ROOT}</span>/share/spack/setup-env.sh<span class=\"pl-pds\">\"\
    </span></span> ]<span class=\"pl-k\">;</span> <span class=\"pl-k\">then</span>\n\
    \    <span class=\"pl-c1\">source</span> <span class=\"pl-s\"><span class=\"pl-pds\"\
    >\"</span><span class=\"pl-smi\">${SPACK_ROOT}</span>/share/spack/setup-env.sh<span\
    \ class=\"pl-pds\">\"</span></span>\n<span class=\"pl-k\">fi</span></pre></div>\n\
    <p>replacing <code>/path/to/spack</code> with the actual path to your Spack installation.</p>\n\
    <p>ReFrame requires a <a href=\"https://spack.readthedocs.io/en/latest/environments.html\"\
    \ rel=\"nofollow\">Spack\nEnvironment</a>.  We\nprovide Spack environments for\
    \ some of the systems that are part of the\nExCALIBUR and DiRac projects.  If\
    \ you want to use a different Spack environment,\nset the environment variable\
    \ <code>EXCALIBUR_SPACK_ENV</code> to the path of the directory\nwhere the environment\
    \ is.  If this is not set, ReFrame will try to use the\nenvironment for the current\
    \ system, if known, otherwise it will automatically\ncreate a very basic environment.</p>\n\
    <h3><a id=\"user-content-reframe\" class=\"anchor\" aria-hidden=\"true\" href=\"\
    #reframe\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>ReFrame</h3>\n\
    <p><a href=\"https://reframe-hpc.readthedocs.io/en/stable/\" rel=\"nofollow\"\
    >ReFrame</a> is a high-level\nframework for writing regression tests for HPC systems.\
    \  For our tests we\nrequire ReFrame 3.10.1.  Follow the <a href=\"https://reframe-hpc.readthedocs.io/en/stable/started.html\"\
    \ rel=\"nofollow\">official\ninstructions</a> to\ninstall this package.  Note\
    \ that ReFrame requires Python 3.6: in your HPC system\nyou may need to load a\
    \ specific module to have this version of Python available.</p>\n<p>We provide\
    \ a ReFrame configuration file with the settings of some systems that\nare part\
    \ of the ExCALIBUR project.  You can point ReFrame to this file by\nsetting the\n\
    <a href=\"https://reframe-hpc.readthedocs.io/en/stable/manpage.html#envvar-RFM_CONFIG_FILE\"\
    \ rel=\"nofollow\"><code>RFM_CONFIG_FILE</code></a>\nenvironment variable:</p>\n\
    <div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-k\">export</span>\
    \ RFM_CONFIG_FILE=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"\
    pl-smi\">${PWD}</span>/reframe_config.py<span class=\"pl-pds\">\"</span></span></pre></div>\n\
    <p>If you want to use a different ReFrame configuration file, for example because\n\
    you use a different system, you can set this environment variable to the path\
    \ of\nthat file.</p>\n<p><strong>Note</strong>: in order to use the Spack build\
    \ system in ReFrame, the <code>spack</code>\nexecutable must be in the <code>PATH</code>,\
    \ also on the computing nodes of a cluster, if\nyou want to run your benchmarks\
    \ on them.  Note that by default ReFrame uses</p>\n<div class=\"highlight highlight-source-shell\"\
    ><pre><span class=\"pl-k\">!</span><span class=\"pl-c\"><span class=\"pl-c\">#</span>/bin/bash</span></pre></div>\n\
    <p>as <a href=\"https://en.wikipedia.org/wiki/Shebang_(Unix)\" rel=\"nofollow\"\
    >shebang</a>, which would not load\nthe user's init script.  If you have added\
    \ Spack to your <code>PATH</code> within your init\nscript, you may want to set\
    \ the\n<a href=\"https://reframe-hpc.readthedocs.io/en/stable/manpage.html#envvar-RFM_USE_LOGIN_SHELL\"\
    \ rel=\"nofollow\"><code>RFM_USE_LOGIN_SHELL</code></a>\nenvironment variable\
    \ in order to make ReFrame use</p>\n<div class=\"highlight highlight-source-shell\"\
    ><pre><span class=\"pl-k\">!</span><span class=\"pl-c\"><span class=\"pl-c\">#</span>/bin/bash\
    \ -l</span></pre></div>\n<p>as shebang line, instead.</p>\n<h2><a id=\"user-content-usage\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#usage\"><span aria-hidden=\"true\"\
    \ class=\"octicon octicon-link\"></span></a>Usage</h2>\n<p>Once you have set up\
    \ Spack and ReFrame, you can execute a benchmark with</p>\n<div class=\"highlight\
    \ highlight-source-shell\"><pre>reframe -c apps/BENCH_NAME -r --performance-report</pre></div>\n\
    <p>where <code>apps/BENCH_NAME</code> is the directory where the benchmark is.\
    \  The command\nabove supposes you have the program <code>reframe</code> in your\
    \ PATH, if it is not the\ncase you can also call <code>reframe</code> with its\
    \ relative or absolute path.  For\nexample, to run the Sombrero benchmark in the\
    \ <code>apps/sombrero</code> directory you can\nuse</p>\n<div class=\"highlight\
    \ highlight-source-shell\"><pre>reframe -c apps/sombrero -r --performance-report</pre></div>\n\
    <p>For benchmark using the Spack build system, the tests define a default Spack\
    \ specification\nto be installed in the environment, but users can change it when\
    \ invoking ReFrame on the\ncommand line with the\n<a href=\"https://reframe-hpc.readthedocs.io/en/stable/manpage.html#cmdoption-S\"\
    \ rel=\"nofollow\"><code>-S</code></a> option to set\nthe <code>spack_spec</code>\
    \ variable:</p>\n<pre><code>reframe -c apps/sombrero -r --performance-report -S\
    \ spack_spec='sombrero@2021-08-16%intel'\n</code></pre>\n<h3><a id=\"user-content-selecting-system-and-queue-access-options\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#selecting-system-and-queue-access-options\"\
    ><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Selecting\
    \ system and queue access options</h3>\n<p>The provided ReFrame configuration\
    \ file contains the settings for multiple systems.  If you\nuse it, the automatic\
    \ detection of the system may fail, as some systems may use clashing\nhostnames.\
    \  You can always use the flag <a href=\"https://reframe-hpc.readthedocs.io/en/stable/manpage.html#cmdoption-system\"\
    \ rel=\"nofollow\"><code>--system NAME:PARTITION</code></a>\nto specify the system\
    \ (and optionally the partition) to use.</p>\n<p>Additionally, if submitting jobs\
    \ to the compute nodes requires additional options, like for\nexample the resource\
    \ group you belong to (for example <code>--account=...</code> for Slurm), you\
    \ have\nto pass the command line flag\n<a href=\"https://reframe-hpc.readthedocs.io/en/stable/manpage.html#cmdoption-J\"\
    \ rel=\"nofollow\"><code>--job-option=...</code></a>\nto <code>reframe</code>\
    \ (e.g., <code>--job-option='--account=...'</code>).</p>\n<h3><a id=\"user-content-unsupported-systems\"\
    \ class=\"anchor\" aria-hidden=\"true\" href=\"#unsupported-systems\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>Unsupported systems</h3>\n<p>The\
    \ configuration provided in <a href=\"./reframe_config.py\"><code>reframe_config.py</code></a>\
    \ lets you run the\nbenchmarks on systems for which the configuration has been\
    \ already contributed.  However you\ncan still use this framework on any system\
    \ by choosing the \"generic\" system with <code>--system generic</code>, or using\
    \ your own ReFrame configuration.  Note, however, that if you use the\n\"generic\"\
    \ system, ReFrame will not know anything about the queue manager of your system,\
    \ if\nany, or the MPI launcher.  For the benchmarks using the Spack build system,\
    \ if you choose\nthe \"generic\" system, a new empty Spack environment will be\
    \ automatically created in\n<code>spack-environments/generic</code>.  In any case,\
    \ you can always make the benchmarks use a\ndifferent Spack environment by setting\
    \ the environment variable <code>EXCALIBUR_SPACK_ENV</code>\ndescribed above.</p>\n\
    <h2><a id=\"user-content-contributing-new-systems-or-benchmarks\" class=\"anchor\"\
    \ aria-hidden=\"true\" href=\"#contributing-new-systems-or-benchmarks\"><span\
    \ aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Contributing\
    \ new systems or benchmarks</h2>\n<p>Feel free to add new benchmark apps or support\
    \ new systems that are part of the\nExCALIBUR benchmarking collaboration.  Read\n\
    <a href=\"./CONTRIBUTING.md\"><code>CONTRIBUTING.md</code></a> for more details.</p>\n"
  stargazers_count: 2
  subscribers_count: 7
  topics: []
  updated_at: 1657545914.0
uturuncoglu/testing:
  data_format: 2
  description: It is used for component testing and GitHub Action implementation
  filenames:
  - spack.yaml
  full_name: uturuncoglu/testing
  latest_release: null
  readme: '<h1><a id="user-content-testing" class="anchor" aria-hidden="true" href="#testing"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>testing</h1>

    <p>It is used for component testing and GitHub Action implementation</p>

    '
  stargazers_count: 0
  subscribers_count: 1
  topics: []
  updated_at: 1657212117.0
vanderwb/spack-crayenv:
  data_format: 2
  description: null
  filenames:
  - spack.yaml
  full_name: vanderwb/spack-crayenv
  latest_release: null
  readme: '<h1><a id="user-content-ncar-spack-deployment" class="anchor" aria-hidden="true"
    href="#ncar-spack-deployment"><span aria-hidden="true" class="octicon octicon-link"></span></a>NCAR
    Spack Deployment</h1>

    <p>This branch tracks the <strong>production</strong> deployment of Spack for
    the following configuration:</p>

    <table>

    <thead>

    <tr>

    <th></th>

    <th>crayenv</th>

    </tr>

    </thead>

    <tbody>

    <tr>

    <td>Creation date</td>

    <td>Fri Jun 17 18:21:49 MDT 2022</td>

    </tr>

    <tr>

    <td>ncar-spack commit</td>

    <td>24319d896f9bd0d58f5327fd89f251d80b844198</td>

    </tr>

    <tr>

    <td>Host version</td>

    <td>22.02</td>

    </tr>

    <tr>

    <td>Spack version</td>

    <td>v0.18.0</td>

    </tr>

    <tr>

    <td>Deployment path</td>

    <td>/glade/scratch/vanderwb/spack-tests/crayenv/22.02</td>

    </tr>

    <tr>

    <td>Environments path</td>

    <td>/glade/scratch/vanderwb/spack-tests/crayenv/22.02/envs</td>

    </tr>

    </tbody>

    </table>

    <p>This repository should <em>only</em> be updated via the <code>publish</code>
    script contained in the build environment. Any manual changes to this branch will
    cause headaches when you or another consultant attempt to publish new packages!</p>

    '
  stargazers_count: 0
  subscribers_count: 2
  topics: []
  updated_at: 1655513096.0
