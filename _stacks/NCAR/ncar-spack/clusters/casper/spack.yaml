# *** OpenSUSE Casper Software Stack ***
spack:
  config:
    install_tree:
      root: '%INSTALLROOT%'
      projections:
        ^mpi: '{name}/{version}/{^mpi.name}/{^mpi.version}/{compiler.name}/{compiler.version}/{hash:4}'
        all: '{name}/{version}/{compiler.name}/{compiler.version}/{hash:4}'
        gcc: '{name}/{version}/{hash:4}'
        netcdf-c: netcdf/{version}/packages/{name}/{version}/{compiler.name}/{compiler.version}/{hash:4}
        netcdf-c^mpi: netcdf/{version}/packages/{name}/{version}/{^mpi.name}/{^mpi.version}/{compiler.name}/{compiler.version}/{hash:4}
        netcdf-cxx4: netcdf/{^netcdf-c.version}/packages/{name}/{version}/{compiler.name}/{compiler.version}/{hash:4}
        netcdf-cxx4^mpi: netcdf/{^netcdf-c.version}/packages/{name}/{version}/{^mpi.name}/{^mpi.version}/{compiler.name}/{compiler.version}/{hash:4}
        netcdf-fortran: netcdf/{^netcdf-c.version}/packages/{name}/{version}/{compiler.name}/{compiler.version}/{hash:4}
        netcdf-fortran^mpi: netcdf/{^netcdf-c.version}/packages/{name}/{version}/{^mpi.name}/{^mpi.version}/{compiler.name}/{compiler.version}/{hash:4}
      padded_length: 128
    build_jobs: 4
    test_stage: '%TMPROOT%/$user/temp/spack/%DEPLOYMENT%/tests'
    source_cache: '%TMPROOT%/$user/temp/spack/cache'
    misc_cache: '%TMPROOT%/$user/temp/spack/%DEPLOYMENT%/misc'
    build_stage:
    - '%TMPROOT%/$user/temp/spack/%DEPLOYMENT%/builds'
    shared_linking:
      # Turning this setting on would be beneficial but vendor compilers do not
      # seem to work with it! Avoid!
      type: rpath
      bind: false
  packages:
    adios2:
      variants:
      - +cuda
      - +hdf5
      - +python
    all:
      compiler:
      - gcc@7.5.0
      - gcc
      - nvhpc
      - oneapi
      providers:
        'mpi:':
        - openmpi
        - impi
        - mvapich2
        'szip:':
        - libszip
        'pkgconfig:':
        - pkg-config
        'lapack:':
        - openblas
        - intel-oneapi-mkl
        - nvhpc
        'blas:':
        - openblas
        - intel-oneapi-mkl
        - nvhpc
        'zlib-api:':
        - zlib
      permissions:
        read: world
        write: user
      target:
        # This target is lowest-common denominator between Intel and Milans
      - x86_64_v3
      prefer:
        # This should force packages to use the vendor-preferred solution
        # for BLAS and LAPACK without needing to set it on each package
      - spec: ^openblas
        when: '%gcc ^lapack'
      - spec: ^intel-oneapi-mkl
        when: '%oneapi ^lapack'
      - spec: ^nvhpc
        when: '%nvhpc ^lapack'
      - spec: ^openblas
        when: '%gcc ^blas'
      - spec: ^intel-oneapi-mkl
        when: '%oneapi ^blas'
      - spec: ^nvhpc
        when: '%nvhpc ^blas'
      - spec: ^pkg-config
        when: ^pkgconfig
      - spec: ^zlib
        when: ^zlib-api
      - spec: cuda_arch=60,70,80
        when: +cuda
    antlr:
      require: '%gcc@7.5.0'
    apptainer:
      variants:
      - ~suid
    arpack-ng:
      variants:
      - ~mpi
    attr:
      require:
      - '%gcc@7.5.0'
    autoconf:
      require: '%gcc@7.5.0'
    autoconf-archive:
      require: '%gcc@7.5.0'
    automake:
      require: '%gcc@7.5.0'
    bash:
      require:
      - '%gcc@7.5.0'
    binutils:
      variants:
      - +gas
      - +gold
      - +ld
      - +libiberty
    bison:
      require: '%gcc@7.5.0'
    bzip2:
      require:
      - '%gcc@7.5.0'
    c-blosc:
      require:
      - '%gcc@7.5.0'
    c-blosc2:
      require:
      - '%gcc@7.5.0'
    cairo:
      require: '%gcc@7.5.0'
      variants:
      - +X
      - +fc
      - +ft
      - +gobject
      - +pdf
      - +png
    cdo:
      variants:
      - +curl
      require:
      - one_of:
        - ^proj@9
        when: +proj
    charliecloud:
      variants:
      - +squashfuse
    cli11:
      require: '%gcc@7.5.0'
    cmake:
      # Without +ownlibs, some packages can't concretize due to infinite regression
      require:
      - '%gcc@7.5.0'
      variants:
      - +ownlibs
    cpio:
      require:
      - '%gcc@7.5.0'
    cuda:
      variants:
      - +dev
      require:
      - +allow-unsupported-compilers
      - '%gcc@7.5.0'
    cudnn:
      require: '%gcc@7.5.0'
    curl:
      # Need mbedtls option for Julia - most other packages seem to prefer openSSL
      require:
      - '%gcc@7.5.0'
      - tls=openssl,mbedtls
      variants:
      - +libidn2
      - +libssh2
      - +nghttp2
    cutensor:
      require: '%gcc@7.5.0'
    darshan-runtime:
      variants:
      - +parallel-netcdf
      - scheduler=pbs
      require:
      - any_of:
        - ^hdf5+mpi
        when: +hdf5
    darshan-util:
      variants:
      - +bzip2
    diffutils:
      require:
      - '%gcc@7.5.0'
    doxygen:
      require:
      - '%gcc@7.5.0'
      variants:
      - +graphviz
    ecbuild:
      require:
      - '%gcc@7.5.0'
    eccodes:
      variants:
      - +fortran
      - +netcdf
      - +png
      - +tools
      - jp2k=jasper
    eigen:
      require: '%gcc@7.5.0'
    emacs:
      variants:
      - +X
      - +json
      - +treesitter
    esmf:
      # If external-lapack not forced, concretizer will try to be lazy and
      # avoid lapack requirements by switching to internal despite variant
      require:
      - spec: +external-lapack
        when: '@8.1:'
      - spec: ^parallelio@2.6.2
        when: +external-parallelio @8.6.0
      - spec: ^openblas
        when: '%gcc ^lapack'
      - spec: ^intel-oneapi-mkl@2024.1.0
        when: '%oneapi@2024.1.0 ^lapack'
      - spec: ^nvhpc@24.3
        when: '%nvhpc@24.3 ^lapack'
      variants:
      - +external-parallelio
      - ~mpi
      - ~pnetcdf
      - ~xerces
    expat:
      require: '%gcc@7.5.0'
    ferret:
      variants:
      - +datasets
    ffmpeg:
      variants:
      - +X
      - +drawtext
      - +libaom
      - +libmp3lame
      - +libopenjpeg
      - +libopus
      - +libsnappy
      - +libspeex
      - +libssh
      - +libvorbis
      - +libvpx
      - +libwebp
      - +libx264
      - +libxml2
      - +libzmq
      - +lzma
      - +sdl2
    fftw:
      variants:
      - ~mpi
    findutils:
      require:
      - '%gcc@7.5.0'
    flex:
      require: '%gcc@7.5.0'
    fltk:
      require: '%gcc@7.5.0'
    fontconfig:
      require: '%gcc@7.5.0'
    freetype:
      # Newer version leads to concretization issues for Python packages
      # This setting avoids multiple builds of many packages
      require:
      - '@:2.10.2'
      - '%gcc@7.5.0'
    gawk:
      require:
      - '%gcc@7.5.0'
    gcc:
      variants:
      - +piclibs
      - languages=c,c++,fortran,go
      require:
      - '%gcc@7.5.0'
    gdal:
      require:
      - any_of:
        - ^hdf5~mpi
        when: +hdf5
      - one_of:
        - ^proj@9
        when: '@3:'
      variants:
      - +blosc
      - +curl
      - +deflate
      - +expat
      - +geos
      - +gif
      - +grass
      - +grib
      - +hdf5
      - +iconv
      - +jasper
      - +jpeg
      - +libcsf
      - +liblzma
      - +lz4
      - +netcdf
      - +pcidsk
      - +png
      - +qhull
      - +sqlite3
      - +zstd
    gdb:
      variants:
      - +gold
      - +ld
      - +lto
      - +tui
      - ~debuginfod
      - ~python
    ghostscript:
      require:
      - '%gcc@7.5.0'
    giflib:
      require: '%gcc@7.5.0'
    gimp:
      # Turning docs on adds the dependency to itstool, which breaks a lot of reuse
      # because of libxml2+python requirement
      variants:
      - ~doc
    git:
      variants:
      - +svn
    gl2ps:
      require:
      - '%gcc@7.5.0'
    glew:
      require:
      - '%gcc@7.5.0'
    glpk:
      require: '%gcc@7.5.0'
    gmake:
      require:
      - '%gcc@7.5.0'
    gmp:
      require:
      - '%gcc@7.5.0'
    gmt:
      variants:
      - +ffmpeg
      - +fftw
      - +geos
      - +ghostscript
      - +glib
      - +pcre
      - ~graphicsmagick
      require:
      - +blas
      - +lapack
    gnuplot:
      variants:
      - +X
      - +qt
      - +wx
    googletest:
      require: '%gcc@7.5.0'
    gptl:
      variants:
      - +papi
      - +pmpi
    grads:
      variants:
      - +dap
    graphicsmagick:
      # graphicsmagick can't built using libjpeg>2
      # https://github.com/ImageMagick/ImageMagick/issues/6514
      require:
      - ^libjpeg-turbo@:2
      - '%gcc@7.5.0'
    groff:
      require:
      - '%gcc@7.5.0'
    gzip:
      require:
      - '%gcc@7.5.0'
    harfbuzz:
      variants:
      - +graphite2
    hdf:
      variants:
      - +external-xdr
      - +fortran
      - +szip
    hdf-eos2:
      require:
      - '@:2'
    hdf-eos5:
      require:
      - any_of:
        - ^hdf5@1.10
        when: '%gcc@7.5.0'
    hdf5:
      variants:
      - +cxx
      - +fortran
      - +hl
      - +szip
      - ~mpi
    hwloc:
      require:
      - '%gcc@7.5.0'
      variants:
      - +cuda
    hypre:
      require:
      - one_of:
        # This should force packages to use the vendor-preferred solution
        - '%oneapi ^intel-oneapi-mkl'
        - '%gcc ^openblas'
        - '%nvhpc ^nvhpc'
        - '%cce ^cray-libsci'
    icu4c:
      require: '%gcc@7.5.0'
    idl:
      require: '%gcc@7.5.0'
    imagemagick:
      variants:
      - +ghostscript
    intel-oneapi-advisor:
      require:
      - '%gcc@7.5.0'
    intel-oneapi-compilers:
      require: '%gcc@7.5.0'
    intel-oneapi-inspector:
      require:
      - '%gcc@7.5.0'
    intel-oneapi-mpi:
      variants:
      - +external-libfabric
      - +generic-names
    intel-oneapi-vtune:
      require:
      - '%gcc@7.5.0'
    ispc:
      require: '%clang'
    jasper:
      # Newer Jasper versions have caused issues in the past
      # TODO - recheck whether this is a problem now
      require:
      - '%gcc@7.5.0'
      - '@:2'
    json-c:
      require: '%gcc@7.5.0'
    jsoncpp:
      require: '%gcc@7.5.0'
    julia:
      require:
      - ^llvm~clang~gold~polly
      - ^openblas threads=openmp
    krb5:
      require:
      - '%gcc@7.5.0'
    libaec:
      require:
      - '%gcc@7.5.0'
    libarchive:
      require:
      - compression=bz2lib,lz4,lzma,lzo2,zlib,zstd xar=expat
      - '%gcc@7.5.0'
    libcap:
      require:
      - '%gcc@7.5.0'
    libcatalyst:
      require:
      - '%gcc@7.5.0'
    libdeflate:
      require: '%gcc@7.5.0'
    libemos:
      require:
      - one_of:
        - ^eccodes@2.25
        when: grib=eccodes
    libevent:
      require:
      - '%gcc@7.5.0'
    libfabric:
      require: '%gcc@7.5.0'
      variants:
      - fabrics=mrail,shm,sockets,tcp,udp,verbs
    libffi:
      require:
      - '%gcc@7.5.0'
      - '@:3.3'
    libfuse:
      require: ~utils
    libgd:
      # gnuplot fails to build with newer version due to libiconv linking failure
      require: '@2.2.4'
    libgit2:
      # Julia is demanding...
      require:
      - '@1.5'
    libjpeg-turbo:
      require: '%gcc@7.5.0'
    libogg:
      require: '%gcc@7.5.0'
    libpciaccess:
      require:
      - '%gcc@7.5.0'
    libpng:
      require: '%gcc@7.5.0'
    libssh2:
      # Julia again...
      require:
      - '@1.10'
      variants:
      - crypto=mbedtls
    libszip:
      require: '%gcc@7.5.0'
    libtheora:
      require: '%gcc@7.5.0'
    libtiff:
      require: '%gcc@7.5.0'
    libtirpc:
      require: '%gcc@7.5.0'
    libtool:
      require: '%gcc@7.5.0'
    libunwind:
      variants:
      - +cxx_exceptions
      - +debug_frame
      - +pic
      - +xz
      - +zlib
      - components=setjump,ptrace,coredump
    libx11:
      require: '%gcc@7.5.0'
    libxaw:
      require: '%gcc@7.5.0'
    libxcb:
      require: '%gcc@7.5.0'
    libxcrypt:
      require:
      - '%gcc@7.5.0'
    libxml2:
      require: '%gcc@7.5.0'
    linaro-forge:
      require: '%gcc@7.5.0'
    lustre:
      require:
      - '%gcc@7.5.0'
    lwgrp:
      require:
      - '%gcc@7.5.0'
    lz4:
      require: '%gcc@7.5.0'
    m4:
      require:
      - '%gcc@7.5.0'
    magma:
      require:
      - one_of:
        # This should force packages to use the vendor-preferred solution
        - '%oneapi ^intel-oneapi-mkl'
        - '%gcc ^openblas'
        - '%nvhpc ^nvhpc'
        - '%cce ^cray-libsci'
    matlab:
      require: '%gcc@7.5.0'
    maven:
      require:
      - '%gcc@7.5.0'
    mbedtls:
      # Julia of course...
      require:
      - '@2.28'
      - libs=static,shared
    mesa-glu:
      require:
      - '%gcc@7.5.0'
    mgard:
      require:
      - '%gcc@7.5.0'
    miniconda3:
      externals:
      - spec: miniconda3@4.12.0
        prefix: /glade/u/apps/opt/conda
      buildable: false
    motif:
      require:
      - ^autoconf@2.69
    mpifileutils:
      variants:
      - +gpfs
      - +lustre
      - +xattr
    mysql:
      require:
      - spec: cxxstd=14
        when: '@8.0.19'
    ncl:
      # Newer ESMF versions cause issues for NCL
      # TODO - bake this into recipe?
      require:
      - '%gcc@7.5.0'
      variants:
      - +gdal
      - +grib
      - +hdf4
    netcdf:
      variants:
      - +dap
      - ~mpi
    netcdf-c:
      variants:
      - +dap
      - build_system=cmake
      - ~mpi
    netcdf-cxx4:
      variants:
      - ~doc
    nghttp2:
      # Thanks Julia...
      require: '@1.48'
    ninja:
      require: '%gcc@7.5.0'
    numactl:
      require: '%gcc@7.5.0'
    nvhpc:
      require: '%gcc@7.5.0'
    ocl-icd:
      variants:
      - +headers
    octave:
      variants:
      - +arpack
      - +curl
      - +fftw
      - +fltk
      - +fontconfig
      - +freetype
      - +gl2ps
      - +glpk
      - +gnuplot
      - +llvm
      - +magick
      - +opengl
      - +qhull
      - +qrupdate
      - +qscintilla
      - +qt
      - +suitesparse
      - +zlib
    openblas:
      variants:
      - +fortran
      - threads=openmp
    openjdk:
      require:
      - '%gcc@7.5.0'
    openmpi:
      require:
      - fabrics=cma,ucx
      - schedulers=tm
      - +gpfs
      - +lustre
      - +internal-pmix
      - any_of:
        - ^cuda@12
        when: '@4.1.6 +cuda'
      variants:
      - +cuda
    openpbs:
      externals:
      - spec: openpbs@2021.1.3
        prefix: /opt/pbs
      buildable: false
      require:
      - '%gcc@7.5.0'
    openssh:
      require:
      - '%gcc@7.5.0'
    openssl:
      # Requiring certs=system is necessary to perform builds like rust using
      # external openssl. Also note that I've edited the package to remove the
      # deprecation status of this version. It makes the concretizer wildly
      # unpredictable and fussy! This seems justified as the Spack documentation
      # itself suggests that the trusted thing to do is to use the system version
      require:
      - certs=system
      - '%gcc@7.5.0'
    osmesa:
      require:
      - '%gcc@7.5.0'
    ospray:
      require:
      - '%gcc@7.5.0'
    pango:
      variants:
      - +X
    parallelio:
      variants:
      - +ncint
      - +pnetcdf
      - ~logging
      require:
      - any_of:
        - ~pnetcdf
        when: ~mpi
      - one_of:
        - ^mpi-serial@2.5.0
        when: ~mpi @2.6.2
    parallelio1:
      variants:
      - +pnetcdf
    paraview:
      variants:
      - +adios2
      - +examples
      - +eyedomelighting
      - +fortran
      - +hdf5
      - +libcatalyst
      - +opengl2
      - +openpmd
      - +osmesa
      - +pagosa
      - +python
      - +qt
      - +visitbridge
      require:
        # These requirements improve package reuse
      - spec: ^netcdf-c+mpi
        when: +mpi
      - spec: ^adios2@2.10
        when: '@5.12.0 +adios2'
    patchelf:
      # Version 0.18 breaks when using gcc@7.5.0
      require:
      - '@:0.17'
    pcre:
      require: '%gcc@7.5.0'
    pcre2:
      require: '%gcc@7.5.0'
    pegtl:
      require: '%gcc@7.5.0'
    perl:
      require: '%gcc@7.5.0'
    petsc:
      require:
      - one_of:
        # This should force packages to use the vendor-preferred solution
        - '%oneapi ^intel-oneapi-mkl'
        - '%gcc ^openblas'
        - '%nvhpc ^nvhpc'
        - '%cce ^cray-libsci'
    pkg-config:
      require:
      - '%gcc@7.5.0'
    pmix:
      require: '%gcc@7.5.0'
    pocl:
      variants:
      - +icd
    postgresql:
      variants:
      - +xml
    protobuf:
      require: '%gcc@7.5.0'
    py-cftime:
      require:
      # DAG - help METPlus use same MET
      - ^py-cython@0.29.36
    py-fypp:
      require:
      - '%gcc@7.5.0'
    py-mpi4py:
      prefer:
      - spec: '%oneapi'
        when: ^openmpi %oneapi
      - spec: '%gcc@13.2.0'
        when: ^openmpi %gcc@13.2.0
    py-netcdf4:
      variants:
      - ~mpi
      require:
      # DAG - help METPlus use same MET
      - ^py-cython@0.29.36
    py-numpy:
      require:
      - '%gcc@7.5.0'
    py-pip:
      require:
      - '%gcc@7.5.0'
    py-setuptools:
      # Simplifies stack to limit to 0.63, latest version used by numpy with Python < 3.12
      require:
      - '%gcc@7.5.0'
      - '@:63'
    python:
      require: '%gcc@7.5.0'
    qhull:
      require: '%gcc@7.5.0'
    qt:
      variants:
      - +dbus
      - +examples
      - +opengl
      - +webkit
      require:
      - +gtk
      - '@5.14.2'
    qt-base:
      require:
      - '%gcc@7.5.0'
    readline:
      require: '%gcc@7.5.0'
    rstudio:
      require:
      - '%gcc@7.5.0'
    rsync:
      require:
      - '%gcc@7.5.0'
    sed:
      require:
      - '%gcc@7.5.0'
    singularityce:
      variants:
      - ~suid
    snappy:
      require: '%gcc@7.5.0'
    sqlite:
      require: '%gcc@7.5.0'
    superlu:
      require:
      - one_of:
        # This should force packages to use the vendor-preferred solution
        - '%oneapi ^intel-oneapi-mkl'
        - '%gcc ^openblas'
        - '%nvhpc ^nvhpc'
        - '%cce ^cray-libsci'
    superlu-dist:
      require:
      - one_of:
        # This should force packages to use the vendor-preferred solution
        - '%oneapi ^intel-oneapi-mkl'
        - '%gcc ^openblas'
        - '%nvhpc ^nvhpc'
        - '%cce ^cray-libsci'
    sz:
      require: '%gcc@7.5.0'
    tar:
      require:
      - '%gcc@7.5.0'
    texinfo:
      require: '%gcc@7.5.0'
    texlive:
      require:
      - '%gcc@7.5.0'
    ucx:
      require: '%gcc@7.5.0'
      variants:
      - +cm
      - +cma
      - +cuda
      - +dc
      - +dm
      - +gdrcopy
      - +ib_hw_tm
      - +knem
      - +mlx5_dv
      - +rc
      - +rdmacm
      - +thread_multiple
      - +ud
      - +verbs
      - +vfs
    unzip:
      require:
      - '%gcc@7.5.0'
    util-linux-uuid:
      require: '%gcc@7.5.0'
    vapor:
      variants:
      - +ospray
    vim:
      variants:
      - +cscope
      - +gtk
      - +gui
      - +lua
      - +perl
      - +python
      - +ruby
      - +x
      - features=huge
    visit:
      variants:
      - +hdf5
      - +mpi
      - +netcdf
      - ~conduit
      - ~mfem
      - ~python
      - ~vtkm
      require:
      # Force concretizer to use latest supported adios2
      - ^adios2@2.7
    vtk:
      require:
      - '%gcc@7.5.0'
    vtk-m:
      require: '%gcc@7.5.0'
    wget:
      require:
      - '%gcc@7.5.0'
    wgrib2:
      variants:
      - +netcdf4
      - +proj4
      - +udf
      - ~checks
      - ~netcdf3
    which:
      require: '%gcc@7.5.0'
    wxwidgets:
      variants:
      - +opengl
    xz:
      require:
      - '%gcc@7.5.0'
    zfp:
      require: '%gcc@7.5.0'
    zlib:
      require:
      - '%gcc@7.5.0'
    zstd:
      require: '%gcc@7.5.0'
      variants:
      - +programs
  view:
    baseenv:
      root: '%BASEROOT%/view'
      select:
      - git
      link_type: symlink
      link: roots
  compilers: []
  modules:
    'default:':
      roots:
        lmod: '%MODULESROOT%'
      arch_folder: false
      'enable:':
      - lmod
      prefix_inspections:
        bin:
        - PATH
        lib:
        - NCAR_LDFLAGS_{name}
        lib64:
        - NCAR_LDFLAGS_{name}64
        include:
        - NCAR_INC_{name}
        man:
        - MANPATH
        share/man:
        - MANPATH
        lib/pkgconfig:
        - PKG_CONFIG_PATH
        lib64/pkgconfig:
        - PKG_CONFIG_PATH
      lmod:
        all:
          environment:
            set:
              NCAR_ROOT_{name}: '{prefix}'
              NCAR_SPACK_HASH_{name}: '{hash}'
          template: ncar_default.lua
        apptainer:
          environment:
            prepend_path:
              PATH: '{^squashfs.prefix}/bin'
          filter:
            exclude_env_vars:
            - GOPATH
        cdo:
          autoload: none
        charliecloud:
          environment:
            prepend_path:
              PATH: /glade/work/csgteam/spack-deployments/casper/23.10/envs/build/wrappers/{name}/{version}/{hash:4}/bin
        core_compilers:
        - gcc@7.5.0
        core_specs:
        - visit
        - paraview
        - gmt
        - octave
        - nccmp
        - ncview
        - cdo
        - nco
        - gsl
        - cuda
        - r
        - cmake
        - wgrib2
        cuda:
          environment:
            set:
              CUDATOOLKIT_HOME: '{prefix}'
              CUDA_VERSION: '{version}'
              NVHPC_CUDA_HOME: '{prefix}'
            prepend_path:
              LD_LIBRARY_PATH: '{prefix}/lib64:{prefix}/nvvm/lib64:{prefix}/extras/CUPTI/lib64:{prefix}/extras/Debugger/lib64'
        cudnn:
          environment:
            prepend_path:
              LD_LIBRARY_PATH: '{prefix}/lib'
        cutensor:
          template: ncar_requires_cuda.lua
          filter:
            exclude_env_vars:
            - NCAR_LDFLAGS_CUTENSOR
          environment:
            set:
              NCAR_LDFLAGS_CUTENSOR_CUDA: '{prefix}/lib/" .. os.getenv("CUDA_MAJOR_VERSION")
                .."'
        darshan-runtime:
          autoload: none
          environment:
            set:
              DARSHAN_LOG_DIR_PATH: /glade/u/home/"..os.getenv("USER").."
              DARSHAN_MOD_DISABLE: LUSTRE
              DARSHAN_SHARED_LIB: '{prefix}/lib/libdarshan.so'
        defaults:
        - netcdf@4.9.2
        - openmpi@5.0.2
        - cuda@11.8.0
        - gcc@13.2.0
        - intel-oneapi-compilers@2024.1.0
        - nvhpc@24.3
        - parallelio+mpi
        - esmf+mpi
        esmf:
          autoload: none
        exclude:
        - lmod
        exclude_implicits: true
        fftw+mpi:
          template: conflict-mpi.lua
        fftw~mpi:
          template: conflict-serial.lua
        gcc:
          environment:
            set:
              NCAR_BUILD_ENV: casper-{name}-{version}
              NCAR_BUILD_ENV_COMPILER: casper-{name}-{version}
              NCAR_ID_COMPILER: '{name}-{version}'
              NCAR_ROOT_COMPILER: '{prefix}'
        hash_length: 0
        hdf5+mpi:
          template: conflict-mpi.lua
        hdf5~mpi:
          template: conflict-serial.lua
        hierarchy:
        - mpi
        intel-oneapi-advisor:
          filter:
            exclude_env_vars:
            - NCAR_ROOT_INTEL_ONEAPI_ADVISOR
            - NCAR_SPACK_HASH_INTEL_ONEAPI_ADVISOR
          environment:
            set:
              NCAR_ROOT_INTEL_ADVISOR: '{prefix}'
              NCAR_SPACK_HASH_INTEL_ADVISOR: '{hash}'
        intel-oneapi-compilers:
          template: ncar_intel.lua
          filter:
            exclude_env_vars:
            - NCAR_ROOT_INTEL_ONEAPI_COMPILERS
            - NCAR_SPACK_HASH_INTEL_ONEAPI_COMPILERS
          environment:
            set:
              INTEL_COMPILER_TYPE: ONEAPI
              INTEL_PATH: '{prefix}'
              INTEL_VERSION: '{version}'
              I_MPI_CC: icx
              I_MPI_CXX: icpx
              I_MPI_F77: ifx
              I_MPI_F90: ifx
              I_MPI_FC: ifx
              NCAR_BUILD_ENV: casper-oneapi-{version}
              NCAR_BUILD_ENV_COMPILER: casper-oneapi-{version}
              NCAR_ID_COMPILER: oneapi-{version}
              NCAR_ROOT_COMPILER: '{prefix}'
              NCAR_ROOT_ONEAPI: '{prefix}'
              NCAR_SPACK_HASH_ONEAPI: '{hash}'
              OMPI_CC: icx
              OMPI_CXX: icpx
              OMPI_F77: ifx
              OMPI_FC: ifx
        intel-oneapi-compilers-classic:
          template: ncar_intel.lua
          autoload: none
          filter:
            exclude_env_vars:
            - CMAKE_PREFIX_PATH
            - NCAR_ROOT_INTEL_ONEAPI_COMPILERS_CLASSIC
            - NCAR_SPACK_HASH_INTEL_ONEAPI_COMPILERS_CLASSIC
          environment:
            set:
              INTEL_COMPILER_TYPE: CLASSIC
              INTEL_PATH: '{^intel-oneapi-compilers.prefix}'
              INTEL_VERSION: '{version}'
              I_MPI_CC: icc
              I_MPI_CXX: icpc
              I_MPI_F77: ifort
              I_MPI_F90: ifort
              I_MPI_FC: ifort
              NCAR_BUILD_ENV: casper-intel-{^intel-oneapi-compilers.version}
              NCAR_BUILD_ENV_COMPILER: casper-intel-{^intel-oneapi-compilers.version}
              NCAR_ID_COMPILER: intel-{^intel-oneapi-compilers.version}
              NCAR_ROOT_COMPILER: '{^intel-oneapi-compilers.prefix}'
              NCAR_ROOT_INTEL: '{^intel-oneapi-compilers.prefix}'
              NCAR_SPACK_HASH_INTEL: '{hash}'
              OMPI_CC: icc
              OMPI_CXX: icpc
              OMPI_F77: ifort
              OMPI_FC: ifort
        intel-oneapi-inspector:
          filter:
            exclude_env_vars:
            - NCAR_ROOT_INTEL_ONEAPI_INSPECTOR
            - NCAR_SPACK_HASH_INTEL_ONEAPI_INSPECTOR
          environment:
            set:
              NCAR_ROOT_INTEL_INSPECTOR: '{prefix}'
              NCAR_SPACK_HASH_INTEL_INSPECTOR: '{hash}'
        intel-oneapi-mkl:
          template: ncar_math.lua
          filter:
            exclude_env_vars:
            - NCAR_LDFLAGS_INTEL_ONEAPI_MKL
            - NCAR_ROOT_INTEL_ONEAPI_MKL
            - NCAR_SPACK_HASH_INTEL_ONEAPI_MKL
          environment:
            set:
              NCAR_LDFLAGS_MKL: '{prefix}/mkl/{version}/lib/intel64'
              NCAR_ROOT_MKL: '{prefix}/mkl/{version}'
              NCAR_SPACK_HASH_MKL: '{hash}'
        intel-oneapi-mpi:
          filter:
            exclude_env_vars:
            - NCAR_ROOT_INTEL_ONEAPI_MPI
            - NCAR_SPACK_HASH_INTEL_ONEAPI_MPI
          environment:
            set:
              I_MPI_HYDRA_BOOTSTRAP: rsh
              I_MPI_HYDRA_BOOTSTRAP_EXEC: pbs_tmrsh
              NCAR_ROOT_INTEL_MPI: '{prefix}'
              NCAR_SPACK_HASH_INTEL_MPI: '{hash}'
        intel-oneapi-vtune:
          filter:
            exclude_env_vars:
            - NCAR_ROOT_INTEL_ONEAPI_VTUNE
            - NCAR_SPACK_HASH_INTEL_ONEAPI_VTUNE
          environment:
            set:
              NCAR_ROOT_INTEL_VTUNE: '{prefix}'
              NCAR_SPACK_HASH_INTEL_VTUNE: '{hash}'
            append_path:
              LD_LIBRARY_PATH: '{prefix}/vtune/latest/lib64'
        julia:
          environment:
            append_path:
              PATH: '{^llvm.prefix}/bin'
            set:
              VGL_GLLIB: /usr/lib64/libGL.so.1
        llvm+clang:
          filter:
            exclude_env_vars:
            - NCAR_INC_LLVM
            - NCAR_LDFLAGS_LLVM
            - NCAR_ROOT_LLVM
            - NCAR_SPACK_HASH_LLVM
          environment:
            set:
              NCAR_BUILD_ENV: casper-clang-{version}
              NCAR_BUILD_ENV_COMPILER: casper-clang-{version}
              NCAR_ID_COMPILER: clang-{version}
              NCAR_INC_CLANG: '{prefix}/include'
              NCAR_LDFLAGS_CLANG: '{prefix}/lib'
              NCAR_ROOT_CLANG: '{prefix}'
              NCAR_ROOT_COMPILER: '{prefix}'
              NCAR_SPACK_HASH_CLANG: '{hash}'
        miniconda3:
          filter:
            exclude_env_vars:
            - ACLOCAL_PATH
            - CMAKE_PREFIX_PATH
            - CONDA_EXE
            - CONDA_PYTHON_EXE
            - CONDA_SHLVL
            - LD_LIBRARY_PATH
            - MANPATH
            - NCAR_INC_MINICONDA3
            - NCAR_LDFLAGS_MINICONDA3
            - NCAR_ROOT_MINICONDA3
            - NCAR_SPACK_HASH_MINICONDA3
            - PATH
            - PKG_CONFIG_PATH
            - _CE_CONDA
            - _CE_M
          environment:
            set:
              NCAR_CONTAINERIZE_SUPPORT_CONDA: no
              NCAR_ROOT_CONDA: '{prefix}'
              NCAR_SPACK_HASH_CONDA: '{hash}'
          template: conda.lua
        mpi:
          template: ncar_wrapper_mpi.lua
          environment:
            set:
              NCAR_BUILD_ENV_MPI: casper-{compiler.name}-{compiler.version}-{name}-{version}
              NCAR_ID_MPI: '{name}-{version}'
              NCAR_ROOT_MPI: '{prefix}'
        ncarcompilers:
          environment:
            set:
              NCAR_EXCLUDE_ASNEEDED: '1'
          template: ncar_wrapper.lua
        nccmp:
          autoload: none
        nco:
          autoload: none
        ncview:
          autoload: none
        netcdf:
          autoload: all
        netcdf+mpi:
          template: conflict-mpi.lua
        netcdf~mpi:
          template: conflict-serial.lua
        nvhpc:
          environment:
            set:
              NCAR_BUILD_ENV: casper-{name}-{version}
              NCAR_BUILD_ENV_COMPILER: casper-{name}-{version}
              NCAR_ID_COMPILER: '{name}-{version}'
              NCAR_ROOT_COMPILER: '{prefix}'
              NVIDIA_PATH: '{prefix}'
              NVIDIA_VERSION: '{version}'
            prepend_path:
              LD_LIBRARY_PATH: '{prefix}/Linux_x86_64/{version}/compilers/lib'
        nvhpc@21.3:
          environment:
            set:
              CRAY_CPU_TARGET: x86-rome
        octave:
          autoload: none
        openmpi:
          environment:
            set:
              OMPI_MCA_oob_tcp_if_exclude: mgt
              OMPI_MCA_shmem_mmap_enable_nfs_warning: '0'
            prepend_path:
              LD_LIBRARY_PATH: '{prefix}/lib'
        openmpi@5:
          environment:
            set:
              # https://github.com/open-mpi/ompi/issues/9647
              OMPI_MCA_rmaps_default_mapping_policy: :hwtcpus
              OMPI_MCA_smsc: ^knem
        parallel-netcdf:
          environment:
            set:
              PNETCDF: '{prefix}'
        parallelio:
          environment:
            set:
              PIO: '{prefix}'
        parallelio1:
          filter:
            exclude_env_vars:
            - NCAR_INC_PARALLELIO1
            - NCAR_LDFLAGS_PARALLELIO1
            - NCAR_ROOT_PARALLELIO1
            - NCAR_SPACK_HASH_PARALLELIO1
          environment:
            set:
              NCAR_INC_PARALLELIO: '{prefix}/include'
              NCAR_LDFLAGS_PARALLELIO: '{prefix}/lib'
              NCAR_ROOT_PARALLELIO: '{prefix}'
              NCAR_SPACK_HASH_PARALLELIO: '{hash}'
              PIO: '{prefix}'
        paraview:
          autoload: none
          environment:
            prepend_path:
              PATH: /glade/work/csgteam/spack-deployments/casper/23.10/envs/build/wrappers/{name}/{version}/{hash:4}/bin
        projections:
          all: '{name}/{version}'
          fftw+mpi: fftw-mpi/{version}
          netcdf+mpi: netcdf-mpi/{version}
          hdf5+mpi: hdf5-mpi/{version}
          netcdf: netcdf/{version}
          intel-oneapi-advisor: intel-advisor/{version}
          intel-oneapi-compilers: intel-oneapi/{version}
          intel-oneapi-compilers-classic: intel-classic/{^intel-oneapi-compilers.version}
          intel-oneapi-inspector: intel-inspector/{version}
          intel-oneapi-mpi: intel-mpi/{version}
          intel-oneapi-mkl: mkl/{version}
          intel-oneapi-vtune: intel-vtune/{version}
          miniconda3: conda/latest
          parallelio1: parallelio/{version}
          llvm+clang: clang/{version}
        rstudio:
          filter:
            exclude_env_vars:
            - CMAKE_PREFIX_PATH
          environment:
            prepend_path:
              PATH: '{prefix}'
        singularityce:
          environment:
            prepend_path:
              PATH: '{^squashfs.prefix}/bin'
          filter:
            exclude_env_vars:
            - GOPATH
        visit:
          autoload: none
  concretizer:
    unify: false
    reuse: false
    os_compatible:
      opensuse15:
      - sles15
      sles15:
      - opensuse15
